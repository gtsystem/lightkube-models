{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Documentation of Resources and Models for Kubernetes 1.18.14 to be used with lightkube . Table of content Models Resources Back to lightkube documentation","title":"Introduction"},{"location":"#introduction","text":"Documentation of Resources and Models for Kubernetes 1.18.14 to be used with lightkube .","title":"Introduction"},{"location":"#table-of-content","text":"Models Resources Back to lightkube documentation","title":"Table of content"},{"location":"models/","text":"All models Model name Available versions APIGroup meta_v1 APIGroupList meta_v1 APIResource meta_v1 APIResourceList meta_v1 APIService apiregistration_v1 , apiregistration_v1beta1 APIServiceCondition apiregistration_v1 , apiregistration_v1beta1 APIServiceList apiregistration_v1 , apiregistration_v1beta1 APIServiceSpec apiregistration_v1 , apiregistration_v1beta1 APIServiceStatus apiregistration_v1 , apiregistration_v1beta1 APIVersions meta_v1 AWSElasticBlockStoreVolumeSource core_v1 Affinity core_v1 AggregationRule rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 AllowedCSIDriver policy_v1beta1 AllowedFlexVolume policy_v1beta1 AllowedHostPath policy_v1beta1 AttachedVolume core_v1 AuditSink auditregistration_v1alpha1 AuditSinkList auditregistration_v1alpha1 AuditSinkSpec auditregistration_v1alpha1 AzureDiskVolumeSource core_v1 AzureFilePersistentVolumeSource core_v1 AzureFileVolumeSource core_v1 Binding core_v1 BoundObjectReference authentication_v1 CSIDriver storage_v1 , storage_v1beta1 CSIDriverList storage_v1 , storage_v1beta1 CSIDriverSpec storage_v1 , storage_v1beta1 CSINode storage_v1 , storage_v1beta1 CSINodeDriver storage_v1 , storage_v1beta1 CSINodeList storage_v1 , storage_v1beta1 CSINodeSpec storage_v1 , storage_v1beta1 CSIPersistentVolumeSource core_v1 CSIVolumeSource core_v1 Capabilities core_v1 CephFSPersistentVolumeSource core_v1 CephFSVolumeSource core_v1 CertificateSigningRequest certificates_v1beta1 CertificateSigningRequestCondition certificates_v1beta1 CertificateSigningRequestList certificates_v1beta1 CertificateSigningRequestSpec certificates_v1beta1 CertificateSigningRequestStatus certificates_v1beta1 CinderPersistentVolumeSource core_v1 CinderVolumeSource core_v1 ClientIPConfig core_v1 ClusterRole rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 ClusterRoleBinding rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 ClusterRoleBindingList rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 ClusterRoleList rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 ComponentCondition core_v1 ComponentStatus core_v1 ComponentStatusList core_v1 ConfigMap core_v1 ConfigMapEnvSource core_v1 ConfigMapKeySelector core_v1 ConfigMapList core_v1 ConfigMapNodeConfigSource core_v1 ConfigMapProjection core_v1 ConfigMapVolumeSource core_v1 Container core_v1 ContainerImage core_v1 ContainerPort core_v1 ContainerState core_v1 ContainerStateRunning core_v1 ContainerStateTerminated core_v1 ContainerStateWaiting core_v1 ContainerStatus core_v1 ControllerRevision apps_v1 ControllerRevisionList apps_v1 CronJob batch_v2alpha1 , batch_v1beta1 CronJobList batch_v2alpha1 , batch_v1beta1 CronJobSpec batch_v2alpha1 , batch_v1beta1 CronJobStatus batch_v2alpha1 , batch_v1beta1 CrossVersionObjectReference autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 CustomResourceColumnDefinition apiextensions_v1 , apiextensions_v1beta1 CustomResourceConversion apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinition apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionCondition apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionList apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionNames apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionSpec apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionStatus apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionVersion apiextensions_v1 , apiextensions_v1beta1 CustomResourceSubresourceScale apiextensions_v1 , apiextensions_v1beta1 CustomResourceSubresourceStatus apiextensions_v1 , apiextensions_v1beta1 CustomResourceSubresources apiextensions_v1 , apiextensions_v1beta1 CustomResourceValidation apiextensions_v1 , apiextensions_v1beta1 DaemonEndpoint core_v1 DaemonSet apps_v1 DaemonSetCondition apps_v1 DaemonSetList apps_v1 DaemonSetSpec apps_v1 DaemonSetStatus apps_v1 DaemonSetUpdateStrategy apps_v1 DeleteOptions meta_v1 Deployment apps_v1 DeploymentCondition apps_v1 DeploymentList apps_v1 DeploymentSpec apps_v1 DeploymentStatus apps_v1 DeploymentStrategy apps_v1 DownwardAPIProjection core_v1 DownwardAPIVolumeFile core_v1 DownwardAPIVolumeSource core_v1 EmptyDirVolumeSource core_v1 Endpoint discovery_v1beta1 EndpointAddress core_v1 EndpointConditions discovery_v1beta1 EndpointPort core_v1 , discovery_v1beta1 EndpointSlice discovery_v1beta1 EndpointSliceList discovery_v1beta1 EndpointSubset core_v1 Endpoints core_v1 EndpointsList core_v1 EnvFromSource core_v1 EnvVar core_v1 EnvVarSource core_v1 EphemeralContainer core_v1 Event core_v1 , events_v1beta1 EventList core_v1 , events_v1beta1 EventSeries core_v1 , events_v1beta1 EventSource core_v1 Eviction policy_v1beta1 ExecAction core_v1 ExternalDocumentation apiextensions_v1 , apiextensions_v1beta1 ExternalMetricSource autoscaling_v2beta2 , autoscaling_v2beta1 ExternalMetricStatus autoscaling_v2beta2 , autoscaling_v2beta1 FCVolumeSource core_v1 FSGroupStrategyOptions policy_v1beta1 FieldsV1 meta_v1 FlexPersistentVolumeSource core_v1 FlexVolumeSource core_v1 FlockerVolumeSource core_v1 FlowDistinguisherMethod flowcontrol_v1alpha1 FlowSchema flowcontrol_v1alpha1 FlowSchemaCondition flowcontrol_v1alpha1 FlowSchemaList flowcontrol_v1alpha1 FlowSchemaSpec flowcontrol_v1alpha1 FlowSchemaStatus flowcontrol_v1alpha1 GCEPersistentDiskVolumeSource core_v1 GitRepoVolumeSource core_v1 GlusterfsPersistentVolumeSource core_v1 GlusterfsVolumeSource core_v1 GroupSubject flowcontrol_v1alpha1 GroupVersionForDiscovery meta_v1 HPAScalingPolicy autoscaling_v2beta2 HPAScalingRules autoscaling_v2beta2 HTTPGetAction core_v1 HTTPHeader core_v1 HTTPIngressPath extensions_v1beta1 , networking_v1beta1 HTTPIngressRuleValue extensions_v1beta1 , networking_v1beta1 Handler core_v1 HorizontalPodAutoscaler autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 HorizontalPodAutoscalerBehavior autoscaling_v2beta2 HorizontalPodAutoscalerCondition autoscaling_v2beta2 , autoscaling_v2beta1 HorizontalPodAutoscalerList autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 HorizontalPodAutoscalerSpec autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 HorizontalPodAutoscalerStatus autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 HostAlias core_v1 HostPathVolumeSource core_v1 HostPortRange policy_v1beta1 IDRange policy_v1beta1 IPBlock networking_v1 ISCSIPersistentVolumeSource core_v1 ISCSIVolumeSource core_v1 Info version Ingress extensions_v1beta1 , networking_v1beta1 IngressBackend extensions_v1beta1 , networking_v1beta1 IngressClass networking_v1beta1 IngressClassList networking_v1beta1 IngressClassSpec networking_v1beta1 IngressList extensions_v1beta1 , networking_v1beta1 IngressRule extensions_v1beta1 , networking_v1beta1 IngressSpec extensions_v1beta1 , networking_v1beta1 IngressStatus extensions_v1beta1 , networking_v1beta1 IngressTLS extensions_v1beta1 , networking_v1beta1 IntOrString util_intstr JSON apiextensions_v1 , apiextensions_v1beta1 JSONSchemaProps apiextensions_v1 , apiextensions_v1beta1 JSONSchemaPropsOrArray apiextensions_v1 , apiextensions_v1beta1 JSONSchemaPropsOrBool apiextensions_v1 , apiextensions_v1beta1 JSONSchemaPropsOrStringArray apiextensions_v1 , apiextensions_v1beta1 Job batch_v1 JobCondition batch_v1 JobList batch_v1 JobSpec batch_v1 JobStatus batch_v1 JobTemplateSpec batch_v2alpha1 , batch_v1beta1 KeyToPath core_v1 LabelSelector meta_v1 LabelSelectorRequirement meta_v1 Lease coordination_v1 , coordination_v1beta1 LeaseList coordination_v1 , coordination_v1beta1 LeaseSpec coordination_v1 , coordination_v1beta1 Lifecycle core_v1 LimitRange core_v1 LimitRangeItem core_v1 LimitRangeList core_v1 LimitRangeSpec core_v1 LimitResponse flowcontrol_v1alpha1 LimitedPriorityLevelConfiguration flowcontrol_v1alpha1 ListMeta meta_v1 LoadBalancerIngress core_v1 LoadBalancerStatus core_v1 LocalObjectReference core_v1 LocalSubjectAccessReview authorization_v1 , authorization_v1beta1 LocalVolumeSource core_v1 ManagedFieldsEntry meta_v1 MetricIdentifier autoscaling_v2beta2 MetricSpec autoscaling_v2beta2 , autoscaling_v2beta1 MetricStatus autoscaling_v2beta2 , autoscaling_v2beta1 MetricTarget autoscaling_v2beta2 MetricValueStatus autoscaling_v2beta2 MicroTime meta_v1 MutatingWebhook admissionregistration_v1 , admissionregistration_v1beta1 MutatingWebhookConfiguration admissionregistration_v1 , admissionregistration_v1beta1 MutatingWebhookConfigurationList admissionregistration_v1 , admissionregistration_v1beta1 NFSVolumeSource core_v1 Namespace core_v1 NamespaceCondition core_v1 NamespaceList core_v1 NamespaceSpec core_v1 NamespaceStatus core_v1 NetworkPolicy networking_v1 NetworkPolicyEgressRule networking_v1 NetworkPolicyIngressRule networking_v1 NetworkPolicyList networking_v1 NetworkPolicyPeer networking_v1 NetworkPolicyPort networking_v1 NetworkPolicySpec networking_v1 Node core_v1 NodeAddress core_v1 NodeAffinity core_v1 NodeCondition core_v1 NodeConfigSource core_v1 NodeConfigStatus core_v1 NodeDaemonEndpoints core_v1 NodeList core_v1 NodeSelector core_v1 NodeSelectorRequirement core_v1 NodeSelectorTerm core_v1 NodeSpec core_v1 NodeStatus core_v1 NodeSystemInfo core_v1 NonResourceAttributes authorization_v1 , authorization_v1beta1 NonResourcePolicyRule flowcontrol_v1alpha1 NonResourceRule authorization_v1 , authorization_v1beta1 ObjectFieldSelector core_v1 ObjectMeta meta_v1 ObjectMetricSource autoscaling_v2beta2 , autoscaling_v2beta1 ObjectMetricStatus autoscaling_v2beta2 , autoscaling_v2beta1 ObjectReference core_v1 Overhead node_v1beta1 , node_v1alpha1 OwnerReference meta_v1 Patch meta_v1 PersistentVolume core_v1 PersistentVolumeClaim core_v1 PersistentVolumeClaimCondition core_v1 PersistentVolumeClaimList core_v1 PersistentVolumeClaimSpec core_v1 PersistentVolumeClaimStatus core_v1 PersistentVolumeClaimVolumeSource core_v1 PersistentVolumeList core_v1 PersistentVolumeSpec core_v1 PersistentVolumeStatus core_v1 PhotonPersistentDiskVolumeSource core_v1 Pod core_v1 PodAffinity core_v1 PodAffinityTerm core_v1 PodAntiAffinity core_v1 PodCondition core_v1 PodDNSConfig core_v1 PodDNSConfigOption core_v1 PodDisruptionBudget policy_v1beta1 PodDisruptionBudgetList policy_v1beta1 PodDisruptionBudgetSpec policy_v1beta1 PodDisruptionBudgetStatus policy_v1beta1 PodIP core_v1 PodList core_v1 PodPreset settings_v1alpha1 PodPresetList settings_v1alpha1 PodPresetSpec settings_v1alpha1 PodReadinessGate core_v1 PodSecurityContext core_v1 PodSecurityPolicy policy_v1beta1 PodSecurityPolicyList policy_v1beta1 PodSecurityPolicySpec policy_v1beta1 PodSpec core_v1 PodStatus core_v1 PodTemplate core_v1 PodTemplateList core_v1 PodTemplateSpec core_v1 PodsMetricSource autoscaling_v2beta2 , autoscaling_v2beta1 PodsMetricStatus autoscaling_v2beta2 , autoscaling_v2beta1 Policy auditregistration_v1alpha1 PolicyRule rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 PolicyRulesWithSubjects flowcontrol_v1alpha1 PortworxVolumeSource core_v1 Preconditions meta_v1 PreferredSchedulingTerm core_v1 PriorityClass scheduling_v1 , scheduling_v1beta1 , scheduling_v1alpha1 PriorityClassList scheduling_v1 , scheduling_v1beta1 , scheduling_v1alpha1 PriorityLevelConfiguration flowcontrol_v1alpha1 PriorityLevelConfigurationCondition flowcontrol_v1alpha1 PriorityLevelConfigurationList flowcontrol_v1alpha1 PriorityLevelConfigurationReference flowcontrol_v1alpha1 PriorityLevelConfigurationSpec flowcontrol_v1alpha1 PriorityLevelConfigurationStatus flowcontrol_v1alpha1 Probe core_v1 ProjectedVolumeSource core_v1 Quantity resource QueuingConfiguration flowcontrol_v1alpha1 QuobyteVolumeSource core_v1 RBDPersistentVolumeSource core_v1 RBDVolumeSource core_v1 RawExtension runtime ReplicaSet apps_v1 ReplicaSetCondition apps_v1 ReplicaSetList apps_v1 ReplicaSetSpec apps_v1 ReplicaSetStatus apps_v1 ReplicationController core_v1 ReplicationControllerCondition core_v1 ReplicationControllerList core_v1 ReplicationControllerSpec core_v1 ReplicationControllerStatus core_v1 ResourceAttributes authorization_v1 , authorization_v1beta1 ResourceFieldSelector core_v1 ResourceMetricSource autoscaling_v2beta2 , autoscaling_v2beta1 ResourceMetricStatus autoscaling_v2beta2 , autoscaling_v2beta1 ResourcePolicyRule flowcontrol_v1alpha1 ResourceQuota core_v1 ResourceQuotaList core_v1 ResourceQuotaSpec core_v1 ResourceQuotaStatus core_v1 ResourceRequirements core_v1 ResourceRule authorization_v1 , authorization_v1beta1 Role rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 RoleBinding rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 RoleBindingList rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 RoleList rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 RoleRef rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 RollingUpdateDaemonSet apps_v1 RollingUpdateDeployment apps_v1 RollingUpdateStatefulSetStrategy apps_v1 RuleWithOperations admissionregistration_v1 , admissionregistration_v1beta1 RunAsGroupStrategyOptions policy_v1beta1 RunAsUserStrategyOptions policy_v1beta1 RuntimeClass node_v1beta1 , node_v1alpha1 RuntimeClassList node_v1beta1 , node_v1alpha1 RuntimeClassSpec node_v1alpha1 RuntimeClassStrategyOptions policy_v1beta1 SELinuxOptions core_v1 SELinuxStrategyOptions policy_v1beta1 Scale autoscaling_v1 ScaleIOPersistentVolumeSource core_v1 ScaleIOVolumeSource core_v1 ScaleSpec autoscaling_v1 ScaleStatus autoscaling_v1 Scheduling node_v1beta1 , node_v1alpha1 ScopeSelector core_v1 ScopedResourceSelectorRequirement core_v1 Secret core_v1 SecretEnvSource core_v1 SecretKeySelector core_v1 SecretList core_v1 SecretProjection core_v1 SecretReference core_v1 SecretVolumeSource core_v1 SecurityContext core_v1 SelfSubjectAccessReview authorization_v1 , authorization_v1beta1 SelfSubjectAccessReviewSpec authorization_v1 , authorization_v1beta1 SelfSubjectRulesReview authorization_v1 , authorization_v1beta1 SelfSubjectRulesReviewSpec authorization_v1 , authorization_v1beta1 ServerAddressByClientCIDR meta_v1 Service core_v1 ServiceAccount core_v1 ServiceAccountList core_v1 ServiceAccountSubject flowcontrol_v1alpha1 ServiceAccountTokenProjection core_v1 ServiceList core_v1 ServicePort core_v1 ServiceReference admissionregistration_v1 , apiextensions_v1 , apiregistration_v1 , admissionregistration_v1beta1 , apiextensions_v1beta1 , apiregistration_v1beta1 , auditregistration_v1alpha1 ServiceSpec core_v1 ServiceStatus core_v1 SessionAffinityConfig core_v1 StatefulSet apps_v1 StatefulSetCondition apps_v1 StatefulSetList apps_v1 StatefulSetSpec apps_v1 StatefulSetStatus apps_v1 StatefulSetUpdateStrategy apps_v1 Status meta_v1 StatusCause meta_v1 StatusDetails meta_v1 StorageClass storage_v1 , storage_v1beta1 StorageClassList storage_v1 , storage_v1beta1 StorageOSPersistentVolumeSource core_v1 StorageOSVolumeSource core_v1 Subject rbac_v1 , rbac_v1beta1 , flowcontrol_v1alpha1 , rbac_v1alpha1 SubjectAccessReview authorization_v1 , authorization_v1beta1 SubjectAccessReviewSpec authorization_v1 , authorization_v1beta1 SubjectAccessReviewStatus authorization_v1 , authorization_v1beta1 SubjectRulesReviewStatus authorization_v1 , authorization_v1beta1 SupplementalGroupsStrategyOptions policy_v1beta1 Sysctl core_v1 TCPSocketAction core_v1 Taint core_v1 Time meta_v1 TokenRequest authentication_v1 TokenRequestSpec authentication_v1 TokenRequestStatus authentication_v1 TokenReview authentication_v1 , authentication_v1beta1 TokenReviewSpec authentication_v1 , authentication_v1beta1 TokenReviewStatus authentication_v1 , authentication_v1beta1 Toleration core_v1 TopologySelectorLabelRequirement core_v1 TopologySelectorTerm core_v1 TopologySpreadConstraint core_v1 TypedLocalObjectReference core_v1 UserInfo authentication_v1 , authentication_v1beta1 UserSubject flowcontrol_v1alpha1 ValidatingWebhook admissionregistration_v1 , admissionregistration_v1beta1 ValidatingWebhookConfiguration admissionregistration_v1 , admissionregistration_v1beta1 ValidatingWebhookConfigurationList admissionregistration_v1 , admissionregistration_v1beta1 Volume core_v1 VolumeAttachment storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeAttachmentList storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeAttachmentSource storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeAttachmentSpec storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeAttachmentStatus storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeDevice core_v1 VolumeError storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeMount core_v1 VolumeNodeAffinity core_v1 VolumeNodeResources storage_v1 , storage_v1beta1 VolumeProjection core_v1 VsphereVirtualDiskVolumeSource core_v1 WatchEvent meta_v1 Webhook auditregistration_v1alpha1 WebhookClientConfig admissionregistration_v1 , apiextensions_v1 , admissionregistration_v1beta1 , apiextensions_v1beta1 , auditregistration_v1alpha1 WebhookConversion apiextensions_v1 WebhookThrottleConfig auditregistration_v1alpha1 WeightedPodAffinityTerm core_v1 WindowsSecurityContextOptions core_v1","title":"All models"},{"location":"models/#all-models","text":"Model name Available versions APIGroup meta_v1 APIGroupList meta_v1 APIResource meta_v1 APIResourceList meta_v1 APIService apiregistration_v1 , apiregistration_v1beta1 APIServiceCondition apiregistration_v1 , apiregistration_v1beta1 APIServiceList apiregistration_v1 , apiregistration_v1beta1 APIServiceSpec apiregistration_v1 , apiregistration_v1beta1 APIServiceStatus apiregistration_v1 , apiregistration_v1beta1 APIVersions meta_v1 AWSElasticBlockStoreVolumeSource core_v1 Affinity core_v1 AggregationRule rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 AllowedCSIDriver policy_v1beta1 AllowedFlexVolume policy_v1beta1 AllowedHostPath policy_v1beta1 AttachedVolume core_v1 AuditSink auditregistration_v1alpha1 AuditSinkList auditregistration_v1alpha1 AuditSinkSpec auditregistration_v1alpha1 AzureDiskVolumeSource core_v1 AzureFilePersistentVolumeSource core_v1 AzureFileVolumeSource core_v1 Binding core_v1 BoundObjectReference authentication_v1 CSIDriver storage_v1 , storage_v1beta1 CSIDriverList storage_v1 , storage_v1beta1 CSIDriverSpec storage_v1 , storage_v1beta1 CSINode storage_v1 , storage_v1beta1 CSINodeDriver storage_v1 , storage_v1beta1 CSINodeList storage_v1 , storage_v1beta1 CSINodeSpec storage_v1 , storage_v1beta1 CSIPersistentVolumeSource core_v1 CSIVolumeSource core_v1 Capabilities core_v1 CephFSPersistentVolumeSource core_v1 CephFSVolumeSource core_v1 CertificateSigningRequest certificates_v1beta1 CertificateSigningRequestCondition certificates_v1beta1 CertificateSigningRequestList certificates_v1beta1 CertificateSigningRequestSpec certificates_v1beta1 CertificateSigningRequestStatus certificates_v1beta1 CinderPersistentVolumeSource core_v1 CinderVolumeSource core_v1 ClientIPConfig core_v1 ClusterRole rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 ClusterRoleBinding rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 ClusterRoleBindingList rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 ClusterRoleList rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 ComponentCondition core_v1 ComponentStatus core_v1 ComponentStatusList core_v1 ConfigMap core_v1 ConfigMapEnvSource core_v1 ConfigMapKeySelector core_v1 ConfigMapList core_v1 ConfigMapNodeConfigSource core_v1 ConfigMapProjection core_v1 ConfigMapVolumeSource core_v1 Container core_v1 ContainerImage core_v1 ContainerPort core_v1 ContainerState core_v1 ContainerStateRunning core_v1 ContainerStateTerminated core_v1 ContainerStateWaiting core_v1 ContainerStatus core_v1 ControllerRevision apps_v1 ControllerRevisionList apps_v1 CronJob batch_v2alpha1 , batch_v1beta1 CronJobList batch_v2alpha1 , batch_v1beta1 CronJobSpec batch_v2alpha1 , batch_v1beta1 CronJobStatus batch_v2alpha1 , batch_v1beta1 CrossVersionObjectReference autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 CustomResourceColumnDefinition apiextensions_v1 , apiextensions_v1beta1 CustomResourceConversion apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinition apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionCondition apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionList apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionNames apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionSpec apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionStatus apiextensions_v1 , apiextensions_v1beta1 CustomResourceDefinitionVersion apiextensions_v1 , apiextensions_v1beta1 CustomResourceSubresourceScale apiextensions_v1 , apiextensions_v1beta1 CustomResourceSubresourceStatus apiextensions_v1 , apiextensions_v1beta1 CustomResourceSubresources apiextensions_v1 , apiextensions_v1beta1 CustomResourceValidation apiextensions_v1 , apiextensions_v1beta1 DaemonEndpoint core_v1 DaemonSet apps_v1 DaemonSetCondition apps_v1 DaemonSetList apps_v1 DaemonSetSpec apps_v1 DaemonSetStatus apps_v1 DaemonSetUpdateStrategy apps_v1 DeleteOptions meta_v1 Deployment apps_v1 DeploymentCondition apps_v1 DeploymentList apps_v1 DeploymentSpec apps_v1 DeploymentStatus apps_v1 DeploymentStrategy apps_v1 DownwardAPIProjection core_v1 DownwardAPIVolumeFile core_v1 DownwardAPIVolumeSource core_v1 EmptyDirVolumeSource core_v1 Endpoint discovery_v1beta1 EndpointAddress core_v1 EndpointConditions discovery_v1beta1 EndpointPort core_v1 , discovery_v1beta1 EndpointSlice discovery_v1beta1 EndpointSliceList discovery_v1beta1 EndpointSubset core_v1 Endpoints core_v1 EndpointsList core_v1 EnvFromSource core_v1 EnvVar core_v1 EnvVarSource core_v1 EphemeralContainer core_v1 Event core_v1 , events_v1beta1 EventList core_v1 , events_v1beta1 EventSeries core_v1 , events_v1beta1 EventSource core_v1 Eviction policy_v1beta1 ExecAction core_v1 ExternalDocumentation apiextensions_v1 , apiextensions_v1beta1 ExternalMetricSource autoscaling_v2beta2 , autoscaling_v2beta1 ExternalMetricStatus autoscaling_v2beta2 , autoscaling_v2beta1 FCVolumeSource core_v1 FSGroupStrategyOptions policy_v1beta1 FieldsV1 meta_v1 FlexPersistentVolumeSource core_v1 FlexVolumeSource core_v1 FlockerVolumeSource core_v1 FlowDistinguisherMethod flowcontrol_v1alpha1 FlowSchema flowcontrol_v1alpha1 FlowSchemaCondition flowcontrol_v1alpha1 FlowSchemaList flowcontrol_v1alpha1 FlowSchemaSpec flowcontrol_v1alpha1 FlowSchemaStatus flowcontrol_v1alpha1 GCEPersistentDiskVolumeSource core_v1 GitRepoVolumeSource core_v1 GlusterfsPersistentVolumeSource core_v1 GlusterfsVolumeSource core_v1 GroupSubject flowcontrol_v1alpha1 GroupVersionForDiscovery meta_v1 HPAScalingPolicy autoscaling_v2beta2 HPAScalingRules autoscaling_v2beta2 HTTPGetAction core_v1 HTTPHeader core_v1 HTTPIngressPath extensions_v1beta1 , networking_v1beta1 HTTPIngressRuleValue extensions_v1beta1 , networking_v1beta1 Handler core_v1 HorizontalPodAutoscaler autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 HorizontalPodAutoscalerBehavior autoscaling_v2beta2 HorizontalPodAutoscalerCondition autoscaling_v2beta2 , autoscaling_v2beta1 HorizontalPodAutoscalerList autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 HorizontalPodAutoscalerSpec autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 HorizontalPodAutoscalerStatus autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 HostAlias core_v1 HostPathVolumeSource core_v1 HostPortRange policy_v1beta1 IDRange policy_v1beta1 IPBlock networking_v1 ISCSIPersistentVolumeSource core_v1 ISCSIVolumeSource core_v1 Info version Ingress extensions_v1beta1 , networking_v1beta1 IngressBackend extensions_v1beta1 , networking_v1beta1 IngressClass networking_v1beta1 IngressClassList networking_v1beta1 IngressClassSpec networking_v1beta1 IngressList extensions_v1beta1 , networking_v1beta1 IngressRule extensions_v1beta1 , networking_v1beta1 IngressSpec extensions_v1beta1 , networking_v1beta1 IngressStatus extensions_v1beta1 , networking_v1beta1 IngressTLS extensions_v1beta1 , networking_v1beta1 IntOrString util_intstr JSON apiextensions_v1 , apiextensions_v1beta1 JSONSchemaProps apiextensions_v1 , apiextensions_v1beta1 JSONSchemaPropsOrArray apiextensions_v1 , apiextensions_v1beta1 JSONSchemaPropsOrBool apiextensions_v1 , apiextensions_v1beta1 JSONSchemaPropsOrStringArray apiextensions_v1 , apiextensions_v1beta1 Job batch_v1 JobCondition batch_v1 JobList batch_v1 JobSpec batch_v1 JobStatus batch_v1 JobTemplateSpec batch_v2alpha1 , batch_v1beta1 KeyToPath core_v1 LabelSelector meta_v1 LabelSelectorRequirement meta_v1 Lease coordination_v1 , coordination_v1beta1 LeaseList coordination_v1 , coordination_v1beta1 LeaseSpec coordination_v1 , coordination_v1beta1 Lifecycle core_v1 LimitRange core_v1 LimitRangeItem core_v1 LimitRangeList core_v1 LimitRangeSpec core_v1 LimitResponse flowcontrol_v1alpha1 LimitedPriorityLevelConfiguration flowcontrol_v1alpha1 ListMeta meta_v1 LoadBalancerIngress core_v1 LoadBalancerStatus core_v1 LocalObjectReference core_v1 LocalSubjectAccessReview authorization_v1 , authorization_v1beta1 LocalVolumeSource core_v1 ManagedFieldsEntry meta_v1 MetricIdentifier autoscaling_v2beta2 MetricSpec autoscaling_v2beta2 , autoscaling_v2beta1 MetricStatus autoscaling_v2beta2 , autoscaling_v2beta1 MetricTarget autoscaling_v2beta2 MetricValueStatus autoscaling_v2beta2 MicroTime meta_v1 MutatingWebhook admissionregistration_v1 , admissionregistration_v1beta1 MutatingWebhookConfiguration admissionregistration_v1 , admissionregistration_v1beta1 MutatingWebhookConfigurationList admissionregistration_v1 , admissionregistration_v1beta1 NFSVolumeSource core_v1 Namespace core_v1 NamespaceCondition core_v1 NamespaceList core_v1 NamespaceSpec core_v1 NamespaceStatus core_v1 NetworkPolicy networking_v1 NetworkPolicyEgressRule networking_v1 NetworkPolicyIngressRule networking_v1 NetworkPolicyList networking_v1 NetworkPolicyPeer networking_v1 NetworkPolicyPort networking_v1 NetworkPolicySpec networking_v1 Node core_v1 NodeAddress core_v1 NodeAffinity core_v1 NodeCondition core_v1 NodeConfigSource core_v1 NodeConfigStatus core_v1 NodeDaemonEndpoints core_v1 NodeList core_v1 NodeSelector core_v1 NodeSelectorRequirement core_v1 NodeSelectorTerm core_v1 NodeSpec core_v1 NodeStatus core_v1 NodeSystemInfo core_v1 NonResourceAttributes authorization_v1 , authorization_v1beta1 NonResourcePolicyRule flowcontrol_v1alpha1 NonResourceRule authorization_v1 , authorization_v1beta1 ObjectFieldSelector core_v1 ObjectMeta meta_v1 ObjectMetricSource autoscaling_v2beta2 , autoscaling_v2beta1 ObjectMetricStatus autoscaling_v2beta2 , autoscaling_v2beta1 ObjectReference core_v1 Overhead node_v1beta1 , node_v1alpha1 OwnerReference meta_v1 Patch meta_v1 PersistentVolume core_v1 PersistentVolumeClaim core_v1 PersistentVolumeClaimCondition core_v1 PersistentVolumeClaimList core_v1 PersistentVolumeClaimSpec core_v1 PersistentVolumeClaimStatus core_v1 PersistentVolumeClaimVolumeSource core_v1 PersistentVolumeList core_v1 PersistentVolumeSpec core_v1 PersistentVolumeStatus core_v1 PhotonPersistentDiskVolumeSource core_v1 Pod core_v1 PodAffinity core_v1 PodAffinityTerm core_v1 PodAntiAffinity core_v1 PodCondition core_v1 PodDNSConfig core_v1 PodDNSConfigOption core_v1 PodDisruptionBudget policy_v1beta1 PodDisruptionBudgetList policy_v1beta1 PodDisruptionBudgetSpec policy_v1beta1 PodDisruptionBudgetStatus policy_v1beta1 PodIP core_v1 PodList core_v1 PodPreset settings_v1alpha1 PodPresetList settings_v1alpha1 PodPresetSpec settings_v1alpha1 PodReadinessGate core_v1 PodSecurityContext core_v1 PodSecurityPolicy policy_v1beta1 PodSecurityPolicyList policy_v1beta1 PodSecurityPolicySpec policy_v1beta1 PodSpec core_v1 PodStatus core_v1 PodTemplate core_v1 PodTemplateList core_v1 PodTemplateSpec core_v1 PodsMetricSource autoscaling_v2beta2 , autoscaling_v2beta1 PodsMetricStatus autoscaling_v2beta2 , autoscaling_v2beta1 Policy auditregistration_v1alpha1 PolicyRule rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 PolicyRulesWithSubjects flowcontrol_v1alpha1 PortworxVolumeSource core_v1 Preconditions meta_v1 PreferredSchedulingTerm core_v1 PriorityClass scheduling_v1 , scheduling_v1beta1 , scheduling_v1alpha1 PriorityClassList scheduling_v1 , scheduling_v1beta1 , scheduling_v1alpha1 PriorityLevelConfiguration flowcontrol_v1alpha1 PriorityLevelConfigurationCondition flowcontrol_v1alpha1 PriorityLevelConfigurationList flowcontrol_v1alpha1 PriorityLevelConfigurationReference flowcontrol_v1alpha1 PriorityLevelConfigurationSpec flowcontrol_v1alpha1 PriorityLevelConfigurationStatus flowcontrol_v1alpha1 Probe core_v1 ProjectedVolumeSource core_v1 Quantity resource QueuingConfiguration flowcontrol_v1alpha1 QuobyteVolumeSource core_v1 RBDPersistentVolumeSource core_v1 RBDVolumeSource core_v1 RawExtension runtime ReplicaSet apps_v1 ReplicaSetCondition apps_v1 ReplicaSetList apps_v1 ReplicaSetSpec apps_v1 ReplicaSetStatus apps_v1 ReplicationController core_v1 ReplicationControllerCondition core_v1 ReplicationControllerList core_v1 ReplicationControllerSpec core_v1 ReplicationControllerStatus core_v1 ResourceAttributes authorization_v1 , authorization_v1beta1 ResourceFieldSelector core_v1 ResourceMetricSource autoscaling_v2beta2 , autoscaling_v2beta1 ResourceMetricStatus autoscaling_v2beta2 , autoscaling_v2beta1 ResourcePolicyRule flowcontrol_v1alpha1 ResourceQuota core_v1 ResourceQuotaList core_v1 ResourceQuotaSpec core_v1 ResourceQuotaStatus core_v1 ResourceRequirements core_v1 ResourceRule authorization_v1 , authorization_v1beta1 Role rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 RoleBinding rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 RoleBindingList rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 RoleList rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 RoleRef rbac_v1 , rbac_v1beta1 , rbac_v1alpha1 RollingUpdateDaemonSet apps_v1 RollingUpdateDeployment apps_v1 RollingUpdateStatefulSetStrategy apps_v1 RuleWithOperations admissionregistration_v1 , admissionregistration_v1beta1 RunAsGroupStrategyOptions policy_v1beta1 RunAsUserStrategyOptions policy_v1beta1 RuntimeClass node_v1beta1 , node_v1alpha1 RuntimeClassList node_v1beta1 , node_v1alpha1 RuntimeClassSpec node_v1alpha1 RuntimeClassStrategyOptions policy_v1beta1 SELinuxOptions core_v1 SELinuxStrategyOptions policy_v1beta1 Scale autoscaling_v1 ScaleIOPersistentVolumeSource core_v1 ScaleIOVolumeSource core_v1 ScaleSpec autoscaling_v1 ScaleStatus autoscaling_v1 Scheduling node_v1beta1 , node_v1alpha1 ScopeSelector core_v1 ScopedResourceSelectorRequirement core_v1 Secret core_v1 SecretEnvSource core_v1 SecretKeySelector core_v1 SecretList core_v1 SecretProjection core_v1 SecretReference core_v1 SecretVolumeSource core_v1 SecurityContext core_v1 SelfSubjectAccessReview authorization_v1 , authorization_v1beta1 SelfSubjectAccessReviewSpec authorization_v1 , authorization_v1beta1 SelfSubjectRulesReview authorization_v1 , authorization_v1beta1 SelfSubjectRulesReviewSpec authorization_v1 , authorization_v1beta1 ServerAddressByClientCIDR meta_v1 Service core_v1 ServiceAccount core_v1 ServiceAccountList core_v1 ServiceAccountSubject flowcontrol_v1alpha1 ServiceAccountTokenProjection core_v1 ServiceList core_v1 ServicePort core_v1 ServiceReference admissionregistration_v1 , apiextensions_v1 , apiregistration_v1 , admissionregistration_v1beta1 , apiextensions_v1beta1 , apiregistration_v1beta1 , auditregistration_v1alpha1 ServiceSpec core_v1 ServiceStatus core_v1 SessionAffinityConfig core_v1 StatefulSet apps_v1 StatefulSetCondition apps_v1 StatefulSetList apps_v1 StatefulSetSpec apps_v1 StatefulSetStatus apps_v1 StatefulSetUpdateStrategy apps_v1 Status meta_v1 StatusCause meta_v1 StatusDetails meta_v1 StorageClass storage_v1 , storage_v1beta1 StorageClassList storage_v1 , storage_v1beta1 StorageOSPersistentVolumeSource core_v1 StorageOSVolumeSource core_v1 Subject rbac_v1 , rbac_v1beta1 , flowcontrol_v1alpha1 , rbac_v1alpha1 SubjectAccessReview authorization_v1 , authorization_v1beta1 SubjectAccessReviewSpec authorization_v1 , authorization_v1beta1 SubjectAccessReviewStatus authorization_v1 , authorization_v1beta1 SubjectRulesReviewStatus authorization_v1 , authorization_v1beta1 SupplementalGroupsStrategyOptions policy_v1beta1 Sysctl core_v1 TCPSocketAction core_v1 Taint core_v1 Time meta_v1 TokenRequest authentication_v1 TokenRequestSpec authentication_v1 TokenRequestStatus authentication_v1 TokenReview authentication_v1 , authentication_v1beta1 TokenReviewSpec authentication_v1 , authentication_v1beta1 TokenReviewStatus authentication_v1 , authentication_v1beta1 Toleration core_v1 TopologySelectorLabelRequirement core_v1 TopologySelectorTerm core_v1 TopologySpreadConstraint core_v1 TypedLocalObjectReference core_v1 UserInfo authentication_v1 , authentication_v1beta1 UserSubject flowcontrol_v1alpha1 ValidatingWebhook admissionregistration_v1 , admissionregistration_v1beta1 ValidatingWebhookConfiguration admissionregistration_v1 , admissionregistration_v1beta1 ValidatingWebhookConfigurationList admissionregistration_v1 , admissionregistration_v1beta1 Volume core_v1 VolumeAttachment storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeAttachmentList storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeAttachmentSource storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeAttachmentSpec storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeAttachmentStatus storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeDevice core_v1 VolumeError storage_v1 , storage_v1beta1 , storage_v1alpha1 VolumeMount core_v1 VolumeNodeAffinity core_v1 VolumeNodeResources storage_v1 , storage_v1beta1 VolumeProjection core_v1 VsphereVirtualDiskVolumeSource core_v1 WatchEvent meta_v1 Webhook auditregistration_v1alpha1 WebhookClientConfig admissionregistration_v1 , apiextensions_v1 , admissionregistration_v1beta1 , apiextensions_v1beta1 , auditregistration_v1alpha1 WebhookConversion apiextensions_v1 WebhookThrottleConfig auditregistration_v1alpha1 WeightedPodAffinityTerm core_v1 WindowsSecurityContextOptions core_v1","title":"All models"},{"location":"models/admissionregistration_v1/","text":"admissionregistration_v1 MutatingWebhook class lightkube.models.admissionregistration_v1. MutatingWebhook ( admissionReviewVersions , clientConfig , name , sideEffects , failurePolicy=None , matchPolicy=None , namespaceSelector=None , objectSelector=None , reinvocationPolicy=None , rules=None , timeoutSeconds=None ) MutatingWebhook describes an admission webhook and the resources and operations it applies to. parameters admissionReviewVersions List[str] - AdmissionReviewVersions is an ordered list of preferred AdmissionReview versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. clientConfig WebhookClientConfig - ClientConfig defines how to communicate with the hook. Required name str - The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required. sideEffects str - SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. failurePolicy str - (optional) FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail. matchPolicy str - (optional) matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\". Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook. Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook. Defaults to \"Equivalent\" namespaceSelector meta_v1.LabelSelector - (optional) NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [ \"0\", \"1\" ] } ] } If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"environment\", \"operator\": \"In\", \"values\": [ \"prod\", \"staging\" ] } ] } See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors. Default to the empty LabelSelector, which matches everything. objectSelector meta_v1.LabelSelector - (optional) ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything. reinvocationPolicy str - (optional) reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\". Never: the webhook will not be called more than once in a single admission evaluation. IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option must be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead. Defaults to \"Never\". rules RuleWithOperations - (optional) Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches any Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects. timeoutSeconds int - (optional) TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds. MutatingWebhookConfiguration class lightkube.models.admissionregistration_v1. MutatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata; More info webhooks MutatingWebhook - (optional) Webhooks is a list of webhooks and the affected resources and operations. MutatingWebhookConfigurationList class lightkube.models.admissionregistration_v1. MutatingWebhookConfigurationList ( items , apiVersion=None , kind=None , metadata=None ) MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration. parameters items MutatingWebhookConfiguration - List of MutatingWebhookConfiguration. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info RuleWithOperations class lightkube.models.admissionregistration_v1. RuleWithOperations ( apiGroups=None , apiVersions=None , operations=None , resources=None , scope=None ) RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid. parameters apiGroups List[str] - (optional) APIGroups is the API groups the resources belong to. ' ' is all groups. If ' ' is present, the length of the slice must be one. Required. apiVersions List[str] - (optional) APIVersions is the API versions the resources belong to. ' ' is all versions. If ' ' is present, the length of the slice must be one. Required. operations List[str] - (optional) Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all operations. If ' ' is present, the length of the slice must be one. Required. resources List[str] - (optional) Resources is a list of resources this rule applies to. For example: 'pods' means pods. 'pods/log' means the log subresource of pods. ' ' means all resources, but not subresources. 'pods/ ' means all subresources of pods. ' /scale' means all scale subresources. ' / ' means all resources and their subresources. If wildcard is present, the validation rule will ensure resources do not overlap with each other. Depending on the enclosing object, subresources might not be allowed. Required. scope str - (optional) scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \" \" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \" \" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\". ServiceReference class lightkube.models.admissionregistration_v1. ServiceReference ( name , namespace , path=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - name is the name of the service. Required namespace str - namespace is the namespace of the service. Required path str - (optional) path is an optional URL path which will be sent in any request to this service. port int - (optional) If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. port should be a valid port number (1-65535, inclusive). ValidatingWebhook class lightkube.models.admissionregistration_v1. ValidatingWebhook ( admissionReviewVersions , clientConfig , name , sideEffects , failurePolicy=None , matchPolicy=None , namespaceSelector=None , objectSelector=None , rules=None , timeoutSeconds=None ) ValidatingWebhook describes an admission webhook and the resources and operations it applies to. parameters admissionReviewVersions List[str] - AdmissionReviewVersions is an ordered list of preferred AdmissionReview versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. clientConfig WebhookClientConfig - ClientConfig defines how to communicate with the hook. Required name str - The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required. sideEffects str - SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. failurePolicy str - (optional) FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail. matchPolicy str - (optional) matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\". Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook. Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook. Defaults to \"Equivalent\" namespaceSelector meta_v1.LabelSelector - (optional) NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [ \"0\", \"1\" ] } ] } If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"environment\", \"operator\": \"In\", \"values\": [ \"prod\", \"staging\" ] } ] } See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors. Default to the empty LabelSelector, which matches everything. objectSelector meta_v1.LabelSelector - (optional) ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything. rules RuleWithOperations - (optional) Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches any Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects. timeoutSeconds int - (optional) TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds. ValidatingWebhookConfiguration class lightkube.models.admissionregistration_v1. ValidatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata; More info webhooks ValidatingWebhook - (optional) Webhooks is a list of webhooks and the affected resources and operations. ValidatingWebhookConfigurationList class lightkube.models.admissionregistration_v1. ValidatingWebhookConfigurationList ( items , apiVersion=None , kind=None , metadata=None ) ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration. parameters items ValidatingWebhookConfiguration - List of ValidatingWebhookConfiguration. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info WebhookClientConfig class lightkube.models.admissionregistration_v1. WebhookClientConfig ( caBundle=None , service=None , url=None ) WebhookClientConfig contains the information to make a TLS connection with the webhook parameters caBundle str - (optional) caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used. service ServiceReference - (optional) service is a reference to the service for this webhook. Either service or url must be specified. If the webhook is running within the cluster, then you should use service . url str - (optional) url gives the location of the webhook, in standard URL form ( scheme://host:port/path ). Exactly one of url or service must be specified. The host should not refer to a service running in the cluster; use the service field instead. The host might be resolved via external DNS in some apiservers (e.g., kube-apiserver cannot resolve in-cluster DNS as that would be a layering violation). host may also be an IP address. Please note that using localhost or 127.0.0.1 as a host is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be \"https\"; the URL must begin with \"https://\". A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.","title":"admissionregistration_v1"},{"location":"models/admissionregistration_v1/#admissionregistration_v1","text":"","title":"admissionregistration_v1"},{"location":"models/admissionregistration_v1/#mutatingwebhook","text":"class lightkube.models.admissionregistration_v1. MutatingWebhook ( admissionReviewVersions , clientConfig , name , sideEffects , failurePolicy=None , matchPolicy=None , namespaceSelector=None , objectSelector=None , reinvocationPolicy=None , rules=None , timeoutSeconds=None ) MutatingWebhook describes an admission webhook and the resources and operations it applies to. parameters admissionReviewVersions List[str] - AdmissionReviewVersions is an ordered list of preferred AdmissionReview versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. clientConfig WebhookClientConfig - ClientConfig defines how to communicate with the hook. Required name str - The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required. sideEffects str - SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. failurePolicy str - (optional) FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail. matchPolicy str - (optional) matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\". Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook. Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook. Defaults to \"Equivalent\" namespaceSelector meta_v1.LabelSelector - (optional) NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [ \"0\", \"1\" ] } ] } If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"environment\", \"operator\": \"In\", \"values\": [ \"prod\", \"staging\" ] } ] } See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors. Default to the empty LabelSelector, which matches everything. objectSelector meta_v1.LabelSelector - (optional) ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything. reinvocationPolicy str - (optional) reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\". Never: the webhook will not be called more than once in a single admission evaluation. IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option must be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead. Defaults to \"Never\". rules RuleWithOperations - (optional) Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches any Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects. timeoutSeconds int - (optional) TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.","title":"MutatingWebhook"},{"location":"models/admissionregistration_v1/#mutatingwebhookconfiguration","text":"class lightkube.models.admissionregistration_v1. MutatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata; More info webhooks MutatingWebhook - (optional) Webhooks is a list of webhooks and the affected resources and operations.","title":"MutatingWebhookConfiguration"},{"location":"models/admissionregistration_v1/#mutatingwebhookconfigurationlist","text":"class lightkube.models.admissionregistration_v1. MutatingWebhookConfigurationList ( items , apiVersion=None , kind=None , metadata=None ) MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration. parameters items MutatingWebhookConfiguration - List of MutatingWebhookConfiguration. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"MutatingWebhookConfigurationList"},{"location":"models/admissionregistration_v1/#rulewithoperations","text":"class lightkube.models.admissionregistration_v1. RuleWithOperations ( apiGroups=None , apiVersions=None , operations=None , resources=None , scope=None ) RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid. parameters apiGroups List[str] - (optional) APIGroups is the API groups the resources belong to. ' ' is all groups. If ' ' is present, the length of the slice must be one. Required. apiVersions List[str] - (optional) APIVersions is the API versions the resources belong to. ' ' is all versions. If ' ' is present, the length of the slice must be one. Required. operations List[str] - (optional) Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all operations. If ' ' is present, the length of the slice must be one. Required. resources List[str] - (optional) Resources is a list of resources this rule applies to. For example: 'pods' means pods. 'pods/log' means the log subresource of pods. ' ' means all resources, but not subresources. 'pods/ ' means all subresources of pods. ' /scale' means all scale subresources. ' / ' means all resources and their subresources. If wildcard is present, the validation rule will ensure resources do not overlap with each other. Depending on the enclosing object, subresources might not be allowed. Required. scope str - (optional) scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \" \" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \" \" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".","title":"RuleWithOperations"},{"location":"models/admissionregistration_v1/#servicereference","text":"class lightkube.models.admissionregistration_v1. ServiceReference ( name , namespace , path=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - name is the name of the service. Required namespace str - namespace is the namespace of the service. Required path str - (optional) path is an optional URL path which will be sent in any request to this service. port int - (optional) If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. port should be a valid port number (1-65535, inclusive).","title":"ServiceReference"},{"location":"models/admissionregistration_v1/#validatingwebhook","text":"class lightkube.models.admissionregistration_v1. ValidatingWebhook ( admissionReviewVersions , clientConfig , name , sideEffects , failurePolicy=None , matchPolicy=None , namespaceSelector=None , objectSelector=None , rules=None , timeoutSeconds=None ) ValidatingWebhook describes an admission webhook and the resources and operations it applies to. parameters admissionReviewVersions List[str] - AdmissionReviewVersions is an ordered list of preferred AdmissionReview versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. clientConfig WebhookClientConfig - ClientConfig defines how to communicate with the hook. Required name str - The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required. sideEffects str - SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. failurePolicy str - (optional) FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail. matchPolicy str - (optional) matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\". Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook. Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook. Defaults to \"Equivalent\" namespaceSelector meta_v1.LabelSelector - (optional) NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [ \"0\", \"1\" ] } ] } If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"environment\", \"operator\": \"In\", \"values\": [ \"prod\", \"staging\" ] } ] } See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors. Default to the empty LabelSelector, which matches everything. objectSelector meta_v1.LabelSelector - (optional) ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything. rules RuleWithOperations - (optional) Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches any Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects. timeoutSeconds int - (optional) TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.","title":"ValidatingWebhook"},{"location":"models/admissionregistration_v1/#validatingwebhookconfiguration","text":"class lightkube.models.admissionregistration_v1. ValidatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata; More info webhooks ValidatingWebhook - (optional) Webhooks is a list of webhooks and the affected resources and operations.","title":"ValidatingWebhookConfiguration"},{"location":"models/admissionregistration_v1/#validatingwebhookconfigurationlist","text":"class lightkube.models.admissionregistration_v1. ValidatingWebhookConfigurationList ( items , apiVersion=None , kind=None , metadata=None ) ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration. parameters items ValidatingWebhookConfiguration - List of ValidatingWebhookConfiguration. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"ValidatingWebhookConfigurationList"},{"location":"models/admissionregistration_v1/#webhookclientconfig","text":"class lightkube.models.admissionregistration_v1. WebhookClientConfig ( caBundle=None , service=None , url=None ) WebhookClientConfig contains the information to make a TLS connection with the webhook parameters caBundle str - (optional) caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used. service ServiceReference - (optional) service is a reference to the service for this webhook. Either service or url must be specified. If the webhook is running within the cluster, then you should use service . url str - (optional) url gives the location of the webhook, in standard URL form ( scheme://host:port/path ). Exactly one of url or service must be specified. The host should not refer to a service running in the cluster; use the service field instead. The host might be resolved via external DNS in some apiservers (e.g., kube-apiserver cannot resolve in-cluster DNS as that would be a layering violation). host may also be an IP address. Please note that using localhost or 127.0.0.1 as a host is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be \"https\"; the URL must begin with \"https://\". A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.","title":"WebhookClientConfig"},{"location":"models/admissionregistration_v1beta1/","text":"admissionregistration_v1beta1 MutatingWebhook class lightkube.models.admissionregistration_v1beta1. MutatingWebhook ( clientConfig , name , admissionReviewVersions=None , failurePolicy=None , matchPolicy=None , namespaceSelector=None , objectSelector=None , reinvocationPolicy=None , rules=None , sideEffects=None , timeoutSeconds=None ) MutatingWebhook describes an admission webhook and the resources and operations it applies to. parameters clientConfig WebhookClientConfig - ClientConfig defines how to communicate with the hook. Required name str - The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required. admissionReviewVersions List[str] - (optional) AdmissionReviewVersions is an ordered list of preferred AdmissionReview versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to ['v1beta1'] . failurePolicy str - (optional) FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore. matchPolicy str - (optional) matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\". Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook. Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook. Defaults to \"Exact\" namespaceSelector meta_v1.LabelSelector - (optional) NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [ \"0\", \"1\" ] } ] } If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"environment\", \"operator\": \"In\", \"values\": [ \"prod\", \"staging\" ] } ] } See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors. Default to the empty LabelSelector, which matches everything. objectSelector meta_v1.LabelSelector - (optional) ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything. reinvocationPolicy str - (optional) reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\". Never: the webhook will not be called more than once in a single admission evaluation. IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option must be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead. Defaults to \"Never\". rules RuleWithOperations - (optional) Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches any Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects. sideEffects str - (optional) SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown. timeoutSeconds int - (optional) TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds. MutatingWebhookConfiguration class lightkube.models.admissionregistration_v1beta1. MutatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 MutatingWebhookConfiguration instead. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata; More info webhooks MutatingWebhook - (optional) Webhooks is a list of webhooks and the affected resources and operations. MutatingWebhookConfigurationList class lightkube.models.admissionregistration_v1beta1. MutatingWebhookConfigurationList ( items , apiVersion=None , kind=None , metadata=None ) MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration. parameters items MutatingWebhookConfiguration - List of MutatingWebhookConfiguration. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info RuleWithOperations class lightkube.models.admissionregistration_v1beta1. RuleWithOperations ( apiGroups=None , apiVersions=None , operations=None , resources=None , scope=None ) RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid. parameters apiGroups List[str] - (optional) APIGroups is the API groups the resources belong to. ' ' is all groups. If ' ' is present, the length of the slice must be one. Required. apiVersions List[str] - (optional) APIVersions is the API versions the resources belong to. ' ' is all versions. If ' ' is present, the length of the slice must be one. Required. operations List[str] - (optional) Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all operations. If ' ' is present, the length of the slice must be one. Required. resources List[str] - (optional) Resources is a list of resources this rule applies to. For example: 'pods' means pods. 'pods/log' means the log subresource of pods. ' ' means all resources, but not subresources. 'pods/ ' means all subresources of pods. ' /scale' means all scale subresources. ' / ' means all resources and their subresources. If wildcard is present, the validation rule will ensure resources do not overlap with each other. Depending on the enclosing object, subresources might not be allowed. Required. scope str - (optional) scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \" \" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \" \" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\". ServiceReference class lightkube.models.admissionregistration_v1beta1. ServiceReference ( name , namespace , path=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - name is the name of the service. Required namespace str - namespace is the namespace of the service. Required path str - (optional) path is an optional URL path which will be sent in any request to this service. port int - (optional) If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. port should be a valid port number (1-65535, inclusive). ValidatingWebhook class lightkube.models.admissionregistration_v1beta1. ValidatingWebhook ( clientConfig , name , admissionReviewVersions=None , failurePolicy=None , matchPolicy=None , namespaceSelector=None , objectSelector=None , rules=None , sideEffects=None , timeoutSeconds=None ) ValidatingWebhook describes an admission webhook and the resources and operations it applies to. parameters clientConfig WebhookClientConfig - ClientConfig defines how to communicate with the hook. Required name str - The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required. admissionReviewVersions List[str] - (optional) AdmissionReviewVersions is an ordered list of preferred AdmissionReview versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to ['v1beta1'] . failurePolicy str - (optional) FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore. matchPolicy str - (optional) matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\". Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook. Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook. Defaults to \"Exact\" namespaceSelector meta_v1.LabelSelector - (optional) NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [ \"0\", \"1\" ] } ] } If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"environment\", \"operator\": \"In\", \"values\": [ \"prod\", \"staging\" ] } ] } See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors. Default to the empty LabelSelector, which matches everything. objectSelector meta_v1.LabelSelector - (optional) ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything. rules RuleWithOperations - (optional) Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches any Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects. sideEffects str - (optional) SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown. timeoutSeconds int - (optional) TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds. ValidatingWebhookConfiguration class lightkube.models.admissionregistration_v1beta1. ValidatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata; More info webhooks ValidatingWebhook - (optional) Webhooks is a list of webhooks and the affected resources and operations. ValidatingWebhookConfigurationList class lightkube.models.admissionregistration_v1beta1. ValidatingWebhookConfigurationList ( items , apiVersion=None , kind=None , metadata=None ) ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration. parameters items ValidatingWebhookConfiguration - List of ValidatingWebhookConfiguration. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info WebhookClientConfig class lightkube.models.admissionregistration_v1beta1. WebhookClientConfig ( caBundle=None , service=None , url=None ) WebhookClientConfig contains the information to make a TLS connection with the webhook parameters caBundle str - (optional) caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used. service ServiceReference - (optional) service is a reference to the service for this webhook. Either service or url must be specified. If the webhook is running within the cluster, then you should use service . url str - (optional) url gives the location of the webhook, in standard URL form ( scheme://host:port/path ). Exactly one of url or service must be specified. The host should not refer to a service running in the cluster; use the service field instead. The host might be resolved via external DNS in some apiservers (e.g., kube-apiserver cannot resolve in-cluster DNS as that would be a layering violation). host may also be an IP address. Please note that using localhost or 127.0.0.1 as a host is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be \"https\"; the URL must begin with \"https://\". A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.","title":"admissionregistration_v1beta1"},{"location":"models/admissionregistration_v1beta1/#admissionregistration_v1beta1","text":"","title":"admissionregistration_v1beta1"},{"location":"models/admissionregistration_v1beta1/#mutatingwebhook","text":"class lightkube.models.admissionregistration_v1beta1. MutatingWebhook ( clientConfig , name , admissionReviewVersions=None , failurePolicy=None , matchPolicy=None , namespaceSelector=None , objectSelector=None , reinvocationPolicy=None , rules=None , sideEffects=None , timeoutSeconds=None ) MutatingWebhook describes an admission webhook and the resources and operations it applies to. parameters clientConfig WebhookClientConfig - ClientConfig defines how to communicate with the hook. Required name str - The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required. admissionReviewVersions List[str] - (optional) AdmissionReviewVersions is an ordered list of preferred AdmissionReview versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to ['v1beta1'] . failurePolicy str - (optional) FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore. matchPolicy str - (optional) matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\". Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook. Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook. Defaults to \"Exact\" namespaceSelector meta_v1.LabelSelector - (optional) NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [ \"0\", \"1\" ] } ] } If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"environment\", \"operator\": \"In\", \"values\": [ \"prod\", \"staging\" ] } ] } See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors. Default to the empty LabelSelector, which matches everything. objectSelector meta_v1.LabelSelector - (optional) ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything. reinvocationPolicy str - (optional) reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are \"Never\" and \"IfNeeded\". Never: the webhook will not be called more than once in a single admission evaluation. IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option must be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead. Defaults to \"Never\". rules RuleWithOperations - (optional) Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches any Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects. sideEffects str - (optional) SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown. timeoutSeconds int - (optional) TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds.","title":"MutatingWebhook"},{"location":"models/admissionregistration_v1beta1/#mutatingwebhookconfiguration","text":"class lightkube.models.admissionregistration_v1beta1. MutatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 MutatingWebhookConfiguration instead. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata; More info webhooks MutatingWebhook - (optional) Webhooks is a list of webhooks and the affected resources and operations.","title":"MutatingWebhookConfiguration"},{"location":"models/admissionregistration_v1beta1/#mutatingwebhookconfigurationlist","text":"class lightkube.models.admissionregistration_v1beta1. MutatingWebhookConfigurationList ( items , apiVersion=None , kind=None , metadata=None ) MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration. parameters items MutatingWebhookConfiguration - List of MutatingWebhookConfiguration. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"MutatingWebhookConfigurationList"},{"location":"models/admissionregistration_v1beta1/#rulewithoperations","text":"class lightkube.models.admissionregistration_v1beta1. RuleWithOperations ( apiGroups=None , apiVersions=None , operations=None , resources=None , scope=None ) RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid. parameters apiGroups List[str] - (optional) APIGroups is the API groups the resources belong to. ' ' is all groups. If ' ' is present, the length of the slice must be one. Required. apiVersions List[str] - (optional) APIVersions is the API versions the resources belong to. ' ' is all versions. If ' ' is present, the length of the slice must be one. Required. operations List[str] - (optional) Operations is the operations the admission hook cares about - CREATE, UPDATE, or * for all operations. If ' ' is present, the length of the slice must be one. Required. resources List[str] - (optional) Resources is a list of resources this rule applies to. For example: 'pods' means pods. 'pods/log' means the log subresource of pods. ' ' means all resources, but not subresources. 'pods/ ' means all subresources of pods. ' /scale' means all scale subresources. ' / ' means all resources and their subresources. If wildcard is present, the validation rule will ensure resources do not overlap with each other. Depending on the enclosing object, subresources might not be allowed. Required. scope str - (optional) scope specifies the scope of this rule. Valid values are \"Cluster\", \"Namespaced\", and \" \" \"Cluster\" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. \"Namespaced\" means that only namespaced resources will match this rule. \" \" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is \"*\".","title":"RuleWithOperations"},{"location":"models/admissionregistration_v1beta1/#servicereference","text":"class lightkube.models.admissionregistration_v1beta1. ServiceReference ( name , namespace , path=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - name is the name of the service. Required namespace str - namespace is the namespace of the service. Required path str - (optional) path is an optional URL path which will be sent in any request to this service. port int - (optional) If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. port should be a valid port number (1-65535, inclusive).","title":"ServiceReference"},{"location":"models/admissionregistration_v1beta1/#validatingwebhook","text":"class lightkube.models.admissionregistration_v1beta1. ValidatingWebhook ( clientConfig , name , admissionReviewVersions=None , failurePolicy=None , matchPolicy=None , namespaceSelector=None , objectSelector=None , rules=None , sideEffects=None , timeoutSeconds=None ) ValidatingWebhook describes an admission webhook and the resources and operations it applies to. parameters clientConfig WebhookClientConfig - ClientConfig defines how to communicate with the hook. Required name str - The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required. admissionReviewVersions List[str] - (optional) AdmissionReviewVersions is an ordered list of preferred AdmissionReview versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to ['v1beta1'] . failurePolicy str - (optional) FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore. matchPolicy str - (optional) matchPolicy defines how the \"rules\" list is used to match incoming requests. Allowed values are \"Exact\" or \"Equivalent\". Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook. Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and \"rules\" only included apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"] , a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook. Defaults to \"Exact\" namespaceSelector meta_v1.LabelSelector - (optional) NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with \"runlevel\" of \"0\" or \"1\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [ \"0\", \"1\" ] } ] } If instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\"; you will set the selector as follows: \"namespaceSelector\": { \"matchExpressions\": [ { \"key\": \"environment\", \"operator\": \"In\", \"values\": [ \"prod\", \"staging\" ] } ] } See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors. Default to the empty LabelSelector, which matches everything. objectSelector meta_v1.LabelSelector - (optional) ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything. rules RuleWithOperations - (optional) Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches any Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects. sideEffects str - (optional) SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown. timeoutSeconds int - (optional) TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds.","title":"ValidatingWebhook"},{"location":"models/admissionregistration_v1beta1/#validatingwebhookconfiguration","text":"class lightkube.models.admissionregistration_v1beta1. ValidatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata; More info webhooks ValidatingWebhook - (optional) Webhooks is a list of webhooks and the affected resources and operations.","title":"ValidatingWebhookConfiguration"},{"location":"models/admissionregistration_v1beta1/#validatingwebhookconfigurationlist","text":"class lightkube.models.admissionregistration_v1beta1. ValidatingWebhookConfigurationList ( items , apiVersion=None , kind=None , metadata=None ) ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration. parameters items ValidatingWebhookConfiguration - List of ValidatingWebhookConfiguration. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"ValidatingWebhookConfigurationList"},{"location":"models/admissionregistration_v1beta1/#webhookclientconfig","text":"class lightkube.models.admissionregistration_v1beta1. WebhookClientConfig ( caBundle=None , service=None , url=None ) WebhookClientConfig contains the information to make a TLS connection with the webhook parameters caBundle str - (optional) caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used. service ServiceReference - (optional) service is a reference to the service for this webhook. Either service or url must be specified. If the webhook is running within the cluster, then you should use service . url str - (optional) url gives the location of the webhook, in standard URL form ( scheme://host:port/path ). Exactly one of url or service must be specified. The host should not refer to a service running in the cluster; use the service field instead. The host might be resolved via external DNS in some apiservers (e.g., kube-apiserver cannot resolve in-cluster DNS as that would be a layering violation). host may also be an IP address. Please note that using localhost or 127.0.0.1 as a host is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be \"https\"; the URL must begin with \"https://\". A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.","title":"WebhookClientConfig"},{"location":"models/apiextensions_v1/","text":"apiextensions_v1 CustomResourceColumnDefinition class lightkube.models.apiextensions_v1. CustomResourceColumnDefinition ( jsonPath , name , type , description=None , format=None , priority=None ) CustomResourceColumnDefinition specifies a column for server side printing. parameters jsonPath str - jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column. name str - name is a human readable name for the column. type str - type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details. description str - (optional) description is a human readable description of this column. format str - (optional) format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details. priority int - (optional) priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0. CustomResourceConversion class lightkube.models.apiextensions_v1. CustomResourceConversion ( strategy , webhook=None ) CustomResourceConversion describes how to convert different versions of a CR. parameters strategy str - strategy specifies how custom resources are converted between versions. Allowed values are: - None : The converter only change the apiVersion and would not touch any other field in the custom resource. - Webhook : API Server will call to an external webhook to do the conversion. Additional information is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set. webhook WebhookConversion - (optional) webhook describes how to call the conversion webhook. Required when strategy is set to Webhook . CustomResourceDefinition class lightkube.models.apiextensions_v1. CustomResourceDefinition ( spec , apiVersion=None , kind=None , metadata=None , status=None ) CustomResourceDefinition represents a resource that should be exposed on the API server. Its name MUST be in the format <.spec.name>.<.spec.group>. parameters spec CustomResourceDefinitionSpec - spec describes how the user wants the resources to appear apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status CustomResourceDefinitionStatus - (optional) status indicates the actual state of the CustomResourceDefinition CustomResourceDefinitionCondition class lightkube.models.apiextensions_v1. CustomResourceDefinitionCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) CustomResourceDefinitionCondition contains details for the current condition of this pod. parameters status str - status is the status of the condition. Can be True, False, Unknown. type str - type is the type of the condition. Types include Established, NamesAccepted and Terminating. lastTransitionTime meta_v1.Time - (optional) lastTransitionTime last time the condition transitioned from one status to another. message str - (optional) message is a human-readable message indicating details about last transition. reason str - (optional) reason is a unique, one-word, CamelCase reason for the condition's last transition. CustomResourceDefinitionList class lightkube.models.apiextensions_v1. CustomResourceDefinitionList ( items , apiVersion=None , kind=None , metadata=None ) CustomResourceDefinitionList is a list of CustomResourceDefinition objects. parameters items CustomResourceDefinition - items list individual CustomResourceDefinition objects apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) CustomResourceDefinitionNames class lightkube.models.apiextensions_v1. CustomResourceDefinitionNames ( kind , plural , categories=None , listKind=None , shortNames=None , singular=None ) CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition parameters kind str - kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the kind attribute in API calls. plural str - plural is the plural name of the resource to serve. The custom resources are served under /apis/<group>/<version>/.../<plural> . Must match the name of the CustomResourceDefinition (in the form <names.plural>.<group> ). Must be all lowercase. categories List[str] - (optional) categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like kubectl get all . listKind str - (optional) listKind is the serialized kind of the list for this resource. Defaults to \" kind List\". shortNames List[str] - (optional) shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like kubectl get <shortname> . It must be all lowercase. singular str - (optional) singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased kind . CustomResourceDefinitionSpec class lightkube.models.apiextensions_v1. CustomResourceDefinitionSpec ( group , names , scope , versions , conversion=None , preserveUnknownFields=None ) CustomResourceDefinitionSpec describes how a user wants their resource to appear parameters group str - group is the API group of the defined custom resource. The custom resources are served under /apis/<group>/... . Must match the name of the CustomResourceDefinition (in the form <names.plural>.<group> ). names CustomResourceDefinitionNames - names specify the resource and kind names for the custom resource. scope str - scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are Cluster and Namespaced . versions CustomResourceDefinitionVersion - versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10. conversion CustomResourceConversion - (optional) conversion defines conversion settings for the CRD. preserveUnknownFields bool - (optional) preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting x-preserve-unknown-fields to true in spec.versions[*].schema.openAPIV3Schema . See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details. CustomResourceDefinitionStatus class lightkube.models.apiextensions_v1. CustomResourceDefinitionStatus ( acceptedNames=None , conditions=None , storedVersions=None ) CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition parameters acceptedNames CustomResourceDefinitionNames - (optional) acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec. conditions CustomResourceDefinitionCondition - (optional) conditions indicate state for particular aspects of a CustomResourceDefinition storedVersions List[str] - (optional) storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from spec.versions while they exist in this list. CustomResourceDefinitionVersion class lightkube.models.apiextensions_v1. CustomResourceDefinitionVersion ( name , served , storage , additionalPrinterColumns=None , schema=None , subresources=None ) CustomResourceDefinitionVersion describes a version for CRD. parameters name str - name is the version name, e.g. \u201cv1\u201d, \u201cv2beta1\u201d, etc. The custom resources are served under this version at /apis/<group>/<version>/... if served is true. served bool - served is a flag enabling/disabling this version from being served via REST APIs storage bool - storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true. additionalPrinterColumns CustomResourceColumnDefinition - (optional) additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used. schema CustomResourceValidation - (optional) schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource. subresources CustomResourceSubresources - (optional) subresources specify what subresources this version of the defined custom resource have. CustomResourceSubresourceScale class lightkube.models.apiextensions_v1. CustomResourceSubresourceScale ( specReplicasPath , statusReplicasPath , labelSelectorPath=None ) CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources. parameters specReplicasPath str - specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale spec.replicas . Only JSON paths without the array notation are allowed. Must be a JSON Path under .spec . If there is no value under the given path in the custom resource, the /scale subresource will return an error on GET. statusReplicasPath str - statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale status.replicas . Only JSON paths without the array notation are allowed. Must be a JSON Path under .status . If there is no value under the given path in the custom resource, the status.replicas value in the /scale subresource will default to 0. labelSelectorPath str - (optional) labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale status.selector . Only JSON paths without the array notation are allowed. Must be a JSON Path under .status or .spec . Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info If there is no value under the given path in the custom resource, the status.selector value in the /scale subresource will default to the empty string. CustomResourceSubresourceStatus CustomResourceSubresources class lightkube.models.apiextensions_v1. CustomResourceSubresources ( scale=None , status=None ) CustomResourceSubresources defines the status and scale subresources for CustomResources. parameters scale CustomResourceSubresourceScale - (optional) scale indicates the custom resource should serve a /scale subresource that returns an autoscaling/v1 Scale object. status CustomResourceSubresourceStatus - (optional) status indicates the custom resource should serve a /status subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the status stanza of the object. 2. requests to the custom resource /status subresource ignore changes to anything other than the status stanza of the object. CustomResourceValidation class lightkube.models.apiextensions_v1. CustomResourceValidation ( openAPIV3Schema=None ) CustomResourceValidation is a list of validation methods for CustomResources. parameters openAPIV3Schema JSONSchemaProps - (optional) openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning. ExternalDocumentation class lightkube.models.apiextensions_v1. ExternalDocumentation ( description=None , url=None ) ExternalDocumentation allows referencing an external resource for extended documentation. parameters description str - (optional) url str - (optional) JSON JSONSchemaProps class lightkube.models.apiextensions_v1. JSONSchemaProps ( d_ref=None , d_schema=None , additionalItems=None , additionalProperties=None , allOf=None , anyOf=None , default=None , definitions=None , dependencies=None , description=None , enum=None , example=None , exclusiveMaximum=None , exclusiveMinimum=None , externalDocs=None , format=None , id=None , items=None , maxItems=None , maxLength=None , maxProperties=None , maximum=None , minItems=None , minLength=None , minProperties=None , minimum=None , multipleOf=None , not_=None , nullable=None , oneOf=None , pattern=None , patternProperties=None , properties=None , required=None , title=None , type=None , uniqueItems=None , x_kubernetes_embedded_resource=None , x_kubernetes_int_or_string=None , x_kubernetes_list_map_keys=None , x_kubernetes_list_type=None , x_kubernetes_map_type=None , x_kubernetes_preserve_unknown_fields=None ) JSONSchemaProps is a JSON-Schema following Specification Draft 4 ( http://json-schema.org/ ). parameters d_ref str - (optional) d_schema str - (optional) additionalItems JSONSchemaPropsOrBool - (optional) additionalProperties JSONSchemaPropsOrBool - (optional) allOf JSONSchemaProps - (optional) anyOf JSONSchemaProps - (optional) default JSON - (optional) default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false. definitions dict - (optional) dependencies dict - (optional) description str - (optional) enum JSON - (optional) example JSON - (optional) exclusiveMaximum bool - (optional) exclusiveMinimum bool - (optional) externalDocs ExternalDocumentation - (optional) format str - (optional) format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated: bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339. id str - (optional) items JSONSchemaPropsOrArray - (optional) maxItems int - (optional) maxLength int - (optional) maxProperties int - (optional) maximum float - (optional) minItems int - (optional) minLength int - (optional) minProperties int - (optional) minimum float - (optional) multipleOf float - (optional) not_ JSONSchemaProps - (optional) nullable bool - (optional) oneOf JSONSchemaProps - (optional) pattern str - (optional) patternProperties dict - (optional) properties dict - (optional) required List[str] - (optional) title str - (optional) type str - (optional) uniqueItems bool - (optional) x_kubernetes_embedded_resource bool - (optional) x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata). x_kubernetes_int_or_string bool - (optional) x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns: 1) anyOf: type: integer type: string 2) allOf: anyOf: type: integer type: string ... zero or more x_kubernetes_list_map_keys List[str] - (optional) x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type map by specifying the keys used as the index of the map. This tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported). The properties specified must either be required or have a default value, to ensure those properties are present for all list items. x_kubernetes_list_type str - (optional) x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values: 1) atomic : the list is treated as a single entity, like a scalar. Atomic lists will be entirely replaced when updated. This extension may be used on any type of list (struct, scalar, ...). 2) set : Sets are lists that must not have multiple items with the same value. Each value must be a scalar, an object with x-kubernetes-map-type atomic or an array with x-kubernetes-list-type atomic . 3) map : These lists are like maps in that their elements have a non-index key used to identify them. Order is preserved upon merge. The map tag must only be used on a list with elements of type object. Defaults to atomic for arrays. x_kubernetes_map_type str - (optional) x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values: 1) granular : These maps are actual maps (key-value pairs) and each fields are independent from each other (they can each be manipulated by separate actors). This is the default behaviour for all maps. 2) atomic : the list is treated as a single entity, like a scalar. Atomic maps will be entirely replaced when updated. x_kubernetes_preserve_unknown_fields bool - (optional) x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden. JSONSchemaPropsOrArray JSONSchemaPropsOrBool JSONSchemaPropsOrStringArray ServiceReference class lightkube.models.apiextensions_v1. ServiceReference ( name , namespace , path=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - name is the name of the service. Required namespace str - namespace is the namespace of the service. Required path str - (optional) path is an optional URL path at which the webhook will be contacted. port int - (optional) port is an optional service port at which the webhook will be contacted. port should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility. WebhookClientConfig class lightkube.models.apiextensions_v1. WebhookClientConfig ( caBundle=None , service=None , url=None ) WebhookClientConfig contains the information to make a TLS connection with the webhook. parameters caBundle str - (optional) caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used. service ServiceReference - (optional) service is a reference to the service for this webhook. Either service or url must be specified. If the webhook is running within the cluster, then you should use service . url str - (optional) url gives the location of the webhook, in standard URL form ( scheme://host:port/path ). Exactly one of url or service must be specified. The host should not refer to a service running in the cluster; use the service field instead. The host might be resolved via external DNS in some apiservers (e.g., kube-apiserver cannot resolve in-cluster DNS as that would be a layering violation). host may also be an IP address. Please note that using localhost or 127.0.0.1 as a host is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be \"https\"; the URL must begin with \"https://\". A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either. WebhookConversion class lightkube.models.apiextensions_v1. WebhookConversion ( conversionReviewVersions , clientConfig=None ) WebhookConversion describes how to call a conversion webhook parameters conversionReviewVersions List[str] - conversionReviewVersions is an ordered list of preferred ConversionReview versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail. clientConfig WebhookClientConfig - (optional) clientConfig is the instructions for how to call the webhook if strategy is Webhook .","title":"apiextensions_v1"},{"location":"models/apiextensions_v1/#apiextensions_v1","text":"","title":"apiextensions_v1"},{"location":"models/apiextensions_v1/#customresourcecolumndefinition","text":"class lightkube.models.apiextensions_v1. CustomResourceColumnDefinition ( jsonPath , name , type , description=None , format=None , priority=None ) CustomResourceColumnDefinition specifies a column for server side printing. parameters jsonPath str - jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column. name str - name is a human readable name for the column. type str - type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details. description str - (optional) description is a human readable description of this column. format str - (optional) format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details. priority int - (optional) priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.","title":"CustomResourceColumnDefinition"},{"location":"models/apiextensions_v1/#customresourceconversion","text":"class lightkube.models.apiextensions_v1. CustomResourceConversion ( strategy , webhook=None ) CustomResourceConversion describes how to convert different versions of a CR. parameters strategy str - strategy specifies how custom resources are converted between versions. Allowed values are: - None : The converter only change the apiVersion and would not touch any other field in the custom resource. - Webhook : API Server will call to an external webhook to do the conversion. Additional information is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set. webhook WebhookConversion - (optional) webhook describes how to call the conversion webhook. Required when strategy is set to Webhook .","title":"CustomResourceConversion"},{"location":"models/apiextensions_v1/#customresourcedefinition","text":"class lightkube.models.apiextensions_v1. CustomResourceDefinition ( spec , apiVersion=None , kind=None , metadata=None , status=None ) CustomResourceDefinition represents a resource that should be exposed on the API server. Its name MUST be in the format <.spec.name>.<.spec.group>. parameters spec CustomResourceDefinitionSpec - spec describes how the user wants the resources to appear apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status CustomResourceDefinitionStatus - (optional) status indicates the actual state of the CustomResourceDefinition","title":"CustomResourceDefinition"},{"location":"models/apiextensions_v1/#customresourcedefinitioncondition","text":"class lightkube.models.apiextensions_v1. CustomResourceDefinitionCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) CustomResourceDefinitionCondition contains details for the current condition of this pod. parameters status str - status is the status of the condition. Can be True, False, Unknown. type str - type is the type of the condition. Types include Established, NamesAccepted and Terminating. lastTransitionTime meta_v1.Time - (optional) lastTransitionTime last time the condition transitioned from one status to another. message str - (optional) message is a human-readable message indicating details about last transition. reason str - (optional) reason is a unique, one-word, CamelCase reason for the condition's last transition.","title":"CustomResourceDefinitionCondition"},{"location":"models/apiextensions_v1/#customresourcedefinitionlist","text":"class lightkube.models.apiextensions_v1. CustomResourceDefinitionList ( items , apiVersion=None , kind=None , metadata=None ) CustomResourceDefinitionList is a list of CustomResourceDefinition objects. parameters items CustomResourceDefinition - items list individual CustomResourceDefinition objects apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional)","title":"CustomResourceDefinitionList"},{"location":"models/apiextensions_v1/#customresourcedefinitionnames","text":"class lightkube.models.apiextensions_v1. CustomResourceDefinitionNames ( kind , plural , categories=None , listKind=None , shortNames=None , singular=None ) CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition parameters kind str - kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the kind attribute in API calls. plural str - plural is the plural name of the resource to serve. The custom resources are served under /apis/<group>/<version>/.../<plural> . Must match the name of the CustomResourceDefinition (in the form <names.plural>.<group> ). Must be all lowercase. categories List[str] - (optional) categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like kubectl get all . listKind str - (optional) listKind is the serialized kind of the list for this resource. Defaults to \" kind List\". shortNames List[str] - (optional) shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like kubectl get <shortname> . It must be all lowercase. singular str - (optional) singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased kind .","title":"CustomResourceDefinitionNames"},{"location":"models/apiextensions_v1/#customresourcedefinitionspec","text":"class lightkube.models.apiextensions_v1. CustomResourceDefinitionSpec ( group , names , scope , versions , conversion=None , preserveUnknownFields=None ) CustomResourceDefinitionSpec describes how a user wants their resource to appear parameters group str - group is the API group of the defined custom resource. The custom resources are served under /apis/<group>/... . Must match the name of the CustomResourceDefinition (in the form <names.plural>.<group> ). names CustomResourceDefinitionNames - names specify the resource and kind names for the custom resource. scope str - scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are Cluster and Namespaced . versions CustomResourceDefinitionVersion - versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10. conversion CustomResourceConversion - (optional) conversion defines conversion settings for the CRD. preserveUnknownFields bool - (optional) preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting x-preserve-unknown-fields to true in spec.versions[*].schema.openAPIV3Schema . See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.","title":"CustomResourceDefinitionSpec"},{"location":"models/apiextensions_v1/#customresourcedefinitionstatus","text":"class lightkube.models.apiextensions_v1. CustomResourceDefinitionStatus ( acceptedNames=None , conditions=None , storedVersions=None ) CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition parameters acceptedNames CustomResourceDefinitionNames - (optional) acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec. conditions CustomResourceDefinitionCondition - (optional) conditions indicate state for particular aspects of a CustomResourceDefinition storedVersions List[str] - (optional) storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from spec.versions while they exist in this list.","title":"CustomResourceDefinitionStatus"},{"location":"models/apiextensions_v1/#customresourcedefinitionversion","text":"class lightkube.models.apiextensions_v1. CustomResourceDefinitionVersion ( name , served , storage , additionalPrinterColumns=None , schema=None , subresources=None ) CustomResourceDefinitionVersion describes a version for CRD. parameters name str - name is the version name, e.g. \u201cv1\u201d, \u201cv2beta1\u201d, etc. The custom resources are served under this version at /apis/<group>/<version>/... if served is true. served bool - served is a flag enabling/disabling this version from being served via REST APIs storage bool - storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true. additionalPrinterColumns CustomResourceColumnDefinition - (optional) additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used. schema CustomResourceValidation - (optional) schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource. subresources CustomResourceSubresources - (optional) subresources specify what subresources this version of the defined custom resource have.","title":"CustomResourceDefinitionVersion"},{"location":"models/apiextensions_v1/#customresourcesubresourcescale","text":"class lightkube.models.apiextensions_v1. CustomResourceSubresourceScale ( specReplicasPath , statusReplicasPath , labelSelectorPath=None ) CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources. parameters specReplicasPath str - specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale spec.replicas . Only JSON paths without the array notation are allowed. Must be a JSON Path under .spec . If there is no value under the given path in the custom resource, the /scale subresource will return an error on GET. statusReplicasPath str - statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale status.replicas . Only JSON paths without the array notation are allowed. Must be a JSON Path under .status . If there is no value under the given path in the custom resource, the status.replicas value in the /scale subresource will default to 0. labelSelectorPath str - (optional) labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale status.selector . Only JSON paths without the array notation are allowed. Must be a JSON Path under .status or .spec . Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info If there is no value under the given path in the custom resource, the status.selector value in the /scale subresource will default to the empty string.","title":"CustomResourceSubresourceScale"},{"location":"models/apiextensions_v1/#customresourcesubresourcestatus","text":"","title":"CustomResourceSubresourceStatus"},{"location":"models/apiextensions_v1/#customresourcesubresources","text":"class lightkube.models.apiextensions_v1. CustomResourceSubresources ( scale=None , status=None ) CustomResourceSubresources defines the status and scale subresources for CustomResources. parameters scale CustomResourceSubresourceScale - (optional) scale indicates the custom resource should serve a /scale subresource that returns an autoscaling/v1 Scale object. status CustomResourceSubresourceStatus - (optional) status indicates the custom resource should serve a /status subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the status stanza of the object. 2. requests to the custom resource /status subresource ignore changes to anything other than the status stanza of the object.","title":"CustomResourceSubresources"},{"location":"models/apiextensions_v1/#customresourcevalidation","text":"class lightkube.models.apiextensions_v1. CustomResourceValidation ( openAPIV3Schema=None ) CustomResourceValidation is a list of validation methods for CustomResources. parameters openAPIV3Schema JSONSchemaProps - (optional) openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.","title":"CustomResourceValidation"},{"location":"models/apiextensions_v1/#externaldocumentation","text":"class lightkube.models.apiextensions_v1. ExternalDocumentation ( description=None , url=None ) ExternalDocumentation allows referencing an external resource for extended documentation. parameters description str - (optional) url str - (optional)","title":"ExternalDocumentation"},{"location":"models/apiextensions_v1/#json","text":"","title":"JSON"},{"location":"models/apiextensions_v1/#jsonschemaprops","text":"class lightkube.models.apiextensions_v1. JSONSchemaProps ( d_ref=None , d_schema=None , additionalItems=None , additionalProperties=None , allOf=None , anyOf=None , default=None , definitions=None , dependencies=None , description=None , enum=None , example=None , exclusiveMaximum=None , exclusiveMinimum=None , externalDocs=None , format=None , id=None , items=None , maxItems=None , maxLength=None , maxProperties=None , maximum=None , minItems=None , minLength=None , minProperties=None , minimum=None , multipleOf=None , not_=None , nullable=None , oneOf=None , pattern=None , patternProperties=None , properties=None , required=None , title=None , type=None , uniqueItems=None , x_kubernetes_embedded_resource=None , x_kubernetes_int_or_string=None , x_kubernetes_list_map_keys=None , x_kubernetes_list_type=None , x_kubernetes_map_type=None , x_kubernetes_preserve_unknown_fields=None ) JSONSchemaProps is a JSON-Schema following Specification Draft 4 ( http://json-schema.org/ ). parameters d_ref str - (optional) d_schema str - (optional) additionalItems JSONSchemaPropsOrBool - (optional) additionalProperties JSONSchemaPropsOrBool - (optional) allOf JSONSchemaProps - (optional) anyOf JSONSchemaProps - (optional) default JSON - (optional) default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false. definitions dict - (optional) dependencies dict - (optional) description str - (optional) enum JSON - (optional) example JSON - (optional) exclusiveMaximum bool - (optional) exclusiveMinimum bool - (optional) externalDocs ExternalDocumentation - (optional) format str - (optional) format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated: bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339. id str - (optional) items JSONSchemaPropsOrArray - (optional) maxItems int - (optional) maxLength int - (optional) maxProperties int - (optional) maximum float - (optional) minItems int - (optional) minLength int - (optional) minProperties int - (optional) minimum float - (optional) multipleOf float - (optional) not_ JSONSchemaProps - (optional) nullable bool - (optional) oneOf JSONSchemaProps - (optional) pattern str - (optional) patternProperties dict - (optional) properties dict - (optional) required List[str] - (optional) title str - (optional) type str - (optional) uniqueItems bool - (optional) x_kubernetes_embedded_resource bool - (optional) x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata). x_kubernetes_int_or_string bool - (optional) x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns: 1) anyOf: type: integer type: string 2) allOf: anyOf: type: integer type: string ... zero or more x_kubernetes_list_map_keys List[str] - (optional) x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type map by specifying the keys used as the index of the map. This tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported). The properties specified must either be required or have a default value, to ensure those properties are present for all list items. x_kubernetes_list_type str - (optional) x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values: 1) atomic : the list is treated as a single entity, like a scalar. Atomic lists will be entirely replaced when updated. This extension may be used on any type of list (struct, scalar, ...). 2) set : Sets are lists that must not have multiple items with the same value. Each value must be a scalar, an object with x-kubernetes-map-type atomic or an array with x-kubernetes-list-type atomic . 3) map : These lists are like maps in that their elements have a non-index key used to identify them. Order is preserved upon merge. The map tag must only be used on a list with elements of type object. Defaults to atomic for arrays. x_kubernetes_map_type str - (optional) x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values: 1) granular : These maps are actual maps (key-value pairs) and each fields are independent from each other (they can each be manipulated by separate actors). This is the default behaviour for all maps. 2) atomic : the list is treated as a single entity, like a scalar. Atomic maps will be entirely replaced when updated. x_kubernetes_preserve_unknown_fields bool - (optional) x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.","title":"JSONSchemaProps"},{"location":"models/apiextensions_v1/#jsonschemapropsorarray","text":"","title":"JSONSchemaPropsOrArray"},{"location":"models/apiextensions_v1/#jsonschemapropsorbool","text":"","title":"JSONSchemaPropsOrBool"},{"location":"models/apiextensions_v1/#jsonschemapropsorstringarray","text":"","title":"JSONSchemaPropsOrStringArray"},{"location":"models/apiextensions_v1/#servicereference","text":"class lightkube.models.apiextensions_v1. ServiceReference ( name , namespace , path=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - name is the name of the service. Required namespace str - namespace is the namespace of the service. Required path str - (optional) path is an optional URL path at which the webhook will be contacted. port int - (optional) port is an optional service port at which the webhook will be contacted. port should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.","title":"ServiceReference"},{"location":"models/apiextensions_v1/#webhookclientconfig","text":"class lightkube.models.apiextensions_v1. WebhookClientConfig ( caBundle=None , service=None , url=None ) WebhookClientConfig contains the information to make a TLS connection with the webhook. parameters caBundle str - (optional) caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used. service ServiceReference - (optional) service is a reference to the service for this webhook. Either service or url must be specified. If the webhook is running within the cluster, then you should use service . url str - (optional) url gives the location of the webhook, in standard URL form ( scheme://host:port/path ). Exactly one of url or service must be specified. The host should not refer to a service running in the cluster; use the service field instead. The host might be resolved via external DNS in some apiservers (e.g., kube-apiserver cannot resolve in-cluster DNS as that would be a layering violation). host may also be an IP address. Please note that using localhost or 127.0.0.1 as a host is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be \"https\"; the URL must begin with \"https://\". A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.","title":"WebhookClientConfig"},{"location":"models/apiextensions_v1/#webhookconversion","text":"class lightkube.models.apiextensions_v1. WebhookConversion ( conversionReviewVersions , clientConfig=None ) WebhookConversion describes how to call a conversion webhook parameters conversionReviewVersions List[str] - conversionReviewVersions is an ordered list of preferred ConversionReview versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail. clientConfig WebhookClientConfig - (optional) clientConfig is the instructions for how to call the webhook if strategy is Webhook .","title":"WebhookConversion"},{"location":"models/apiextensions_v1beta1/","text":"apiextensions_v1beta1 CustomResourceColumnDefinition class lightkube.models.apiextensions_v1beta1. CustomResourceColumnDefinition ( JSONPath , name , type , description=None , format=None , priority=None ) CustomResourceColumnDefinition specifies a column for server side printing. parameters JSONPath str - JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column. name str - name is a human readable name for the column. type str - type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details. description str - (optional) description is a human readable description of this column. format str - (optional) format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details. priority int - (optional) priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0. CustomResourceConversion class lightkube.models.apiextensions_v1beta1. CustomResourceConversion ( strategy , conversionReviewVersions=None , webhookClientConfig=None ) CustomResourceConversion describes how to convert different versions of a CR. parameters strategy str - strategy specifies how custom resources are converted between versions. Allowed values are: - None : The converter only change the apiVersion and would not touch any other field in the custom resource. - Webhook : API Server will call to an external webhook to do the conversion. Additional information is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhookClientConfig to be set. conversionReviewVersions List[str] - (optional) conversionReviewVersions is an ordered list of preferred ConversionReview versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail. Defaults to [\"v1beta1\"] . webhookClientConfig WebhookClientConfig - (optional) webhookClientConfig is the instructions for how to call the webhook if strategy is Webhook . Required when strategy is set to Webhook . CustomResourceDefinition class lightkube.models.apiextensions_v1beta1. CustomResourceDefinition ( spec , apiVersion=None , kind=None , metadata=None , status=None ) CustomResourceDefinition represents a resource that should be exposed on the API server. Its name MUST be in the format <.spec.name>.<.spec.group>. Deprecated in v1.16, planned for removal in v1.19. Use apiextensions.k8s.io/v1 CustomResourceDefinition instead. parameters spec CustomResourceDefinitionSpec - spec describes how the user wants the resources to appear apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status CustomResourceDefinitionStatus - (optional) status indicates the actual state of the CustomResourceDefinition CustomResourceDefinitionCondition class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) CustomResourceDefinitionCondition contains details for the current condition of this pod. parameters status str - status is the status of the condition. Can be True, False, Unknown. type str - type is the type of the condition. Types include Established, NamesAccepted and Terminating. lastTransitionTime meta_v1.Time - (optional) lastTransitionTime last time the condition transitioned from one status to another. message str - (optional) message is a human-readable message indicating details about last transition. reason str - (optional) reason is a unique, one-word, CamelCase reason for the condition's last transition. CustomResourceDefinitionList class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionList ( items , apiVersion=None , kind=None , metadata=None ) CustomResourceDefinitionList is a list of CustomResourceDefinition objects. parameters items CustomResourceDefinition - items list individual CustomResourceDefinition objects apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) CustomResourceDefinitionNames class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionNames ( kind , plural , categories=None , listKind=None , shortNames=None , singular=None ) CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition parameters kind str - kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the kind attribute in API calls. plural str - plural is the plural name of the resource to serve. The custom resources are served under /apis/<group>/<version>/.../<plural> . Must match the name of the CustomResourceDefinition (in the form <names.plural>.<group> ). Must be all lowercase. categories List[str] - (optional) categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like kubectl get all . listKind str - (optional) listKind is the serialized kind of the list for this resource. Defaults to \" kind List\". shortNames List[str] - (optional) shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like kubectl get <shortname> . It must be all lowercase. singular str - (optional) singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased kind . CustomResourceDefinitionSpec class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionSpec ( group , names , scope , additionalPrinterColumns=None , conversion=None , preserveUnknownFields=None , subresources=None , validation=None , version=None , versions=None ) CustomResourceDefinitionSpec describes how a user wants their resource to appear parameters group str - group is the API group of the defined custom resource. The custom resources are served under /apis/<group>/... . Must match the name of the CustomResourceDefinition (in the form <names.plural>.<group> ). names CustomResourceDefinitionNames - names specify the resource and kind names for the custom resource. scope str - scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are Cluster and Namespaced . Default is Namespaced . additionalPrinterColumns CustomResourceColumnDefinition - (optional) additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used. conversion CustomResourceConversion - (optional) conversion defines conversion settings for the CRD. preserveUnknownFields bool - (optional) preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. If false, schemas must be defined for all versions. Defaults to true in v1beta for backwards compatibility. Deprecated: will be required to be false in v1. Preservation of unknown fields can be specified in the validation schema using the x-kubernetes-preserve-unknown-fields: true extension. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details. subresources CustomResourceSubresources - (optional) subresources specify what subresources the defined custom resource has. If present, this field configures subresources for all versions. Top-level and per-version subresources are mutually exclusive. validation CustomResourceValidation - (optional) validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive. version str - (optional) version is the API version of the defined custom resource. The custom resources are served under /apis/<group>/<version>/... . Must match the name of the first item in the versions list if version and versions are both specified. Optional if versions is specified. Deprecated: use versions instead. versions CustomResourceDefinitionVersion - (optional) versions is the list of all API versions of the defined custom resource. Optional if version is specified. The name of the first item in the versions list must match the version field if version and versions are both specified. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10. CustomResourceDefinitionStatus class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionStatus ( acceptedNames=None , conditions=None , storedVersions=None ) CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition parameters acceptedNames CustomResourceDefinitionNames - (optional) acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec. conditions CustomResourceDefinitionCondition - (optional) conditions indicate state for particular aspects of a CustomResourceDefinition storedVersions List[str] - (optional) storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from spec.versions while they exist in this list. CustomResourceDefinitionVersion class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionVersion ( name , served , storage , additionalPrinterColumns=None , schema=None , subresources=None ) CustomResourceDefinitionVersion describes a version for CRD. parameters name str - name is the version name, e.g. \u201cv1\u201d, \u201cv2beta1\u201d, etc. The custom resources are served under this version at /apis/<group>/<version>/... if served is true. served bool - served is a flag enabling/disabling this version from being served via REST APIs storage bool - storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true. additionalPrinterColumns CustomResourceColumnDefinition - (optional) additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. Top-level and per-version columns are mutually exclusive. Per-version columns must not all be set to identical values (top-level columns should be used instead). If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used. schema CustomResourceValidation - (optional) schema describes the schema used for validation and pruning of this version of the custom resource. Top-level and per-version schemas are mutually exclusive. Per-version schemas must not all be set to identical values (top-level validation schema should be used instead). subresources CustomResourceSubresources - (optional) subresources specify what subresources this version of the defined custom resource have. Top-level and per-version subresources are mutually exclusive. Per-version subresources must not all be set to identical values (top-level subresources should be used instead). CustomResourceSubresourceScale class lightkube.models.apiextensions_v1beta1. CustomResourceSubresourceScale ( specReplicasPath , statusReplicasPath , labelSelectorPath=None ) CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources. parameters specReplicasPath str - specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale spec.replicas . Only JSON paths without the array notation are allowed. Must be a JSON Path under .spec . If there is no value under the given path in the custom resource, the /scale subresource will return an error on GET. statusReplicasPath str - statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale status.replicas . Only JSON paths without the array notation are allowed. Must be a JSON Path under .status . If there is no value under the given path in the custom resource, the status.replicas value in the /scale subresource will default to 0. labelSelectorPath str - (optional) labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale status.selector . Only JSON paths without the array notation are allowed. Must be a JSON Path under .status or .spec . Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info If there is no value under the given path in the custom resource, the status.selector value in the /scale subresource will default to the empty string. CustomResourceSubresourceStatus CustomResourceSubresources class lightkube.models.apiextensions_v1beta1. CustomResourceSubresources ( scale=None , status=None ) CustomResourceSubresources defines the status and scale subresources for CustomResources. parameters scale CustomResourceSubresourceScale - (optional) scale indicates the custom resource should serve a /scale subresource that returns an autoscaling/v1 Scale object. status CustomResourceSubresourceStatus - (optional) status indicates the custom resource should serve a /status subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the status stanza of the object. 2. requests to the custom resource /status subresource ignore changes to anything other than the status stanza of the object. CustomResourceValidation class lightkube.models.apiextensions_v1beta1. CustomResourceValidation ( openAPIV3Schema=None ) CustomResourceValidation is a list of validation methods for CustomResources. parameters openAPIV3Schema JSONSchemaProps - (optional) openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning. ExternalDocumentation class lightkube.models.apiextensions_v1beta1. ExternalDocumentation ( description=None , url=None ) ExternalDocumentation allows referencing an external resource for extended documentation. parameters description str - (optional) url str - (optional) JSON JSONSchemaProps class lightkube.models.apiextensions_v1beta1. JSONSchemaProps ( d_ref=None , d_schema=None , additionalItems=None , additionalProperties=None , allOf=None , anyOf=None , default=None , definitions=None , dependencies=None , description=None , enum=None , example=None , exclusiveMaximum=None , exclusiveMinimum=None , externalDocs=None , format=None , id=None , items=None , maxItems=None , maxLength=None , maxProperties=None , maximum=None , minItems=None , minLength=None , minProperties=None , minimum=None , multipleOf=None , not_=None , nullable=None , oneOf=None , pattern=None , patternProperties=None , properties=None , required=None , title=None , type=None , uniqueItems=None , x_kubernetes_embedded_resource=None , x_kubernetes_int_or_string=None , x_kubernetes_list_map_keys=None , x_kubernetes_list_type=None , x_kubernetes_map_type=None , x_kubernetes_preserve_unknown_fields=None ) JSONSchemaProps is a JSON-Schema following Specification Draft 4 ( http://json-schema.org/ ). parameters d_ref str - (optional) d_schema str - (optional) additionalItems JSONSchemaPropsOrBool - (optional) additionalProperties JSONSchemaPropsOrBool - (optional) allOf JSONSchemaProps - (optional) anyOf JSONSchemaProps - (optional) default JSON - (optional) default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. CustomResourceDefinitions with defaults must be created using the v1 (or newer) CustomResourceDefinition API. definitions dict - (optional) dependencies dict - (optional) description str - (optional) enum JSON - (optional) example JSON - (optional) exclusiveMaximum bool - (optional) exclusiveMinimum bool - (optional) externalDocs ExternalDocumentation - (optional) format str - (optional) format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated: bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339. id str - (optional) items JSONSchemaPropsOrArray - (optional) maxItems int - (optional) maxLength int - (optional) maxProperties int - (optional) maximum float - (optional) minItems int - (optional) minLength int - (optional) minProperties int - (optional) minimum float - (optional) multipleOf float - (optional) not_ JSONSchemaProps - (optional) nullable bool - (optional) oneOf JSONSchemaProps - (optional) pattern str - (optional) patternProperties dict - (optional) properties dict - (optional) required List[str] - (optional) title str - (optional) type str - (optional) uniqueItems bool - (optional) x_kubernetes_embedded_resource bool - (optional) x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata). x_kubernetes_int_or_string bool - (optional) x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns: 1) anyOf: type: integer type: string 2) allOf: anyOf: type: integer type: string ... zero or more x_kubernetes_list_map_keys List[str] - (optional) x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type map by specifying the keys used as the index of the map. This tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported). The properties specified must either be required or have a default value, to ensure those properties are present for all list items. x_kubernetes_list_type str - (optional) x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values: 1) atomic : the list is treated as a single entity, like a scalar. Atomic lists will be entirely replaced when updated. This extension may be used on any type of list (struct, scalar, ...). 2) set : Sets are lists that must not have multiple items with the same value. Each value must be a scalar, an object with x-kubernetes-map-type atomic or an array with x-kubernetes-list-type atomic . 3) map : These lists are like maps in that their elements have a non-index key used to identify them. Order is preserved upon merge. The map tag must only be used on a list with elements of type object. Defaults to atomic for arrays. x_kubernetes_map_type str - (optional) x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values: 1) granular : These maps are actual maps (key-value pairs) and each fields are independent from each other (they can each be manipulated by separate actors). This is the default behaviour for all maps. 2) atomic : the list is treated as a single entity, like a scalar. Atomic maps will be entirely replaced when updated. x_kubernetes_preserve_unknown_fields bool - (optional) x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden. JSONSchemaPropsOrArray JSONSchemaPropsOrBool JSONSchemaPropsOrStringArray ServiceReference class lightkube.models.apiextensions_v1beta1. ServiceReference ( name , namespace , path=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - name is the name of the service. Required namespace str - namespace is the namespace of the service. Required path str - (optional) path is an optional URL path at which the webhook will be contacted. port int - (optional) port is an optional service port at which the webhook will be contacted. port should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility. WebhookClientConfig class lightkube.models.apiextensions_v1beta1. WebhookClientConfig ( caBundle=None , service=None , url=None ) WebhookClientConfig contains the information to make a TLS connection with the webhook. parameters caBundle str - (optional) caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used. service ServiceReference - (optional) service is a reference to the service for this webhook. Either service or url must be specified. If the webhook is running within the cluster, then you should use service . url str - (optional) url gives the location of the webhook, in standard URL form ( scheme://host:port/path ). Exactly one of url or service must be specified. The host should not refer to a service running in the cluster; use the service field instead. The host might be resolved via external DNS in some apiservers (e.g., kube-apiserver cannot resolve in-cluster DNS as that would be a layering violation). host may also be an IP address. Please note that using localhost or 127.0.0.1 as a host is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be \"https\"; the URL must begin with \"https://\". A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.","title":"apiextensions_v1beta1"},{"location":"models/apiextensions_v1beta1/#apiextensions_v1beta1","text":"","title":"apiextensions_v1beta1"},{"location":"models/apiextensions_v1beta1/#customresourcecolumndefinition","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceColumnDefinition ( JSONPath , name , type , description=None , format=None , priority=None ) CustomResourceColumnDefinition specifies a column for server side printing. parameters JSONPath str - JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column. name str - name is a human readable name for the column. type str - type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details. description str - (optional) description is a human readable description of this column. format str - (optional) format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details. priority int - (optional) priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.","title":"CustomResourceColumnDefinition"},{"location":"models/apiextensions_v1beta1/#customresourceconversion","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceConversion ( strategy , conversionReviewVersions=None , webhookClientConfig=None ) CustomResourceConversion describes how to convert different versions of a CR. parameters strategy str - strategy specifies how custom resources are converted between versions. Allowed values are: - None : The converter only change the apiVersion and would not touch any other field in the custom resource. - Webhook : API Server will call to an external webhook to do the conversion. Additional information is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhookClientConfig to be set. conversionReviewVersions List[str] - (optional) conversionReviewVersions is an ordered list of preferred ConversionReview versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail. Defaults to [\"v1beta1\"] . webhookClientConfig WebhookClientConfig - (optional) webhookClientConfig is the instructions for how to call the webhook if strategy is Webhook . Required when strategy is set to Webhook .","title":"CustomResourceConversion"},{"location":"models/apiextensions_v1beta1/#customresourcedefinition","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceDefinition ( spec , apiVersion=None , kind=None , metadata=None , status=None ) CustomResourceDefinition represents a resource that should be exposed on the API server. Its name MUST be in the format <.spec.name>.<.spec.group>. Deprecated in v1.16, planned for removal in v1.19. Use apiextensions.k8s.io/v1 CustomResourceDefinition instead. parameters spec CustomResourceDefinitionSpec - spec describes how the user wants the resources to appear apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status CustomResourceDefinitionStatus - (optional) status indicates the actual state of the CustomResourceDefinition","title":"CustomResourceDefinition"},{"location":"models/apiextensions_v1beta1/#customresourcedefinitioncondition","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) CustomResourceDefinitionCondition contains details for the current condition of this pod. parameters status str - status is the status of the condition. Can be True, False, Unknown. type str - type is the type of the condition. Types include Established, NamesAccepted and Terminating. lastTransitionTime meta_v1.Time - (optional) lastTransitionTime last time the condition transitioned from one status to another. message str - (optional) message is a human-readable message indicating details about last transition. reason str - (optional) reason is a unique, one-word, CamelCase reason for the condition's last transition.","title":"CustomResourceDefinitionCondition"},{"location":"models/apiextensions_v1beta1/#customresourcedefinitionlist","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionList ( items , apiVersion=None , kind=None , metadata=None ) CustomResourceDefinitionList is a list of CustomResourceDefinition objects. parameters items CustomResourceDefinition - items list individual CustomResourceDefinition objects apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional)","title":"CustomResourceDefinitionList"},{"location":"models/apiextensions_v1beta1/#customresourcedefinitionnames","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionNames ( kind , plural , categories=None , listKind=None , shortNames=None , singular=None ) CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition parameters kind str - kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the kind attribute in API calls. plural str - plural is the plural name of the resource to serve. The custom resources are served under /apis/<group>/<version>/.../<plural> . Must match the name of the CustomResourceDefinition (in the form <names.plural>.<group> ). Must be all lowercase. categories List[str] - (optional) categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like kubectl get all . listKind str - (optional) listKind is the serialized kind of the list for this resource. Defaults to \" kind List\". shortNames List[str] - (optional) shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like kubectl get <shortname> . It must be all lowercase. singular str - (optional) singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased kind .","title":"CustomResourceDefinitionNames"},{"location":"models/apiextensions_v1beta1/#customresourcedefinitionspec","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionSpec ( group , names , scope , additionalPrinterColumns=None , conversion=None , preserveUnknownFields=None , subresources=None , validation=None , version=None , versions=None ) CustomResourceDefinitionSpec describes how a user wants their resource to appear parameters group str - group is the API group of the defined custom resource. The custom resources are served under /apis/<group>/... . Must match the name of the CustomResourceDefinition (in the form <names.plural>.<group> ). names CustomResourceDefinitionNames - names specify the resource and kind names for the custom resource. scope str - scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are Cluster and Namespaced . Default is Namespaced . additionalPrinterColumns CustomResourceColumnDefinition - (optional) additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used. conversion CustomResourceConversion - (optional) conversion defines conversion settings for the CRD. preserveUnknownFields bool - (optional) preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. If false, schemas must be defined for all versions. Defaults to true in v1beta for backwards compatibility. Deprecated: will be required to be false in v1. Preservation of unknown fields can be specified in the validation schema using the x-kubernetes-preserve-unknown-fields: true extension. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details. subresources CustomResourceSubresources - (optional) subresources specify what subresources the defined custom resource has. If present, this field configures subresources for all versions. Top-level and per-version subresources are mutually exclusive. validation CustomResourceValidation - (optional) validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive. version str - (optional) version is the API version of the defined custom resource. The custom resources are served under /apis/<group>/<version>/... . Must match the name of the first item in the versions list if version and versions are both specified. Optional if versions is specified. Deprecated: use versions instead. versions CustomResourceDefinitionVersion - (optional) versions is the list of all API versions of the defined custom resource. Optional if version is specified. The name of the first item in the versions list must match the version field if version and versions are both specified. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.","title":"CustomResourceDefinitionSpec"},{"location":"models/apiextensions_v1beta1/#customresourcedefinitionstatus","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionStatus ( acceptedNames=None , conditions=None , storedVersions=None ) CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition parameters acceptedNames CustomResourceDefinitionNames - (optional) acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec. conditions CustomResourceDefinitionCondition - (optional) conditions indicate state for particular aspects of a CustomResourceDefinition storedVersions List[str] - (optional) storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from spec.versions while they exist in this list.","title":"CustomResourceDefinitionStatus"},{"location":"models/apiextensions_v1beta1/#customresourcedefinitionversion","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceDefinitionVersion ( name , served , storage , additionalPrinterColumns=None , schema=None , subresources=None ) CustomResourceDefinitionVersion describes a version for CRD. parameters name str - name is the version name, e.g. \u201cv1\u201d, \u201cv2beta1\u201d, etc. The custom resources are served under this version at /apis/<group>/<version>/... if served is true. served bool - served is a flag enabling/disabling this version from being served via REST APIs storage bool - storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true. additionalPrinterColumns CustomResourceColumnDefinition - (optional) additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. Top-level and per-version columns are mutually exclusive. Per-version columns must not all be set to identical values (top-level columns should be used instead). If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used. schema CustomResourceValidation - (optional) schema describes the schema used for validation and pruning of this version of the custom resource. Top-level and per-version schemas are mutually exclusive. Per-version schemas must not all be set to identical values (top-level validation schema should be used instead). subresources CustomResourceSubresources - (optional) subresources specify what subresources this version of the defined custom resource have. Top-level and per-version subresources are mutually exclusive. Per-version subresources must not all be set to identical values (top-level subresources should be used instead).","title":"CustomResourceDefinitionVersion"},{"location":"models/apiextensions_v1beta1/#customresourcesubresourcescale","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceSubresourceScale ( specReplicasPath , statusReplicasPath , labelSelectorPath=None ) CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources. parameters specReplicasPath str - specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale spec.replicas . Only JSON paths without the array notation are allowed. Must be a JSON Path under .spec . If there is no value under the given path in the custom resource, the /scale subresource will return an error on GET. statusReplicasPath str - statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale status.replicas . Only JSON paths without the array notation are allowed. Must be a JSON Path under .status . If there is no value under the given path in the custom resource, the status.replicas value in the /scale subresource will default to 0. labelSelectorPath str - (optional) labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale status.selector . Only JSON paths without the array notation are allowed. Must be a JSON Path under .status or .spec . Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info If there is no value under the given path in the custom resource, the status.selector value in the /scale subresource will default to the empty string.","title":"CustomResourceSubresourceScale"},{"location":"models/apiextensions_v1beta1/#customresourcesubresourcestatus","text":"","title":"CustomResourceSubresourceStatus"},{"location":"models/apiextensions_v1beta1/#customresourcesubresources","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceSubresources ( scale=None , status=None ) CustomResourceSubresources defines the status and scale subresources for CustomResources. parameters scale CustomResourceSubresourceScale - (optional) scale indicates the custom resource should serve a /scale subresource that returns an autoscaling/v1 Scale object. status CustomResourceSubresourceStatus - (optional) status indicates the custom resource should serve a /status subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the status stanza of the object. 2. requests to the custom resource /status subresource ignore changes to anything other than the status stanza of the object.","title":"CustomResourceSubresources"},{"location":"models/apiextensions_v1beta1/#customresourcevalidation","text":"class lightkube.models.apiextensions_v1beta1. CustomResourceValidation ( openAPIV3Schema=None ) CustomResourceValidation is a list of validation methods for CustomResources. parameters openAPIV3Schema JSONSchemaProps - (optional) openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.","title":"CustomResourceValidation"},{"location":"models/apiextensions_v1beta1/#externaldocumentation","text":"class lightkube.models.apiextensions_v1beta1. ExternalDocumentation ( description=None , url=None ) ExternalDocumentation allows referencing an external resource for extended documentation. parameters description str - (optional) url str - (optional)","title":"ExternalDocumentation"},{"location":"models/apiextensions_v1beta1/#json","text":"","title":"JSON"},{"location":"models/apiextensions_v1beta1/#jsonschemaprops","text":"class lightkube.models.apiextensions_v1beta1. JSONSchemaProps ( d_ref=None , d_schema=None , additionalItems=None , additionalProperties=None , allOf=None , anyOf=None , default=None , definitions=None , dependencies=None , description=None , enum=None , example=None , exclusiveMaximum=None , exclusiveMinimum=None , externalDocs=None , format=None , id=None , items=None , maxItems=None , maxLength=None , maxProperties=None , maximum=None , minItems=None , minLength=None , minProperties=None , minimum=None , multipleOf=None , not_=None , nullable=None , oneOf=None , pattern=None , patternProperties=None , properties=None , required=None , title=None , type=None , uniqueItems=None , x_kubernetes_embedded_resource=None , x_kubernetes_int_or_string=None , x_kubernetes_list_map_keys=None , x_kubernetes_list_type=None , x_kubernetes_map_type=None , x_kubernetes_preserve_unknown_fields=None ) JSONSchemaProps is a JSON-Schema following Specification Draft 4 ( http://json-schema.org/ ). parameters d_ref str - (optional) d_schema str - (optional) additionalItems JSONSchemaPropsOrBool - (optional) additionalProperties JSONSchemaPropsOrBool - (optional) allOf JSONSchemaProps - (optional) anyOf JSONSchemaProps - (optional) default JSON - (optional) default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. CustomResourceDefinitions with defaults must be created using the v1 (or newer) CustomResourceDefinition API. definitions dict - (optional) dependencies dict - (optional) description str - (optional) enum JSON - (optional) example JSON - (optional) exclusiveMaximum bool - (optional) exclusiveMinimum bool - (optional) externalDocs ExternalDocumentation - (optional) format str - (optional) format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated: bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339. id str - (optional) items JSONSchemaPropsOrArray - (optional) maxItems int - (optional) maxLength int - (optional) maxProperties int - (optional) maximum float - (optional) minItems int - (optional) minLength int - (optional) minProperties int - (optional) minimum float - (optional) multipleOf float - (optional) not_ JSONSchemaProps - (optional) nullable bool - (optional) oneOf JSONSchemaProps - (optional) pattern str - (optional) patternProperties dict - (optional) properties dict - (optional) required List[str] - (optional) title str - (optional) type str - (optional) uniqueItems bool - (optional) x_kubernetes_embedded_resource bool - (optional) x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata). x_kubernetes_int_or_string bool - (optional) x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns: 1) anyOf: type: integer type: string 2) allOf: anyOf: type: integer type: string ... zero or more x_kubernetes_list_map_keys List[str] - (optional) x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type map by specifying the keys used as the index of the map. This tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported). The properties specified must either be required or have a default value, to ensure those properties are present for all list items. x_kubernetes_list_type str - (optional) x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values: 1) atomic : the list is treated as a single entity, like a scalar. Atomic lists will be entirely replaced when updated. This extension may be used on any type of list (struct, scalar, ...). 2) set : Sets are lists that must not have multiple items with the same value. Each value must be a scalar, an object with x-kubernetes-map-type atomic or an array with x-kubernetes-list-type atomic . 3) map : These lists are like maps in that their elements have a non-index key used to identify them. Order is preserved upon merge. The map tag must only be used on a list with elements of type object. Defaults to atomic for arrays. x_kubernetes_map_type str - (optional) x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values: 1) granular : These maps are actual maps (key-value pairs) and each fields are independent from each other (they can each be manipulated by separate actors). This is the default behaviour for all maps. 2) atomic : the list is treated as a single entity, like a scalar. Atomic maps will be entirely replaced when updated. x_kubernetes_preserve_unknown_fields bool - (optional) x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.","title":"JSONSchemaProps"},{"location":"models/apiextensions_v1beta1/#jsonschemapropsorarray","text":"","title":"JSONSchemaPropsOrArray"},{"location":"models/apiextensions_v1beta1/#jsonschemapropsorbool","text":"","title":"JSONSchemaPropsOrBool"},{"location":"models/apiextensions_v1beta1/#jsonschemapropsorstringarray","text":"","title":"JSONSchemaPropsOrStringArray"},{"location":"models/apiextensions_v1beta1/#servicereference","text":"class lightkube.models.apiextensions_v1beta1. ServiceReference ( name , namespace , path=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - name is the name of the service. Required namespace str - namespace is the namespace of the service. Required path str - (optional) path is an optional URL path at which the webhook will be contacted. port int - (optional) port is an optional service port at which the webhook will be contacted. port should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.","title":"ServiceReference"},{"location":"models/apiextensions_v1beta1/#webhookclientconfig","text":"class lightkube.models.apiextensions_v1beta1. WebhookClientConfig ( caBundle=None , service=None , url=None ) WebhookClientConfig contains the information to make a TLS connection with the webhook. parameters caBundle str - (optional) caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used. service ServiceReference - (optional) service is a reference to the service for this webhook. Either service or url must be specified. If the webhook is running within the cluster, then you should use service . url str - (optional) url gives the location of the webhook, in standard URL form ( scheme://host:port/path ). Exactly one of url or service must be specified. The host should not refer to a service running in the cluster; use the service field instead. The host might be resolved via external DNS in some apiservers (e.g., kube-apiserver cannot resolve in-cluster DNS as that would be a layering violation). host may also be an IP address. Please note that using localhost or 127.0.0.1 as a host is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be \"https\"; the URL must begin with \"https://\". A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.","title":"WebhookClientConfig"},{"location":"models/apiregistration_v1/","text":"apiregistration_v1 APIService class lightkube.models.apiregistration_v1. APIService ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) APIService represents a server for a particular GroupVersion. Name must be \"version.group\". parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec APIServiceSpec - (optional) Spec contains information for locating and communicating with a server status APIServiceStatus - (optional) Status contains derived information about an API server APIServiceCondition class lightkube.models.apiregistration_v1. APIServiceCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) APIServiceCondition describes the state of an APIService at a particular point parameters status str - Status is the status of the condition. Can be True, False, Unknown. type str - Type is the type of the condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) Human-readable message indicating details about last transition. reason str - (optional) Unique, one-word, CamelCase reason for the condition's last transition. APIServiceList class lightkube.models.apiregistration_v1. APIServiceList ( items , apiVersion=None , kind=None , metadata=None ) APIServiceList is a list of APIService objects. parameters items APIService - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) APIServiceSpec class lightkube.models.apiregistration_v1. APIServiceSpec ( groupPriorityMinimum , versionPriority , caBundle=None , group=None , insecureSkipTLSVerify=None , service=None , version=None ) APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification. parameters groupPriorityMinimum int - GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object. (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s versionPriority int - VersionPriority controls the ordering of this API version inside of its group. Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10. caBundle str - (optional) CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used. group str - (optional) Group is the API group name this server hosts insecureSkipTLSVerify bool - (optional) InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged. You should use the CABundle instead. service ServiceReference - (optional) Service is a reference to the service for this API server. It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled. version str - (optional) Version is the API version this server hosts. For example, \"v1\" APIServiceStatus class lightkube.models.apiregistration_v1. APIServiceStatus ( conditions=None ) APIServiceStatus contains derived information about an API server parameters conditions APIServiceCondition - (optional) Current service state of apiService. ServiceReference class lightkube.models.apiregistration_v1. ServiceReference ( name=None , namespace=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - (optional) Name is the name of the service namespace str - (optional) Namespace is the namespace of the service port int - (optional) If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. port should be a valid port number (1-65535, inclusive).","title":"apiregistration_v1"},{"location":"models/apiregistration_v1/#apiregistration_v1","text":"","title":"apiregistration_v1"},{"location":"models/apiregistration_v1/#apiservice","text":"class lightkube.models.apiregistration_v1. APIService ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) APIService represents a server for a particular GroupVersion. Name must be \"version.group\". parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec APIServiceSpec - (optional) Spec contains information for locating and communicating with a server status APIServiceStatus - (optional) Status contains derived information about an API server","title":"APIService"},{"location":"models/apiregistration_v1/#apiservicecondition","text":"class lightkube.models.apiregistration_v1. APIServiceCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) APIServiceCondition describes the state of an APIService at a particular point parameters status str - Status is the status of the condition. Can be True, False, Unknown. type str - Type is the type of the condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) Human-readable message indicating details about last transition. reason str - (optional) Unique, one-word, CamelCase reason for the condition's last transition.","title":"APIServiceCondition"},{"location":"models/apiregistration_v1/#apiservicelist","text":"class lightkube.models.apiregistration_v1. APIServiceList ( items , apiVersion=None , kind=None , metadata=None ) APIServiceList is a list of APIService objects. parameters items APIService - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional)","title":"APIServiceList"},{"location":"models/apiregistration_v1/#apiservicespec","text":"class lightkube.models.apiregistration_v1. APIServiceSpec ( groupPriorityMinimum , versionPriority , caBundle=None , group=None , insecureSkipTLSVerify=None , service=None , version=None ) APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification. parameters groupPriorityMinimum int - GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object. (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s versionPriority int - VersionPriority controls the ordering of this API version inside of its group. Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10. caBundle str - (optional) CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used. group str - (optional) Group is the API group name this server hosts insecureSkipTLSVerify bool - (optional) InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged. You should use the CABundle instead. service ServiceReference - (optional) Service is a reference to the service for this API server. It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled. version str - (optional) Version is the API version this server hosts. For example, \"v1\"","title":"APIServiceSpec"},{"location":"models/apiregistration_v1/#apiservicestatus","text":"class lightkube.models.apiregistration_v1. APIServiceStatus ( conditions=None ) APIServiceStatus contains derived information about an API server parameters conditions APIServiceCondition - (optional) Current service state of apiService.","title":"APIServiceStatus"},{"location":"models/apiregistration_v1/#servicereference","text":"class lightkube.models.apiregistration_v1. ServiceReference ( name=None , namespace=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - (optional) Name is the name of the service namespace str - (optional) Namespace is the namespace of the service port int - (optional) If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. port should be a valid port number (1-65535, inclusive).","title":"ServiceReference"},{"location":"models/apiregistration_v1beta1/","text":"apiregistration_v1beta1 APIService class lightkube.models.apiregistration_v1beta1. APIService ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) APIService represents a server for a particular GroupVersion. Name must be \"version.group\". parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec APIServiceSpec - (optional) Spec contains information for locating and communicating with a server status APIServiceStatus - (optional) Status contains derived information about an API server APIServiceCondition class lightkube.models.apiregistration_v1beta1. APIServiceCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) APIServiceCondition describes the state of an APIService at a particular point parameters status str - Status is the status of the condition. Can be True, False, Unknown. type str - Type is the type of the condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) Human-readable message indicating details about last transition. reason str - (optional) Unique, one-word, CamelCase reason for the condition's last transition. APIServiceList class lightkube.models.apiregistration_v1beta1. APIServiceList ( items , apiVersion=None , kind=None , metadata=None ) APIServiceList is a list of APIService objects. parameters items APIService - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) APIServiceSpec class lightkube.models.apiregistration_v1beta1. APIServiceSpec ( groupPriorityMinimum , versionPriority , caBundle=None , group=None , insecureSkipTLSVerify=None , service=None , version=None ) APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification. parameters groupPriorityMinimum int - GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object. (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s versionPriority int - VersionPriority controls the ordering of this API version inside of its group. Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10. caBundle str - (optional) CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used. group str - (optional) Group is the API group name this server hosts insecureSkipTLSVerify bool - (optional) InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged. You should use the CABundle instead. service ServiceReference - (optional) Service is a reference to the service for this API server. It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled. version str - (optional) Version is the API version this server hosts. For example, \"v1\" APIServiceStatus class lightkube.models.apiregistration_v1beta1. APIServiceStatus ( conditions=None ) APIServiceStatus contains derived information about an API server parameters conditions APIServiceCondition - (optional) Current service state of apiService. ServiceReference class lightkube.models.apiregistration_v1beta1. ServiceReference ( name=None , namespace=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - (optional) Name is the name of the service namespace str - (optional) Namespace is the namespace of the service port int - (optional) If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. port should be a valid port number (1-65535, inclusive).","title":"apiregistration_v1beta1"},{"location":"models/apiregistration_v1beta1/#apiregistration_v1beta1","text":"","title":"apiregistration_v1beta1"},{"location":"models/apiregistration_v1beta1/#apiservice","text":"class lightkube.models.apiregistration_v1beta1. APIService ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) APIService represents a server for a particular GroupVersion. Name must be \"version.group\". parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec APIServiceSpec - (optional) Spec contains information for locating and communicating with a server status APIServiceStatus - (optional) Status contains derived information about an API server","title":"APIService"},{"location":"models/apiregistration_v1beta1/#apiservicecondition","text":"class lightkube.models.apiregistration_v1beta1. APIServiceCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) APIServiceCondition describes the state of an APIService at a particular point parameters status str - Status is the status of the condition. Can be True, False, Unknown. type str - Type is the type of the condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) Human-readable message indicating details about last transition. reason str - (optional) Unique, one-word, CamelCase reason for the condition's last transition.","title":"APIServiceCondition"},{"location":"models/apiregistration_v1beta1/#apiservicelist","text":"class lightkube.models.apiregistration_v1beta1. APIServiceList ( items , apiVersion=None , kind=None , metadata=None ) APIServiceList is a list of APIService objects. parameters items APIService - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional)","title":"APIServiceList"},{"location":"models/apiregistration_v1beta1/#apiservicespec","text":"class lightkube.models.apiregistration_v1beta1. APIServiceSpec ( groupPriorityMinimum , versionPriority , caBundle=None , group=None , insecureSkipTLSVerify=None , service=None , version=None ) APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification. parameters groupPriorityMinimum int - GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object. (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s versionPriority int - VersionPriority controls the ordering of this API version inside of its group. Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10. caBundle str - (optional) CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used. group str - (optional) Group is the API group name this server hosts insecureSkipTLSVerify bool - (optional) InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged. You should use the CABundle instead. service ServiceReference - (optional) Service is a reference to the service for this API server. It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled. version str - (optional) Version is the API version this server hosts. For example, \"v1\"","title":"APIServiceSpec"},{"location":"models/apiregistration_v1beta1/#apiservicestatus","text":"class lightkube.models.apiregistration_v1beta1. APIServiceStatus ( conditions=None ) APIServiceStatus contains derived information about an API server parameters conditions APIServiceCondition - (optional) Current service state of apiService.","title":"APIServiceStatus"},{"location":"models/apiregistration_v1beta1/#servicereference","text":"class lightkube.models.apiregistration_v1beta1. ServiceReference ( name=None , namespace=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - (optional) Name is the name of the service namespace str - (optional) Namespace is the namespace of the service port int - (optional) If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. port should be a valid port number (1-65535, inclusive).","title":"ServiceReference"},{"location":"models/apps_v1/","text":"apps_v1 ControllerRevision class lightkube.models.apps_v1. ControllerRevision ( revision , apiVersion=None , data=None , kind=None , metadata=None ) ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers. parameters revision int - Revision indicates the revision of the state represented by Data. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info data runtime.RawExtension - (optional) Data is the serialized representation of the state. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info ControllerRevisionList class lightkube.models.apps_v1. ControllerRevisionList ( items , apiVersion=None , kind=None , metadata=None ) ControllerRevisionList is a resource containing a list of ControllerRevision objects. parameters items ControllerRevision - Items is the list of ControllerRevisions apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) More info DaemonSet class lightkube.models.apps_v1. DaemonSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) DaemonSet represents the configuration of a daemon set. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec DaemonSetSpec - (optional) The desired behavior of this daemon set. More info status DaemonSetStatus - (optional) The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info DaemonSetCondition class lightkube.models.apps_v1. DaemonSetCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) DaemonSetCondition describes the state of a DaemonSet at a certain point. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of DaemonSet condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) A human readable message indicating details about the transition. reason str - (optional) The reason for the condition's last transition. DaemonSetList class lightkube.models.apps_v1. DaemonSetList ( items , apiVersion=None , kind=None , metadata=None ) DaemonSetList is a collection of daemon sets. parameters items DaemonSet - A list of daemon sets. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info DaemonSetSpec class lightkube.models.apps_v1. DaemonSetSpec ( selector , template , minReadySeconds=None , revisionHistoryLimit=None , updateStrategy=None ) DaemonSetSpec is the specification of a daemon set. parameters selector meta_v1.LabelSelector - A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info template core_v1.PodTemplateSpec - An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info minReadySeconds int - (optional) The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready). revisionHistoryLimit int - (optional) The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10. updateStrategy DaemonSetUpdateStrategy - (optional) An update strategy to replace existing DaemonSet pods with new pods. DaemonSetStatus class lightkube.models.apps_v1. DaemonSetStatus ( currentNumberScheduled , desiredNumberScheduled , numberMisscheduled , numberReady , collisionCount=None , conditions=None , numberAvailable=None , numberUnavailable=None , observedGeneration=None , updatedNumberScheduled=None ) DaemonSetStatus represents the current status of a daemon set. parameters currentNumberScheduled int - The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info desiredNumberScheduled int - The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info numberMisscheduled int - The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info numberReady int - The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready. collisionCount int - (optional) Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision. conditions DaemonSetCondition - (optional) Represents the latest available observations of a DaemonSet's current state. numberAvailable int - (optional) The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds) numberUnavailable int - (optional) The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds) observedGeneration int - (optional) The most recent generation observed by the daemon set controller. updatedNumberScheduled int - (optional) The total number of nodes that are running updated daemon pod DaemonSetUpdateStrategy class lightkube.models.apps_v1. DaemonSetUpdateStrategy ( rollingUpdate=None , type=None ) DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet. parameters rollingUpdate RollingUpdateDaemonSet - (optional) Rolling update config params. Present only if type = \"RollingUpdate\". type str - (optional) Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate. Deployment class lightkube.models.apps_v1. Deployment ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Deployment enables declarative updates for Pods and ReplicaSets. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. spec DeploymentSpec - (optional) Specification of the desired behavior of the Deployment. status DeploymentStatus - (optional) Most recently observed status of the Deployment. DeploymentCondition class lightkube.models.apps_v1. DeploymentCondition ( status , type , lastTransitionTime=None , lastUpdateTime=None , message=None , reason=None ) DeploymentCondition describes the state of a deployment at a certain point. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of deployment condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. lastUpdateTime meta_v1.Time - (optional) The last time this condition was updated. message str - (optional) A human readable message indicating details about the transition. reason str - (optional) The reason for the condition's last transition. DeploymentList class lightkube.models.apps_v1. DeploymentList ( items , apiVersion=None , kind=None , metadata=None ) DeploymentList is a list of Deployments. parameters items Deployment - Items is the list of Deployments. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. DeploymentSpec class lightkube.models.apps_v1. DeploymentSpec ( selector , template , minReadySeconds=None , paused=None , progressDeadlineSeconds=None , replicas=None , revisionHistoryLimit=None , strategy=None ) DeploymentSpec is the specification of the desired behavior of the Deployment. parameters selector meta_v1.LabelSelector - Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels. template core_v1.PodTemplateSpec - Template describes the pods that will be created. minReadySeconds int - (optional) Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) paused bool - (optional) Indicates that the deployment is paused. progressDeadlineSeconds int - (optional) The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s. replicas int - (optional) Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. revisionHistoryLimit int - (optional) The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10. strategy DeploymentStrategy - (optional) The deployment strategy to use to replace existing pods with new ones. DeploymentStatus class lightkube.models.apps_v1. DeploymentStatus ( availableReplicas=None , collisionCount=None , conditions=None , observedGeneration=None , readyReplicas=None , replicas=None , unavailableReplicas=None , updatedReplicas=None ) DeploymentStatus is the most recently observed status of the Deployment. parameters availableReplicas int - (optional) Total number of available pods (ready for at least minReadySeconds) targeted by this deployment. collisionCount int - (optional) Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet. conditions DeploymentCondition - (optional) Represents the latest available observations of a deployment's current state. observedGeneration int - (optional) The generation observed by the deployment controller. readyReplicas int - (optional) Total number of ready pods targeted by this deployment. replicas int - (optional) Total number of non-terminated pods targeted by this deployment (their labels match the selector). unavailableReplicas int - (optional) Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created. updatedReplicas int - (optional) Total number of non-terminated pods targeted by this deployment that have the desired template spec. DeploymentStrategy class lightkube.models.apps_v1. DeploymentStrategy ( rollingUpdate=None , type=None ) DeploymentStrategy describes how to replace existing pods with new ones. parameters rollingUpdate RollingUpdateDeployment - (optional) Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. type str - (optional) Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate. ReplicaSet class lightkube.models.apps_v1. ReplicaSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) ReplicaSet ensures that a specified number of pod replicas are running at any given time. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info spec ReplicaSetSpec - (optional) Spec defines the specification of the desired behavior of the ReplicaSet. More info status ReplicaSetStatus - (optional) Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info ReplicaSetCondition class lightkube.models.apps_v1. ReplicaSetCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) ReplicaSetCondition describes the state of a replica set at a certain point. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of replica set condition. lastTransitionTime meta_v1.Time - (optional) The last time the condition transitioned from one status to another. message str - (optional) A human readable message indicating details about the transition. reason str - (optional) The reason for the condition's last transition. ReplicaSetList class lightkube.models.apps_v1. ReplicaSetList ( items , apiVersion=None , kind=None , metadata=None ) ReplicaSetList is a collection of ReplicaSets. parameters items ReplicaSet - List of ReplicaSets. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info ReplicaSetSpec class lightkube.models.apps_v1. ReplicaSetSpec ( selector , minReadySeconds=None , replicas=None , template=None ) ReplicaSetSpec is the specification of a ReplicaSet. parameters selector meta_v1.LabelSelector - Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info minReadySeconds int - (optional) Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) replicas int - (optional) Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info template core_v1.PodTemplateSpec - (optional) Template is the object that describes the pod that will be created if insufficient replicas are detected. More info ReplicaSetStatus class lightkube.models.apps_v1. ReplicaSetStatus ( replicas , availableReplicas=None , conditions=None , fullyLabeledReplicas=None , observedGeneration=None , readyReplicas=None ) ReplicaSetStatus represents the current status of a ReplicaSet. parameters replicas int - Replicas is the most recently oberved number of replicas. More info availableReplicas int - (optional) The number of available replicas (ready for at least minReadySeconds) for this replica set. conditions ReplicaSetCondition - (optional) Represents the latest available observations of a replica set's current state. fullyLabeledReplicas int - (optional) The number of pods that have labels matching the labels of the pod template of the replicaset. observedGeneration int - (optional) ObservedGeneration reflects the generation of the most recently observed ReplicaSet. readyReplicas int - (optional) The number of ready replicas for this replica set. RollingUpdateDaemonSet class lightkube.models.apps_v1. RollingUpdateDaemonSet ( maxUnavailable=None ) Spec to control the desired behavior of daemon set rolling update. parameters maxUnavailable util_intstr.IntOrString - (optional) The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update. RollingUpdateDeployment class lightkube.models.apps_v1. RollingUpdateDeployment ( maxSurge=None , maxUnavailable=None ) Spec to control the desired behavior of rolling update. parameters maxSurge util_intstr.IntOrString - (optional) The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods. maxUnavailable util_intstr.IntOrString - (optional) The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods. RollingUpdateStatefulSetStrategy class lightkube.models.apps_v1. RollingUpdateStatefulSetStrategy ( partition=None ) RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType. parameters partition int - (optional) Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0. StatefulSet class lightkube.models.apps_v1. StatefulSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) StatefulSet represents a set of pods with consistent identities. Identities are defined as: - Network: A single stable DNS and hostname. - Storage: As many VolumeClaims as requested. The StatefulSet guarantees that a given network identity will always map to the same storage identity. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec StatefulSetSpec - (optional) Spec defines the desired identities of pods in this set. status StatefulSetStatus - (optional) Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time. StatefulSetCondition class lightkube.models.apps_v1. StatefulSetCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) StatefulSetCondition describes the state of a statefulset at a certain point. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of statefulset condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) A human readable message indicating details about the transition. reason str - (optional) The reason for the condition's last transition. StatefulSetList class lightkube.models.apps_v1. StatefulSetList ( items , apiVersion=None , kind=None , metadata=None ) StatefulSetList is a collection of StatefulSets. parameters items StatefulSet - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) StatefulSetSpec class lightkube.models.apps_v1. StatefulSetSpec ( selector , serviceName , template , podManagementPolicy=None , replicas=None , revisionHistoryLimit=None , updateStrategy=None , volumeClaimTemplates=None ) A StatefulSetSpec is the specification of a StatefulSet. parameters selector meta_v1.LabelSelector - selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info serviceName str - serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller. template core_v1.PodTemplateSpec - template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet. podManagementPolicy str - (optional) podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is OrderedReady , where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is Parallel which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once. replicas int - (optional) replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1. revisionHistoryLimit int - (optional) revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10. updateStrategy StatefulSetUpdateStrategy - (optional) updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template. volumeClaimTemplates core_v1.PersistentVolumeClaim - (optional) volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. StatefulSetStatus class lightkube.models.apps_v1. StatefulSetStatus ( replicas , collisionCount=None , conditions=None , currentReplicas=None , currentRevision=None , observedGeneration=None , readyReplicas=None , updateRevision=None , updatedReplicas=None ) StatefulSetStatus represents the current state of a StatefulSet. parameters replicas int - replicas is the number of Pods created by the StatefulSet controller. collisionCount int - (optional) collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision. conditions StatefulSetCondition - (optional) Represents the latest available observations of a statefulset's current state. currentReplicas int - (optional) currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision. currentRevision str - (optional) currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas). observedGeneration int - (optional) observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server. readyReplicas int - (optional) readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition. updateRevision str - (optional) updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas) updatedReplicas int - (optional) updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision. StatefulSetUpdateStrategy class lightkube.models.apps_v1. StatefulSetUpdateStrategy ( rollingUpdate=None , type=None ) StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy. parameters rollingUpdate RollingUpdateStatefulSetStrategy - (optional) RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType. type str - (optional) Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.","title":"apps_v1"},{"location":"models/apps_v1/#apps_v1","text":"","title":"apps_v1"},{"location":"models/apps_v1/#controllerrevision","text":"class lightkube.models.apps_v1. ControllerRevision ( revision , apiVersion=None , data=None , kind=None , metadata=None ) ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers. parameters revision int - Revision indicates the revision of the state represented by Data. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info data runtime.RawExtension - (optional) Data is the serialized representation of the state. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info","title":"ControllerRevision"},{"location":"models/apps_v1/#controllerrevisionlist","text":"class lightkube.models.apps_v1. ControllerRevisionList ( items , apiVersion=None , kind=None , metadata=None ) ControllerRevisionList is a resource containing a list of ControllerRevision objects. parameters items ControllerRevision - Items is the list of ControllerRevisions apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) More info","title":"ControllerRevisionList"},{"location":"models/apps_v1/#daemonset","text":"class lightkube.models.apps_v1. DaemonSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) DaemonSet represents the configuration of a daemon set. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec DaemonSetSpec - (optional) The desired behavior of this daemon set. More info status DaemonSetStatus - (optional) The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info","title":"DaemonSet"},{"location":"models/apps_v1/#daemonsetcondition","text":"class lightkube.models.apps_v1. DaemonSetCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) DaemonSetCondition describes the state of a DaemonSet at a certain point. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of DaemonSet condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) A human readable message indicating details about the transition. reason str - (optional) The reason for the condition's last transition.","title":"DaemonSetCondition"},{"location":"models/apps_v1/#daemonsetlist","text":"class lightkube.models.apps_v1. DaemonSetList ( items , apiVersion=None , kind=None , metadata=None ) DaemonSetList is a collection of daemon sets. parameters items DaemonSet - A list of daemon sets. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"DaemonSetList"},{"location":"models/apps_v1/#daemonsetspec","text":"class lightkube.models.apps_v1. DaemonSetSpec ( selector , template , minReadySeconds=None , revisionHistoryLimit=None , updateStrategy=None ) DaemonSetSpec is the specification of a daemon set. parameters selector meta_v1.LabelSelector - A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info template core_v1.PodTemplateSpec - An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info minReadySeconds int - (optional) The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready). revisionHistoryLimit int - (optional) The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10. updateStrategy DaemonSetUpdateStrategy - (optional) An update strategy to replace existing DaemonSet pods with new pods.","title":"DaemonSetSpec"},{"location":"models/apps_v1/#daemonsetstatus","text":"class lightkube.models.apps_v1. DaemonSetStatus ( currentNumberScheduled , desiredNumberScheduled , numberMisscheduled , numberReady , collisionCount=None , conditions=None , numberAvailable=None , numberUnavailable=None , observedGeneration=None , updatedNumberScheduled=None ) DaemonSetStatus represents the current status of a daemon set. parameters currentNumberScheduled int - The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info desiredNumberScheduled int - The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info numberMisscheduled int - The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info numberReady int - The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready. collisionCount int - (optional) Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision. conditions DaemonSetCondition - (optional) Represents the latest available observations of a DaemonSet's current state. numberAvailable int - (optional) The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds) numberUnavailable int - (optional) The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds) observedGeneration int - (optional) The most recent generation observed by the daemon set controller. updatedNumberScheduled int - (optional) The total number of nodes that are running updated daemon pod","title":"DaemonSetStatus"},{"location":"models/apps_v1/#daemonsetupdatestrategy","text":"class lightkube.models.apps_v1. DaemonSetUpdateStrategy ( rollingUpdate=None , type=None ) DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet. parameters rollingUpdate RollingUpdateDaemonSet - (optional) Rolling update config params. Present only if type = \"RollingUpdate\". type str - (optional) Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.","title":"DaemonSetUpdateStrategy"},{"location":"models/apps_v1/#deployment","text":"class lightkube.models.apps_v1. Deployment ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Deployment enables declarative updates for Pods and ReplicaSets. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. spec DeploymentSpec - (optional) Specification of the desired behavior of the Deployment. status DeploymentStatus - (optional) Most recently observed status of the Deployment.","title":"Deployment"},{"location":"models/apps_v1/#deploymentcondition","text":"class lightkube.models.apps_v1. DeploymentCondition ( status , type , lastTransitionTime=None , lastUpdateTime=None , message=None , reason=None ) DeploymentCondition describes the state of a deployment at a certain point. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of deployment condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. lastUpdateTime meta_v1.Time - (optional) The last time this condition was updated. message str - (optional) A human readable message indicating details about the transition. reason str - (optional) The reason for the condition's last transition.","title":"DeploymentCondition"},{"location":"models/apps_v1/#deploymentlist","text":"class lightkube.models.apps_v1. DeploymentList ( items , apiVersion=None , kind=None , metadata=None ) DeploymentList is a list of Deployments. parameters items Deployment - Items is the list of Deployments. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata.","title":"DeploymentList"},{"location":"models/apps_v1/#deploymentspec","text":"class lightkube.models.apps_v1. DeploymentSpec ( selector , template , minReadySeconds=None , paused=None , progressDeadlineSeconds=None , replicas=None , revisionHistoryLimit=None , strategy=None ) DeploymentSpec is the specification of the desired behavior of the Deployment. parameters selector meta_v1.LabelSelector - Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels. template core_v1.PodTemplateSpec - Template describes the pods that will be created. minReadySeconds int - (optional) Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) paused bool - (optional) Indicates that the deployment is paused. progressDeadlineSeconds int - (optional) The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s. replicas int - (optional) Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. revisionHistoryLimit int - (optional) The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10. strategy DeploymentStrategy - (optional) The deployment strategy to use to replace existing pods with new ones.","title":"DeploymentSpec"},{"location":"models/apps_v1/#deploymentstatus","text":"class lightkube.models.apps_v1. DeploymentStatus ( availableReplicas=None , collisionCount=None , conditions=None , observedGeneration=None , readyReplicas=None , replicas=None , unavailableReplicas=None , updatedReplicas=None ) DeploymentStatus is the most recently observed status of the Deployment. parameters availableReplicas int - (optional) Total number of available pods (ready for at least minReadySeconds) targeted by this deployment. collisionCount int - (optional) Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet. conditions DeploymentCondition - (optional) Represents the latest available observations of a deployment's current state. observedGeneration int - (optional) The generation observed by the deployment controller. readyReplicas int - (optional) Total number of ready pods targeted by this deployment. replicas int - (optional) Total number of non-terminated pods targeted by this deployment (their labels match the selector). unavailableReplicas int - (optional) Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created. updatedReplicas int - (optional) Total number of non-terminated pods targeted by this deployment that have the desired template spec.","title":"DeploymentStatus"},{"location":"models/apps_v1/#deploymentstrategy","text":"class lightkube.models.apps_v1. DeploymentStrategy ( rollingUpdate=None , type=None ) DeploymentStrategy describes how to replace existing pods with new ones. parameters rollingUpdate RollingUpdateDeployment - (optional) Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. type str - (optional) Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.","title":"DeploymentStrategy"},{"location":"models/apps_v1/#replicaset","text":"class lightkube.models.apps_v1. ReplicaSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) ReplicaSet ensures that a specified number of pod replicas are running at any given time. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info spec ReplicaSetSpec - (optional) Spec defines the specification of the desired behavior of the ReplicaSet. More info status ReplicaSetStatus - (optional) Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info","title":"ReplicaSet"},{"location":"models/apps_v1/#replicasetcondition","text":"class lightkube.models.apps_v1. ReplicaSetCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) ReplicaSetCondition describes the state of a replica set at a certain point. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of replica set condition. lastTransitionTime meta_v1.Time - (optional) The last time the condition transitioned from one status to another. message str - (optional) A human readable message indicating details about the transition. reason str - (optional) The reason for the condition's last transition.","title":"ReplicaSetCondition"},{"location":"models/apps_v1/#replicasetlist","text":"class lightkube.models.apps_v1. ReplicaSetList ( items , apiVersion=None , kind=None , metadata=None ) ReplicaSetList is a collection of ReplicaSets. parameters items ReplicaSet - List of ReplicaSets. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"ReplicaSetList"},{"location":"models/apps_v1/#replicasetspec","text":"class lightkube.models.apps_v1. ReplicaSetSpec ( selector , minReadySeconds=None , replicas=None , template=None ) ReplicaSetSpec is the specification of a ReplicaSet. parameters selector meta_v1.LabelSelector - Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info minReadySeconds int - (optional) Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) replicas int - (optional) Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info template core_v1.PodTemplateSpec - (optional) Template is the object that describes the pod that will be created if insufficient replicas are detected. More info","title":"ReplicaSetSpec"},{"location":"models/apps_v1/#replicasetstatus","text":"class lightkube.models.apps_v1. ReplicaSetStatus ( replicas , availableReplicas=None , conditions=None , fullyLabeledReplicas=None , observedGeneration=None , readyReplicas=None ) ReplicaSetStatus represents the current status of a ReplicaSet. parameters replicas int - Replicas is the most recently oberved number of replicas. More info availableReplicas int - (optional) The number of available replicas (ready for at least minReadySeconds) for this replica set. conditions ReplicaSetCondition - (optional) Represents the latest available observations of a replica set's current state. fullyLabeledReplicas int - (optional) The number of pods that have labels matching the labels of the pod template of the replicaset. observedGeneration int - (optional) ObservedGeneration reflects the generation of the most recently observed ReplicaSet. readyReplicas int - (optional) The number of ready replicas for this replica set.","title":"ReplicaSetStatus"},{"location":"models/apps_v1/#rollingupdatedaemonset","text":"class lightkube.models.apps_v1. RollingUpdateDaemonSet ( maxUnavailable=None ) Spec to control the desired behavior of daemon set rolling update. parameters maxUnavailable util_intstr.IntOrString - (optional) The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.","title":"RollingUpdateDaemonSet"},{"location":"models/apps_v1/#rollingupdatedeployment","text":"class lightkube.models.apps_v1. RollingUpdateDeployment ( maxSurge=None , maxUnavailable=None ) Spec to control the desired behavior of rolling update. parameters maxSurge util_intstr.IntOrString - (optional) The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods. maxUnavailable util_intstr.IntOrString - (optional) The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.","title":"RollingUpdateDeployment"},{"location":"models/apps_v1/#rollingupdatestatefulsetstrategy","text":"class lightkube.models.apps_v1. RollingUpdateStatefulSetStrategy ( partition=None ) RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType. parameters partition int - (optional) Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.","title":"RollingUpdateStatefulSetStrategy"},{"location":"models/apps_v1/#statefulset","text":"class lightkube.models.apps_v1. StatefulSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) StatefulSet represents a set of pods with consistent identities. Identities are defined as: - Network: A single stable DNS and hostname. - Storage: As many VolumeClaims as requested. The StatefulSet guarantees that a given network identity will always map to the same storage identity. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec StatefulSetSpec - (optional) Spec defines the desired identities of pods in this set. status StatefulSetStatus - (optional) Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.","title":"StatefulSet"},{"location":"models/apps_v1/#statefulsetcondition","text":"class lightkube.models.apps_v1. StatefulSetCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) StatefulSetCondition describes the state of a statefulset at a certain point. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of statefulset condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) A human readable message indicating details about the transition. reason str - (optional) The reason for the condition's last transition.","title":"StatefulSetCondition"},{"location":"models/apps_v1/#statefulsetlist","text":"class lightkube.models.apps_v1. StatefulSetList ( items , apiVersion=None , kind=None , metadata=None ) StatefulSetList is a collection of StatefulSets. parameters items StatefulSet - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional)","title":"StatefulSetList"},{"location":"models/apps_v1/#statefulsetspec","text":"class lightkube.models.apps_v1. StatefulSetSpec ( selector , serviceName , template , podManagementPolicy=None , replicas=None , revisionHistoryLimit=None , updateStrategy=None , volumeClaimTemplates=None ) A StatefulSetSpec is the specification of a StatefulSet. parameters selector meta_v1.LabelSelector - selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info serviceName str - serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller. template core_v1.PodTemplateSpec - template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet. podManagementPolicy str - (optional) podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is OrderedReady , where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is Parallel which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once. replicas int - (optional) replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1. revisionHistoryLimit int - (optional) revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10. updateStrategy StatefulSetUpdateStrategy - (optional) updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template. volumeClaimTemplates core_v1.PersistentVolumeClaim - (optional) volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.","title":"StatefulSetSpec"},{"location":"models/apps_v1/#statefulsetstatus","text":"class lightkube.models.apps_v1. StatefulSetStatus ( replicas , collisionCount=None , conditions=None , currentReplicas=None , currentRevision=None , observedGeneration=None , readyReplicas=None , updateRevision=None , updatedReplicas=None ) StatefulSetStatus represents the current state of a StatefulSet. parameters replicas int - replicas is the number of Pods created by the StatefulSet controller. collisionCount int - (optional) collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision. conditions StatefulSetCondition - (optional) Represents the latest available observations of a statefulset's current state. currentReplicas int - (optional) currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision. currentRevision str - (optional) currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas). observedGeneration int - (optional) observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server. readyReplicas int - (optional) readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition. updateRevision str - (optional) updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas) updatedReplicas int - (optional) updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.","title":"StatefulSetStatus"},{"location":"models/apps_v1/#statefulsetupdatestrategy","text":"class lightkube.models.apps_v1. StatefulSetUpdateStrategy ( rollingUpdate=None , type=None ) StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy. parameters rollingUpdate RollingUpdateStatefulSetStrategy - (optional) RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType. type str - (optional) Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.","title":"StatefulSetUpdateStrategy"},{"location":"models/auditregistration_v1alpha1/","text":"auditregistration_v1alpha1 AuditSink class lightkube.models.auditregistration_v1alpha1. AuditSink ( apiVersion=None , kind=None , metadata=None , spec=None ) AuditSink represents a cluster level audit sink parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec AuditSinkSpec - (optional) Spec defines the audit configuration spec AuditSinkList class lightkube.models.auditregistration_v1alpha1. AuditSinkList ( items , apiVersion=None , kind=None , metadata=None ) AuditSinkList is a list of AuditSink items. parameters items AuditSink - List of audit configurations. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) AuditSinkSpec class lightkube.models.auditregistration_v1alpha1. AuditSinkSpec ( policy , webhook ) AuditSinkSpec holds the spec for the audit sink parameters policy Policy - Policy defines the policy for selecting which events should be sent to the webhook required webhook Webhook - Webhook to send events required Policy class lightkube.models.auditregistration_v1alpha1. Policy ( level , stages=None ) Policy defines the configuration of how audit events are logged parameters level str - The Level that all requests are recorded at. available options: None, Metadata, Request, RequestResponse required stages List[str] - (optional) Stages is a list of stages for which events are created. ServiceReference class lightkube.models.auditregistration_v1alpha1. ServiceReference ( name , namespace , path=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - name is the name of the service. Required namespace str - namespace is the namespace of the service. Required path str - (optional) path is an optional URL path which will be sent in any request to this service. port int - (optional) If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. port should be a valid port number (1-65535, inclusive). Webhook class lightkube.models.auditregistration_v1alpha1. Webhook ( clientConfig , throttle=None ) Webhook holds the configuration of the webhook parameters clientConfig WebhookClientConfig - ClientConfig holds the connection parameters for the webhook required throttle WebhookThrottleConfig - (optional) Throttle holds the options for throttling the webhook WebhookClientConfig class lightkube.models.auditregistration_v1alpha1. WebhookClientConfig ( caBundle=None , service=None , url=None ) WebhookClientConfig contains the information to make a connection with the webhook parameters caBundle str - (optional) caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used. service ServiceReference - (optional) service is a reference to the service for this webhook. Either service or url must be specified. If the webhook is running within the cluster, then you should use service . url str - (optional) url gives the location of the webhook, in standard URL form ( scheme://host:port/path ). Exactly one of url or service must be specified. The host should not refer to a service running in the cluster; use the service field instead. The host might be resolved via external DNS in some apiservers (e.g., kube-apiserver cannot resolve in-cluster DNS as that would be a layering violation). host may also be an IP address. Please note that using localhost or 127.0.0.1 as a host is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be \"https\"; the URL must begin with \"https://\". A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either. WebhookThrottleConfig class lightkube.models.auditregistration_v1alpha1. WebhookThrottleConfig ( burst=None , qps=None ) WebhookThrottleConfig holds the configuration for throttling events parameters burst int - (optional) ThrottleBurst is the maximum number of events sent at the same moment default 15 QPS qps int - (optional) ThrottleQPS maximum number of batches per second default 10 QPS","title":"auditregistration_v1alpha1"},{"location":"models/auditregistration_v1alpha1/#auditregistration_v1alpha1","text":"","title":"auditregistration_v1alpha1"},{"location":"models/auditregistration_v1alpha1/#auditsink","text":"class lightkube.models.auditregistration_v1alpha1. AuditSink ( apiVersion=None , kind=None , metadata=None , spec=None ) AuditSink represents a cluster level audit sink parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec AuditSinkSpec - (optional) Spec defines the audit configuration spec","title":"AuditSink"},{"location":"models/auditregistration_v1alpha1/#auditsinklist","text":"class lightkube.models.auditregistration_v1alpha1. AuditSinkList ( items , apiVersion=None , kind=None , metadata=None ) AuditSinkList is a list of AuditSink items. parameters items AuditSink - List of audit configurations. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional)","title":"AuditSinkList"},{"location":"models/auditregistration_v1alpha1/#auditsinkspec","text":"class lightkube.models.auditregistration_v1alpha1. AuditSinkSpec ( policy , webhook ) AuditSinkSpec holds the spec for the audit sink parameters policy Policy - Policy defines the policy for selecting which events should be sent to the webhook required webhook Webhook - Webhook to send events required","title":"AuditSinkSpec"},{"location":"models/auditregistration_v1alpha1/#policy","text":"class lightkube.models.auditregistration_v1alpha1. Policy ( level , stages=None ) Policy defines the configuration of how audit events are logged parameters level str - The Level that all requests are recorded at. available options: None, Metadata, Request, RequestResponse required stages List[str] - (optional) Stages is a list of stages for which events are created.","title":"Policy"},{"location":"models/auditregistration_v1alpha1/#servicereference","text":"class lightkube.models.auditregistration_v1alpha1. ServiceReference ( name , namespace , path=None , port=None ) ServiceReference holds a reference to Service.legacy.k8s.io parameters name str - name is the name of the service. Required namespace str - namespace is the namespace of the service. Required path str - (optional) path is an optional URL path which will be sent in any request to this service. port int - (optional) If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. port should be a valid port number (1-65535, inclusive).","title":"ServiceReference"},{"location":"models/auditregistration_v1alpha1/#webhook","text":"class lightkube.models.auditregistration_v1alpha1. Webhook ( clientConfig , throttle=None ) Webhook holds the configuration of the webhook parameters clientConfig WebhookClientConfig - ClientConfig holds the connection parameters for the webhook required throttle WebhookThrottleConfig - (optional) Throttle holds the options for throttling the webhook","title":"Webhook"},{"location":"models/auditregistration_v1alpha1/#webhookclientconfig","text":"class lightkube.models.auditregistration_v1alpha1. WebhookClientConfig ( caBundle=None , service=None , url=None ) WebhookClientConfig contains the information to make a connection with the webhook parameters caBundle str - (optional) caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used. service ServiceReference - (optional) service is a reference to the service for this webhook. Either service or url must be specified. If the webhook is running within the cluster, then you should use service . url str - (optional) url gives the location of the webhook, in standard URL form ( scheme://host:port/path ). Exactly one of url or service must be specified. The host should not refer to a service running in the cluster; use the service field instead. The host might be resolved via external DNS in some apiservers (e.g., kube-apiserver cannot resolve in-cluster DNS as that would be a layering violation). host may also be an IP address. Please note that using localhost or 127.0.0.1 as a host is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be \"https\"; the URL must begin with \"https://\". A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.","title":"WebhookClientConfig"},{"location":"models/auditregistration_v1alpha1/#webhookthrottleconfig","text":"class lightkube.models.auditregistration_v1alpha1. WebhookThrottleConfig ( burst=None , qps=None ) WebhookThrottleConfig holds the configuration for throttling events parameters burst int - (optional) ThrottleBurst is the maximum number of events sent at the same moment default 15 QPS qps int - (optional) ThrottleQPS maximum number of batches per second default 10 QPS","title":"WebhookThrottleConfig"},{"location":"models/authentication_v1/","text":"authentication_v1 BoundObjectReference class lightkube.models.authentication_v1. BoundObjectReference ( apiVersion=None , kind=None , name=None , uid=None ) BoundObjectReference is a reference to an object that a token is bound to. parameters apiVersion str - (optional) API version of the referent. kind str - (optional) Kind of the referent. Valid kinds are 'Pod' and 'Secret'. name str - (optional) Name of the referent. uid str - (optional) UID of the referent. TokenRequest class lightkube.models.authentication_v1. TokenRequest ( spec , apiVersion=None , kind=None , metadata=None , status=None ) TokenRequest requests a token for a given service account. parameters spec TokenRequestSpec - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status TokenRequestStatus - (optional) TokenRequestSpec class lightkube.models.authentication_v1. TokenRequestSpec ( audiences , boundObjectRef=None , expirationSeconds=None ) TokenRequestSpec contains client provided parameters of a token request. parameters audiences List[str] - Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences. boundObjectRef BoundObjectReference - (optional) BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation. expirationSeconds int - (optional) ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response. TokenRequestStatus class lightkube.models.authentication_v1. TokenRequestStatus ( expirationTimestamp , token ) TokenRequestStatus is the result of a token request. parameters expirationTimestamp meta_v1.Time - ExpirationTimestamp is the time of expiration of the returned token. token str - Token is the opaque bearer token. TokenReview class lightkube.models.authentication_v1. TokenReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver. parameters spec TokenReviewSpec - Spec holds information about the request being evaluated apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status TokenReviewStatus - (optional) Status is filled in by the server and indicates whether the request can be authenticated. TokenReviewSpec class lightkube.models.authentication_v1. TokenReviewSpec ( audiences=None , token=None ) TokenReviewSpec is a description of the token authentication request. parameters audiences List[str] - (optional) Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver. token str - (optional) Token is the opaque bearer token. TokenReviewStatus class lightkube.models.authentication_v1. TokenReviewStatus ( audiences=None , authenticated=None , error=None , user=None ) TokenReviewStatus is the result of the token authentication request. parameters audiences List[str] - (optional) Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server. authenticated bool - (optional) Authenticated indicates that the token was associated with a known user. error str - (optional) Error indicates that the token couldn't be checked user UserInfo - (optional) User is the UserInfo associated with the provided token. UserInfo class lightkube.models.authentication_v1. UserInfo ( extra=None , groups=None , uid=None , username=None ) UserInfo holds the information about the user needed to implement the user.Info interface. parameters extra dict - (optional) Any additional information provided by the authenticator. groups List[str] - (optional) The names of groups this user is a part of. uid str - (optional) A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs. username str - (optional) The name that uniquely identifies this user among all active users.","title":"authentication_v1"},{"location":"models/authentication_v1/#authentication_v1","text":"","title":"authentication_v1"},{"location":"models/authentication_v1/#boundobjectreference","text":"class lightkube.models.authentication_v1. BoundObjectReference ( apiVersion=None , kind=None , name=None , uid=None ) BoundObjectReference is a reference to an object that a token is bound to. parameters apiVersion str - (optional) API version of the referent. kind str - (optional) Kind of the referent. Valid kinds are 'Pod' and 'Secret'. name str - (optional) Name of the referent. uid str - (optional) UID of the referent.","title":"BoundObjectReference"},{"location":"models/authentication_v1/#tokenrequest","text":"class lightkube.models.authentication_v1. TokenRequest ( spec , apiVersion=None , kind=None , metadata=None , status=None ) TokenRequest requests a token for a given service account. parameters spec TokenRequestSpec - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status TokenRequestStatus - (optional)","title":"TokenRequest"},{"location":"models/authentication_v1/#tokenrequestspec","text":"class lightkube.models.authentication_v1. TokenRequestSpec ( audiences , boundObjectRef=None , expirationSeconds=None ) TokenRequestSpec contains client provided parameters of a token request. parameters audiences List[str] - Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences. boundObjectRef BoundObjectReference - (optional) BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation. expirationSeconds int - (optional) ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.","title":"TokenRequestSpec"},{"location":"models/authentication_v1/#tokenrequeststatus","text":"class lightkube.models.authentication_v1. TokenRequestStatus ( expirationTimestamp , token ) TokenRequestStatus is the result of a token request. parameters expirationTimestamp meta_v1.Time - ExpirationTimestamp is the time of expiration of the returned token. token str - Token is the opaque bearer token.","title":"TokenRequestStatus"},{"location":"models/authentication_v1/#tokenreview","text":"class lightkube.models.authentication_v1. TokenReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver. parameters spec TokenReviewSpec - Spec holds information about the request being evaluated apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status TokenReviewStatus - (optional) Status is filled in by the server and indicates whether the request can be authenticated.","title":"TokenReview"},{"location":"models/authentication_v1/#tokenreviewspec","text":"class lightkube.models.authentication_v1. TokenReviewSpec ( audiences=None , token=None ) TokenReviewSpec is a description of the token authentication request. parameters audiences List[str] - (optional) Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver. token str - (optional) Token is the opaque bearer token.","title":"TokenReviewSpec"},{"location":"models/authentication_v1/#tokenreviewstatus","text":"class lightkube.models.authentication_v1. TokenReviewStatus ( audiences=None , authenticated=None , error=None , user=None ) TokenReviewStatus is the result of the token authentication request. parameters audiences List[str] - (optional) Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server. authenticated bool - (optional) Authenticated indicates that the token was associated with a known user. error str - (optional) Error indicates that the token couldn't be checked user UserInfo - (optional) User is the UserInfo associated with the provided token.","title":"TokenReviewStatus"},{"location":"models/authentication_v1/#userinfo","text":"class lightkube.models.authentication_v1. UserInfo ( extra=None , groups=None , uid=None , username=None ) UserInfo holds the information about the user needed to implement the user.Info interface. parameters extra dict - (optional) Any additional information provided by the authenticator. groups List[str] - (optional) The names of groups this user is a part of. uid str - (optional) A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs. username str - (optional) The name that uniquely identifies this user among all active users.","title":"UserInfo"},{"location":"models/authentication_v1beta1/","text":"authentication_v1beta1 TokenReview class lightkube.models.authentication_v1beta1. TokenReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver. parameters spec TokenReviewSpec - Spec holds information about the request being evaluated apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status TokenReviewStatus - (optional) Status is filled in by the server and indicates whether the request can be authenticated. TokenReviewSpec class lightkube.models.authentication_v1beta1. TokenReviewSpec ( audiences=None , token=None ) TokenReviewSpec is a description of the token authentication request. parameters audiences List[str] - (optional) Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver. token str - (optional) Token is the opaque bearer token. TokenReviewStatus class lightkube.models.authentication_v1beta1. TokenReviewStatus ( audiences=None , authenticated=None , error=None , user=None ) TokenReviewStatus is the result of the token authentication request. parameters audiences List[str] - (optional) Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server. authenticated bool - (optional) Authenticated indicates that the token was associated with a known user. error str - (optional) Error indicates that the token couldn't be checked user UserInfo - (optional) User is the UserInfo associated with the provided token. UserInfo class lightkube.models.authentication_v1beta1. UserInfo ( extra=None , groups=None , uid=None , username=None ) UserInfo holds the information about the user needed to implement the user.Info interface. parameters extra dict - (optional) Any additional information provided by the authenticator. groups List[str] - (optional) The names of groups this user is a part of. uid str - (optional) A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs. username str - (optional) The name that uniquely identifies this user among all active users.","title":"authentication_v1beta1"},{"location":"models/authentication_v1beta1/#authentication_v1beta1","text":"","title":"authentication_v1beta1"},{"location":"models/authentication_v1beta1/#tokenreview","text":"class lightkube.models.authentication_v1beta1. TokenReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver. parameters spec TokenReviewSpec - Spec holds information about the request being evaluated apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status TokenReviewStatus - (optional) Status is filled in by the server and indicates whether the request can be authenticated.","title":"TokenReview"},{"location":"models/authentication_v1beta1/#tokenreviewspec","text":"class lightkube.models.authentication_v1beta1. TokenReviewSpec ( audiences=None , token=None ) TokenReviewSpec is a description of the token authentication request. parameters audiences List[str] - (optional) Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver. token str - (optional) Token is the opaque bearer token.","title":"TokenReviewSpec"},{"location":"models/authentication_v1beta1/#tokenreviewstatus","text":"class lightkube.models.authentication_v1beta1. TokenReviewStatus ( audiences=None , authenticated=None , error=None , user=None ) TokenReviewStatus is the result of the token authentication request. parameters audiences List[str] - (optional) Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is \"true\", the token is valid against the audience of the Kubernetes API server. authenticated bool - (optional) Authenticated indicates that the token was associated with a known user. error str - (optional) Error indicates that the token couldn't be checked user UserInfo - (optional) User is the UserInfo associated with the provided token.","title":"TokenReviewStatus"},{"location":"models/authentication_v1beta1/#userinfo","text":"class lightkube.models.authentication_v1beta1. UserInfo ( extra=None , groups=None , uid=None , username=None ) UserInfo holds the information about the user needed to implement the user.Info interface. parameters extra dict - (optional) Any additional information provided by the authenticator. groups List[str] - (optional) The names of groups this user is a part of. uid str - (optional) A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs. username str - (optional) The name that uniquely identifies this user among all active users.","title":"UserInfo"},{"location":"models/authorization_v1/","text":"authorization_v1 LocalSubjectAccessReview class lightkube.models.authorization_v1. LocalSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking. parameters spec SubjectAccessReviewSpec - Spec holds information about the request being evaluated. spec.namespace must be equal to the namespace you made the request against. If empty, it is defaulted. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not NonResourceAttributes class lightkube.models.authorization_v1. NonResourceAttributes ( path=None , verb=None ) NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface parameters path str - (optional) Path is the URL path of the request verb str - (optional) Verb is the standard HTTP verb NonResourceRule class lightkube.models.authorization_v1. NonResourceRule ( verbs , nonResourceURLs=None ) NonResourceRule holds information that describes a rule for the non-resource parameters verbs List[str] - Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options. \"*\" means all. nonResourceURLs List[str] - (optional) NonResourceURLs is a set of partial urls that a user should have access to. s are allowed, but only as the full, final step in the path. \" \" means all. ResourceAttributes class lightkube.models.authorization_v1. ResourceAttributes ( group=None , name=None , namespace=None , resource=None , subresource=None , verb=None , version=None ) ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface parameters group str - (optional) Group is the API Group of the Resource. \" \" means all. name str - (optional) Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all. namespace str - (optional) Namespace is the namespace of the action being requested. Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview resource str - (optional) Resource is one of the existing resource types. \" \" means all. subresource str - (optional) Subresource is one of the existing resource types. \"\" means none. verb str - (optional) Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy. \" \" means all. version str - (optional) Version is the API Version of the Resource. \" \" means all. ResourceRule class lightkube.models.authorization_v1. ResourceRule ( verbs , apiGroups=None , resourceNames=None , resources=None ) ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. parameters verbs List[str] - Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy. \" \" means all. apiGroups List[str] - (optional) APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \" \" means all. resourceNames List[str] - (optional) ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed. \"*\" means all. resources List[str] - (optional) Resources is a list of resources this rule applies to. \" \" means all in the specified apiGroups. \" /foo\" represents the subresource 'foo' for all resources in the specified apiGroups. SelfSubjectAccessReview class lightkube.models.authorization_v1. SelfSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SelfSubjectAccessReview checks whether or the current user can perform an action. Not filling in a spec.namespace means \"in all namespaces\". Self is a special case, because users should always be able to check whether they can perform an action parameters spec SelfSubjectAccessReviewSpec - Spec holds information about the request being evaluated. user and groups must be empty apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not SelfSubjectAccessReviewSpec class lightkube.models.authorization_v1. SelfSubjectAccessReviewSpec ( nonResourceAttributes=None , resourceAttributes=None ) SelfSubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set parameters nonResourceAttributes NonResourceAttributes - (optional) NonResourceAttributes describes information for a non-resource access request resourceAttributes ResourceAttributes - (optional) ResourceAuthorizationAttributes describes information for a resource access request SelfSubjectRulesReview class lightkube.models.authorization_v1. SelfSubjectRulesReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server. parameters spec SelfSubjectRulesReviewSpec - Spec holds information about the request being evaluated. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectRulesReviewStatus - (optional) Status is filled in by the server and indicates the set of actions a user can perform. SelfSubjectRulesReviewSpec class lightkube.models.authorization_v1. SelfSubjectRulesReviewSpec ( namespace=None ) parameters namespace str - (optional) Namespace to evaluate rules for. Required. SubjectAccessReview class lightkube.models.authorization_v1. SubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SubjectAccessReview checks whether or not a user or group can perform an action. parameters spec SubjectAccessReviewSpec - Spec holds information about the request being evaluated apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not SubjectAccessReviewSpec class lightkube.models.authorization_v1. SubjectAccessReviewSpec ( extra=None , groups=None , nonResourceAttributes=None , resourceAttributes=None , uid=None , user=None ) SubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set parameters extra dict - (optional) Extra corresponds to the user.Info.GetExtra() method from the authenticator. Since that is input to the authorizer it needs a reflection here. groups List[str] - (optional) Groups is the groups you're testing for. nonResourceAttributes NonResourceAttributes - (optional) NonResourceAttributes describes information for a non-resource access request resourceAttributes ResourceAttributes - (optional) ResourceAuthorizationAttributes describes information for a resource access request uid str - (optional) UID information about the requesting user. user str - (optional) User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups SubjectAccessReviewStatus class lightkube.models.authorization_v1. SubjectAccessReviewStatus ( allowed , denied=None , evaluationError=None , reason=None ) SubjectAccessReviewStatus parameters allowed bool - Allowed is required. True if the action would be allowed, false otherwise. denied bool - (optional) Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true. evaluationError str - (optional) EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request. reason str - (optional) Reason is optional. It indicates why a request was allowed or denied. SubjectRulesReviewStatus class lightkube.models.authorization_v1. SubjectRulesReviewStatus ( incomplete , nonResourceRules , resourceRules , evaluationError=None ) SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete. parameters incomplete bool - Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation. nonResourceRules NonResourceRule - NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. resourceRules ResourceRule - ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. evaluationError str - (optional) EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.","title":"authorization_v1"},{"location":"models/authorization_v1/#authorization_v1","text":"","title":"authorization_v1"},{"location":"models/authorization_v1/#localsubjectaccessreview","text":"class lightkube.models.authorization_v1. LocalSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking. parameters spec SubjectAccessReviewSpec - Spec holds information about the request being evaluated. spec.namespace must be equal to the namespace you made the request against. If empty, it is defaulted. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not","title":"LocalSubjectAccessReview"},{"location":"models/authorization_v1/#nonresourceattributes","text":"class lightkube.models.authorization_v1. NonResourceAttributes ( path=None , verb=None ) NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface parameters path str - (optional) Path is the URL path of the request verb str - (optional) Verb is the standard HTTP verb","title":"NonResourceAttributes"},{"location":"models/authorization_v1/#nonresourcerule","text":"class lightkube.models.authorization_v1. NonResourceRule ( verbs , nonResourceURLs=None ) NonResourceRule holds information that describes a rule for the non-resource parameters verbs List[str] - Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options. \"*\" means all. nonResourceURLs List[str] - (optional) NonResourceURLs is a set of partial urls that a user should have access to. s are allowed, but only as the full, final step in the path. \" \" means all.","title":"NonResourceRule"},{"location":"models/authorization_v1/#resourceattributes","text":"class lightkube.models.authorization_v1. ResourceAttributes ( group=None , name=None , namespace=None , resource=None , subresource=None , verb=None , version=None ) ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface parameters group str - (optional) Group is the API Group of the Resource. \" \" means all. name str - (optional) Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all. namespace str - (optional) Namespace is the namespace of the action being requested. Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview resource str - (optional) Resource is one of the existing resource types. \" \" means all. subresource str - (optional) Subresource is one of the existing resource types. \"\" means none. verb str - (optional) Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy. \" \" means all. version str - (optional) Version is the API Version of the Resource. \" \" means all.","title":"ResourceAttributes"},{"location":"models/authorization_v1/#resourcerule","text":"class lightkube.models.authorization_v1. ResourceRule ( verbs , apiGroups=None , resourceNames=None , resources=None ) ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. parameters verbs List[str] - Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy. \" \" means all. apiGroups List[str] - (optional) APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \" \" means all. resourceNames List[str] - (optional) ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed. \"*\" means all. resources List[str] - (optional) Resources is a list of resources this rule applies to. \" \" means all in the specified apiGroups. \" /foo\" represents the subresource 'foo' for all resources in the specified apiGroups.","title":"ResourceRule"},{"location":"models/authorization_v1/#selfsubjectaccessreview","text":"class lightkube.models.authorization_v1. SelfSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SelfSubjectAccessReview checks whether or the current user can perform an action. Not filling in a spec.namespace means \"in all namespaces\". Self is a special case, because users should always be able to check whether they can perform an action parameters spec SelfSubjectAccessReviewSpec - Spec holds information about the request being evaluated. user and groups must be empty apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not","title":"SelfSubjectAccessReview"},{"location":"models/authorization_v1/#selfsubjectaccessreviewspec","text":"class lightkube.models.authorization_v1. SelfSubjectAccessReviewSpec ( nonResourceAttributes=None , resourceAttributes=None ) SelfSubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set parameters nonResourceAttributes NonResourceAttributes - (optional) NonResourceAttributes describes information for a non-resource access request resourceAttributes ResourceAttributes - (optional) ResourceAuthorizationAttributes describes information for a resource access request","title":"SelfSubjectAccessReviewSpec"},{"location":"models/authorization_v1/#selfsubjectrulesreview","text":"class lightkube.models.authorization_v1. SelfSubjectRulesReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server. parameters spec SelfSubjectRulesReviewSpec - Spec holds information about the request being evaluated. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectRulesReviewStatus - (optional) Status is filled in by the server and indicates the set of actions a user can perform.","title":"SelfSubjectRulesReview"},{"location":"models/authorization_v1/#selfsubjectrulesreviewspec","text":"class lightkube.models.authorization_v1. SelfSubjectRulesReviewSpec ( namespace=None ) parameters namespace str - (optional) Namespace to evaluate rules for. Required.","title":"SelfSubjectRulesReviewSpec"},{"location":"models/authorization_v1/#subjectaccessreview","text":"class lightkube.models.authorization_v1. SubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SubjectAccessReview checks whether or not a user or group can perform an action. parameters spec SubjectAccessReviewSpec - Spec holds information about the request being evaluated apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not","title":"SubjectAccessReview"},{"location":"models/authorization_v1/#subjectaccessreviewspec","text":"class lightkube.models.authorization_v1. SubjectAccessReviewSpec ( extra=None , groups=None , nonResourceAttributes=None , resourceAttributes=None , uid=None , user=None ) SubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set parameters extra dict - (optional) Extra corresponds to the user.Info.GetExtra() method from the authenticator. Since that is input to the authorizer it needs a reflection here. groups List[str] - (optional) Groups is the groups you're testing for. nonResourceAttributes NonResourceAttributes - (optional) NonResourceAttributes describes information for a non-resource access request resourceAttributes ResourceAttributes - (optional) ResourceAuthorizationAttributes describes information for a resource access request uid str - (optional) UID information about the requesting user. user str - (optional) User is the user you're testing for. If you specify \"User\" but not \"Groups\", then is it interpreted as \"What if User were not a member of any groups","title":"SubjectAccessReviewSpec"},{"location":"models/authorization_v1/#subjectaccessreviewstatus","text":"class lightkube.models.authorization_v1. SubjectAccessReviewStatus ( allowed , denied=None , evaluationError=None , reason=None ) SubjectAccessReviewStatus parameters allowed bool - Allowed is required. True if the action would be allowed, false otherwise. denied bool - (optional) Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true. evaluationError str - (optional) EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request. reason str - (optional) Reason is optional. It indicates why a request was allowed or denied.","title":"SubjectAccessReviewStatus"},{"location":"models/authorization_v1/#subjectrulesreviewstatus","text":"class lightkube.models.authorization_v1. SubjectRulesReviewStatus ( incomplete , nonResourceRules , resourceRules , evaluationError=None ) SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete. parameters incomplete bool - Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation. nonResourceRules NonResourceRule - NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. resourceRules ResourceRule - ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. evaluationError str - (optional) EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.","title":"SubjectRulesReviewStatus"},{"location":"models/authorization_v1beta1/","text":"authorization_v1beta1 LocalSubjectAccessReview class lightkube.models.authorization_v1beta1. LocalSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking. parameters spec SubjectAccessReviewSpec - Spec holds information about the request being evaluated. spec.namespace must be equal to the namespace you made the request against. If empty, it is defaulted. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not NonResourceAttributes class lightkube.models.authorization_v1beta1. NonResourceAttributes ( path=None , verb=None ) NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface parameters path str - (optional) Path is the URL path of the request verb str - (optional) Verb is the standard HTTP verb NonResourceRule class lightkube.models.authorization_v1beta1. NonResourceRule ( verbs , nonResourceURLs=None ) NonResourceRule holds information that describes a rule for the non-resource parameters verbs List[str] - Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options. \"*\" means all. nonResourceURLs List[str] - (optional) NonResourceURLs is a set of partial urls that a user should have access to. s are allowed, but only as the full, final step in the path. \" \" means all. ResourceAttributes class lightkube.models.authorization_v1beta1. ResourceAttributes ( group=None , name=None , namespace=None , resource=None , subresource=None , verb=None , version=None ) ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface parameters group str - (optional) Group is the API Group of the Resource. \" \" means all. name str - (optional) Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all. namespace str - (optional) Namespace is the namespace of the action being requested. Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview resource str - (optional) Resource is one of the existing resource types. \" \" means all. subresource str - (optional) Subresource is one of the existing resource types. \"\" means none. verb str - (optional) Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy. \" \" means all. version str - (optional) Version is the API Version of the Resource. \" \" means all. ResourceRule class lightkube.models.authorization_v1beta1. ResourceRule ( verbs , apiGroups=None , resourceNames=None , resources=None ) ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. parameters verbs List[str] - Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy. \" \" means all. apiGroups List[str] - (optional) APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \" \" means all. resourceNames List[str] - (optional) ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed. \"*\" means all. resources List[str] - (optional) Resources is a list of resources this rule applies to. \" \" means all in the specified apiGroups. \" /foo\" represents the subresource 'foo' for all resources in the specified apiGroups. SelfSubjectAccessReview class lightkube.models.authorization_v1beta1. SelfSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SelfSubjectAccessReview checks whether or the current user can perform an action. Not filling in a spec.namespace means \"in all namespaces\". Self is a special case, because users should always be able to check whether they can perform an action parameters spec SelfSubjectAccessReviewSpec - Spec holds information about the request being evaluated. user and groups must be empty apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not SelfSubjectAccessReviewSpec class lightkube.models.authorization_v1beta1. SelfSubjectAccessReviewSpec ( nonResourceAttributes=None , resourceAttributes=None ) SelfSubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set parameters nonResourceAttributes NonResourceAttributes - (optional) NonResourceAttributes describes information for a non-resource access request resourceAttributes ResourceAttributes - (optional) ResourceAuthorizationAttributes describes information for a resource access request SelfSubjectRulesReview class lightkube.models.authorization_v1beta1. SelfSubjectRulesReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server. parameters spec SelfSubjectRulesReviewSpec - Spec holds information about the request being evaluated. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectRulesReviewStatus - (optional) Status is filled in by the server and indicates the set of actions a user can perform. SelfSubjectRulesReviewSpec class lightkube.models.authorization_v1beta1. SelfSubjectRulesReviewSpec ( namespace=None ) parameters namespace str - (optional) Namespace to evaluate rules for. Required. SubjectAccessReview class lightkube.models.authorization_v1beta1. SubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SubjectAccessReview checks whether or not a user or group can perform an action. parameters spec SubjectAccessReviewSpec - Spec holds information about the request being evaluated apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not SubjectAccessReviewSpec class lightkube.models.authorization_v1beta1. SubjectAccessReviewSpec ( extra=None , group=None , nonResourceAttributes=None , resourceAttributes=None , uid=None , user=None ) SubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set parameters extra dict - (optional) Extra corresponds to the user.Info.GetExtra() method from the authenticator. Since that is input to the authorizer it needs a reflection here. group List[str] - (optional) Groups is the groups you're testing for. nonResourceAttributes NonResourceAttributes - (optional) NonResourceAttributes describes information for a non-resource access request resourceAttributes ResourceAttributes - (optional) ResourceAuthorizationAttributes describes information for a resource access request uid str - (optional) UID information about the requesting user. user str - (optional) User is the user you're testing for. If you specify \"User\" but not \"Group\", then is it interpreted as \"What if User were not a member of any groups SubjectAccessReviewStatus class lightkube.models.authorization_v1beta1. SubjectAccessReviewStatus ( allowed , denied=None , evaluationError=None , reason=None ) SubjectAccessReviewStatus parameters allowed bool - Allowed is required. True if the action would be allowed, false otherwise. denied bool - (optional) Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true. evaluationError str - (optional) EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request. reason str - (optional) Reason is optional. It indicates why a request was allowed or denied. SubjectRulesReviewStatus class lightkube.models.authorization_v1beta1. SubjectRulesReviewStatus ( incomplete , nonResourceRules , resourceRules , evaluationError=None ) SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete. parameters incomplete bool - Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation. nonResourceRules NonResourceRule - NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. resourceRules ResourceRule - ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. evaluationError str - (optional) EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.","title":"authorization_v1beta1"},{"location":"models/authorization_v1beta1/#authorization_v1beta1","text":"","title":"authorization_v1beta1"},{"location":"models/authorization_v1beta1/#localsubjectaccessreview","text":"class lightkube.models.authorization_v1beta1. LocalSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking. parameters spec SubjectAccessReviewSpec - Spec holds information about the request being evaluated. spec.namespace must be equal to the namespace you made the request against. If empty, it is defaulted. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not","title":"LocalSubjectAccessReview"},{"location":"models/authorization_v1beta1/#nonresourceattributes","text":"class lightkube.models.authorization_v1beta1. NonResourceAttributes ( path=None , verb=None ) NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface parameters path str - (optional) Path is the URL path of the request verb str - (optional) Verb is the standard HTTP verb","title":"NonResourceAttributes"},{"location":"models/authorization_v1beta1/#nonresourcerule","text":"class lightkube.models.authorization_v1beta1. NonResourceRule ( verbs , nonResourceURLs=None ) NonResourceRule holds information that describes a rule for the non-resource parameters verbs List[str] - Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options. \"*\" means all. nonResourceURLs List[str] - (optional) NonResourceURLs is a set of partial urls that a user should have access to. s are allowed, but only as the full, final step in the path. \" \" means all.","title":"NonResourceRule"},{"location":"models/authorization_v1beta1/#resourceattributes","text":"class lightkube.models.authorization_v1beta1. ResourceAttributes ( group=None , name=None , namespace=None , resource=None , subresource=None , verb=None , version=None ) ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface parameters group str - (optional) Group is the API Group of the Resource. \" \" means all. name str - (optional) Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all. namespace str - (optional) Namespace is the namespace of the action being requested. Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview resource str - (optional) Resource is one of the existing resource types. \" \" means all. subresource str - (optional) Subresource is one of the existing resource types. \"\" means none. verb str - (optional) Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy. \" \" means all. version str - (optional) Version is the API Version of the Resource. \" \" means all.","title":"ResourceAttributes"},{"location":"models/authorization_v1beta1/#resourcerule","text":"class lightkube.models.authorization_v1beta1. ResourceRule ( verbs , apiGroups=None , resourceNames=None , resources=None ) ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. parameters verbs List[str] - Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy. \" \" means all. apiGroups List[str] - (optional) APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. \" \" means all. resourceNames List[str] - (optional) ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed. \"*\" means all. resources List[str] - (optional) Resources is a list of resources this rule applies to. \" \" means all in the specified apiGroups. \" /foo\" represents the subresource 'foo' for all resources in the specified apiGroups.","title":"ResourceRule"},{"location":"models/authorization_v1beta1/#selfsubjectaccessreview","text":"class lightkube.models.authorization_v1beta1. SelfSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SelfSubjectAccessReview checks whether or the current user can perform an action. Not filling in a spec.namespace means \"in all namespaces\". Self is a special case, because users should always be able to check whether they can perform an action parameters spec SelfSubjectAccessReviewSpec - Spec holds information about the request being evaluated. user and groups must be empty apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not","title":"SelfSubjectAccessReview"},{"location":"models/authorization_v1beta1/#selfsubjectaccessreviewspec","text":"class lightkube.models.authorization_v1beta1. SelfSubjectAccessReviewSpec ( nonResourceAttributes=None , resourceAttributes=None ) SelfSubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set parameters nonResourceAttributes NonResourceAttributes - (optional) NonResourceAttributes describes information for a non-resource access request resourceAttributes ResourceAttributes - (optional) ResourceAuthorizationAttributes describes information for a resource access request","title":"SelfSubjectAccessReviewSpec"},{"location":"models/authorization_v1beta1/#selfsubjectrulesreview","text":"class lightkube.models.authorization_v1beta1. SelfSubjectRulesReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server. parameters spec SelfSubjectRulesReviewSpec - Spec holds information about the request being evaluated. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectRulesReviewStatus - (optional) Status is filled in by the server and indicates the set of actions a user can perform.","title":"SelfSubjectRulesReview"},{"location":"models/authorization_v1beta1/#selfsubjectrulesreviewspec","text":"class lightkube.models.authorization_v1beta1. SelfSubjectRulesReviewSpec ( namespace=None ) parameters namespace str - (optional) Namespace to evaluate rules for. Required.","title":"SelfSubjectRulesReviewSpec"},{"location":"models/authorization_v1beta1/#subjectaccessreview","text":"class lightkube.models.authorization_v1beta1. SubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) SubjectAccessReview checks whether or not a user or group can perform an action. parameters spec SubjectAccessReviewSpec - Spec holds information about the request being evaluated apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) status SubjectAccessReviewStatus - (optional) Status is filled in by the server and indicates whether the request is allowed or not","title":"SubjectAccessReview"},{"location":"models/authorization_v1beta1/#subjectaccessreviewspec","text":"class lightkube.models.authorization_v1beta1. SubjectAccessReviewSpec ( extra=None , group=None , nonResourceAttributes=None , resourceAttributes=None , uid=None , user=None ) SubjectAccessReviewSpec is a description of the access request. Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set parameters extra dict - (optional) Extra corresponds to the user.Info.GetExtra() method from the authenticator. Since that is input to the authorizer it needs a reflection here. group List[str] - (optional) Groups is the groups you're testing for. nonResourceAttributes NonResourceAttributes - (optional) NonResourceAttributes describes information for a non-resource access request resourceAttributes ResourceAttributes - (optional) ResourceAuthorizationAttributes describes information for a resource access request uid str - (optional) UID information about the requesting user. user str - (optional) User is the user you're testing for. If you specify \"User\" but not \"Group\", then is it interpreted as \"What if User were not a member of any groups","title":"SubjectAccessReviewSpec"},{"location":"models/authorization_v1beta1/#subjectaccessreviewstatus","text":"class lightkube.models.authorization_v1beta1. SubjectAccessReviewStatus ( allowed , denied=None , evaluationError=None , reason=None ) SubjectAccessReviewStatus parameters allowed bool - Allowed is required. True if the action would be allowed, false otherwise. denied bool - (optional) Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true. evaluationError str - (optional) EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request. reason str - (optional) Reason is optional. It indicates why a request was allowed or denied.","title":"SubjectAccessReviewStatus"},{"location":"models/authorization_v1beta1/#subjectrulesreviewstatus","text":"class lightkube.models.authorization_v1beta1. SubjectRulesReviewStatus ( incomplete , nonResourceRules , resourceRules , evaluationError=None ) SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete. parameters incomplete bool - Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation. nonResourceRules NonResourceRule - NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. resourceRules ResourceRule - ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete. evaluationError str - (optional) EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.","title":"SubjectRulesReviewStatus"},{"location":"models/autoscaling_v1/","text":"autoscaling_v1 CrossVersionObjectReference class lightkube.models.autoscaling_v1. CrossVersionObjectReference ( kind , name , apiVersion=None ) CrossVersionObjectReference contains enough information to let you identify the referred resource. parameters kind str - Kind of the referent; More info name str - Name of the referent; More info apiVersion str - (optional) API version of the referent HorizontalPodAutoscaler class lightkube.models.autoscaling_v1. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) configuration of a horizontal pod autoscaler. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. More info spec HorizontalPodAutoscalerSpec - (optional) behaviour of autoscaler. More info status HorizontalPodAutoscalerStatus - (optional) current information about the autoscaler. HorizontalPodAutoscalerList class lightkube.models.autoscaling_v1. HorizontalPodAutoscalerList ( items , apiVersion=None , kind=None , metadata=None ) list of horizontal pod autoscaler objects. parameters items HorizontalPodAutoscaler - list of horizontal pod autoscaler objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. HorizontalPodAutoscalerSpec class lightkube.models.autoscaling_v1. HorizontalPodAutoscalerSpec ( maxReplicas , scaleTargetRef , minReplicas=None , targetCPUUtilizationPercentage=None ) specification of a horizontal pod autoscaler. parameters maxReplicas int - upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas. scaleTargetRef CrossVersionObjectReference - reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource. minReplicas int - (optional) minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available. targetCPUUtilizationPercentage int - (optional) target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used. HorizontalPodAutoscalerStatus class lightkube.models.autoscaling_v1. HorizontalPodAutoscalerStatus ( currentReplicas , desiredReplicas , currentCPUUtilizationPercentage=None , lastScaleTime=None , observedGeneration=None ) current status of a horizontal pod autoscaler parameters currentReplicas int - current number of replicas of pods managed by this autoscaler. desiredReplicas int - desired number of replicas of pods managed by this autoscaler. currentCPUUtilizationPercentage int - (optional) current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU. lastScaleTime meta_v1.Time - (optional) last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed. observedGeneration int - (optional) most recent generation observed by this autoscaler. Scale class lightkube.models.autoscaling_v1. Scale ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Scale represents a scaling request for a resource. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata; More info spec ScaleSpec - (optional) defines the behavior of the scale. More info status ScaleStatus - (optional) current status of the scale. More info Read-only. ScaleSpec class lightkube.models.autoscaling_v1. ScaleSpec ( replicas=None ) ScaleSpec describes the attributes of a scale subresource. parameters replicas int - (optional) desired number of instances for the scaled object. ScaleStatus class lightkube.models.autoscaling_v1. ScaleStatus ( replicas , selector=None ) ScaleStatus represents the current status of a scale subresource. parameters replicas int - actual number of observed instances of the scaled object. selector str - (optional) label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors","title":"autoscaling_v1"},{"location":"models/autoscaling_v1/#autoscaling_v1","text":"","title":"autoscaling_v1"},{"location":"models/autoscaling_v1/#crossversionobjectreference","text":"class lightkube.models.autoscaling_v1. CrossVersionObjectReference ( kind , name , apiVersion=None ) CrossVersionObjectReference contains enough information to let you identify the referred resource. parameters kind str - Kind of the referent; More info name str - Name of the referent; More info apiVersion str - (optional) API version of the referent","title":"CrossVersionObjectReference"},{"location":"models/autoscaling_v1/#horizontalpodautoscaler","text":"class lightkube.models.autoscaling_v1. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) configuration of a horizontal pod autoscaler. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. More info spec HorizontalPodAutoscalerSpec - (optional) behaviour of autoscaler. More info status HorizontalPodAutoscalerStatus - (optional) current information about the autoscaler.","title":"HorizontalPodAutoscaler"},{"location":"models/autoscaling_v1/#horizontalpodautoscalerlist","text":"class lightkube.models.autoscaling_v1. HorizontalPodAutoscalerList ( items , apiVersion=None , kind=None , metadata=None ) list of horizontal pod autoscaler objects. parameters items HorizontalPodAutoscaler - list of horizontal pod autoscaler objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata.","title":"HorizontalPodAutoscalerList"},{"location":"models/autoscaling_v1/#horizontalpodautoscalerspec","text":"class lightkube.models.autoscaling_v1. HorizontalPodAutoscalerSpec ( maxReplicas , scaleTargetRef , minReplicas=None , targetCPUUtilizationPercentage=None ) specification of a horizontal pod autoscaler. parameters maxReplicas int - upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas. scaleTargetRef CrossVersionObjectReference - reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource. minReplicas int - (optional) minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available. targetCPUUtilizationPercentage int - (optional) target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.","title":"HorizontalPodAutoscalerSpec"},{"location":"models/autoscaling_v1/#horizontalpodautoscalerstatus","text":"class lightkube.models.autoscaling_v1. HorizontalPodAutoscalerStatus ( currentReplicas , desiredReplicas , currentCPUUtilizationPercentage=None , lastScaleTime=None , observedGeneration=None ) current status of a horizontal pod autoscaler parameters currentReplicas int - current number of replicas of pods managed by this autoscaler. desiredReplicas int - desired number of replicas of pods managed by this autoscaler. currentCPUUtilizationPercentage int - (optional) current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU. lastScaleTime meta_v1.Time - (optional) last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed. observedGeneration int - (optional) most recent generation observed by this autoscaler.","title":"HorizontalPodAutoscalerStatus"},{"location":"models/autoscaling_v1/#scale","text":"class lightkube.models.autoscaling_v1. Scale ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Scale represents a scaling request for a resource. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata; More info spec ScaleSpec - (optional) defines the behavior of the scale. More info status ScaleStatus - (optional) current status of the scale. More info Read-only.","title":"Scale"},{"location":"models/autoscaling_v1/#scalespec","text":"class lightkube.models.autoscaling_v1. ScaleSpec ( replicas=None ) ScaleSpec describes the attributes of a scale subresource. parameters replicas int - (optional) desired number of instances for the scaled object.","title":"ScaleSpec"},{"location":"models/autoscaling_v1/#scalestatus","text":"class lightkube.models.autoscaling_v1. ScaleStatus ( replicas , selector=None ) ScaleStatus represents the current status of a scale subresource. parameters replicas int - actual number of observed instances of the scaled object. selector str - (optional) label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors","title":"ScaleStatus"},{"location":"models/autoscaling_v2beta1/","text":"autoscaling_v2beta1 CrossVersionObjectReference class lightkube.models.autoscaling_v2beta1. CrossVersionObjectReference ( kind , name , apiVersion=None ) CrossVersionObjectReference contains enough information to let you identify the referred resource. parameters kind str - Kind of the referent; More info name str - Name of the referent; More info apiVersion str - (optional) API version of the referent ExternalMetricSource class lightkube.models.autoscaling_v2beta1. ExternalMetricSource ( metricName , metricSelector=None , targetAverageValue=None , targetValue=None ) ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one \"target\" type should be set. parameters metricName str - metricName is the name of the metric in question. metricSelector meta_v1.LabelSelector - (optional) metricSelector is used to identify a specific time series within a given metric. targetAverageValue resource.Quantity - (optional) targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue. targetValue resource.Quantity - (optional) targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue. ExternalMetricStatus class lightkube.models.autoscaling_v2beta1. ExternalMetricStatus ( currentValue , metricName , currentAverageValue=None , metricSelector=None ) ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object. parameters currentValue resource.Quantity - currentValue is the current value of the metric (as a quantity) metricName str - metricName is the name of a metric used for autoscaling in metric system. currentAverageValue resource.Quantity - (optional) currentAverageValue is the current value of metric averaged over autoscaled pods. metricSelector meta_v1.LabelSelector - (optional) metricSelector is used to identify a specific time series within a given metric. HorizontalPodAutoscaler class lightkube.models.autoscaling_v2beta1. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata is the standard object metadata. More info spec HorizontalPodAutoscalerSpec - (optional) spec is the specification for the behaviour of the autoscaler. More info status HorizontalPodAutoscalerStatus - (optional) status is the current information about the autoscaler. HorizontalPodAutoscalerCondition class lightkube.models.autoscaling_v2beta1. HorizontalPodAutoscalerCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point. parameters status str - status is the status of the condition (True, False, Unknown) type str - type describes the current condition lastTransitionTime meta_v1.Time - (optional) lastTransitionTime is the last time the condition transitioned from one status to another message str - (optional) message is a human-readable explanation containing details about the transition reason str - (optional) reason is the reason for the condition's last transition. HorizontalPodAutoscalerList class lightkube.models.autoscaling_v2beta1. HorizontalPodAutoscalerList ( items , apiVersion=None , kind=None , metadata=None ) HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects. parameters items HorizontalPodAutoscaler - items is the list of horizontal pod autoscaler objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) metadata is the standard list metadata. HorizontalPodAutoscalerSpec class lightkube.models.autoscaling_v2beta1. HorizontalPodAutoscalerSpec ( maxReplicas , scaleTargetRef , metrics=None , minReplicas=None ) HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler. parameters maxReplicas int - maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas. scaleTargetRef CrossVersionObjectReference - scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count. metrics MetricSpec - (optional) metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods. Ergo, metrics used must decrease as the pod count is increased, and vice-versa. See the individual metric source types for more information about how each type of metric must respond. minReplicas int - (optional) minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available. HorizontalPodAutoscalerStatus class lightkube.models.autoscaling_v2beta1. HorizontalPodAutoscalerStatus ( conditions , currentReplicas , desiredReplicas , currentMetrics=None , lastScaleTime=None , observedGeneration=None ) HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler. parameters conditions HorizontalPodAutoscalerCondition - conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met. currentReplicas int - currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler. desiredReplicas int - desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler. currentMetrics MetricStatus - (optional) currentMetrics is the last read state of the metrics used by this autoscaler. lastScaleTime meta_v1.Time - (optional) lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed. observedGeneration int - (optional) observedGeneration is the most recent generation observed by this autoscaler. MetricSpec class lightkube.models.autoscaling_v2beta1. MetricSpec ( type , external=None , object=None , pods=None , resource=None ) MetricSpec specifies how to scale based on a single metric (only type and one other matching field should be set at once). parameters type str - type is the type of metric source. It should be one of \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. external ExternalMetricSource - (optional) external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). object ObjectMetricSource - (optional) object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object). pods PodsMetricSource - (optional) pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. resource ResourceMetricSource - (optional) resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. MetricStatus class lightkube.models.autoscaling_v2beta1. MetricStatus ( type , external=None , object=None , pods=None , resource=None ) MetricStatus describes the last-read state of a single metric. parameters type str - type is the type of metric source. It will be one of \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. external ExternalMetricStatus - (optional) external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). object ObjectMetricStatus - (optional) object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object). pods PodsMetricStatus - (optional) pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. resource ResourceMetricStatus - (optional) resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. ObjectMetricSource class lightkube.models.autoscaling_v2beta1. ObjectMetricSource ( metricName , target , targetValue , averageValue=None , selector=None ) ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object). parameters metricName str - metricName is the name of the metric in question. target CrossVersionObjectReference - target is the described Kubernetes object. targetValue resource.Quantity - targetValue is the target value of the metric (as a quantity). averageValue resource.Quantity - (optional) averageValue is the target value of the average of the metric across all relevant pods (as a quantity) selector meta_v1.LabelSelector - (optional) selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics. ObjectMetricStatus class lightkube.models.autoscaling_v2beta1. ObjectMetricStatus ( currentValue , metricName , target , averageValue=None , selector=None ) ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object). parameters currentValue resource.Quantity - currentValue is the current value of the metric (as a quantity). metricName str - metricName is the name of the metric in question. target CrossVersionObjectReference - target is the described Kubernetes object. averageValue resource.Quantity - (optional) averageValue is the current value of the average of the metric across all relevant pods (as a quantity) selector meta_v1.LabelSelector - (optional) selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics. PodsMetricSource class lightkube.models.autoscaling_v2beta1. PodsMetricSource ( metricName , targetAverageValue , selector=None ) PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. parameters metricName str - metricName is the name of the metric in question targetAverageValue resource.Quantity - targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity) selector meta_v1.LabelSelector - (optional) selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics. PodsMetricStatus class lightkube.models.autoscaling_v2beta1. PodsMetricStatus ( currentAverageValue , metricName , selector=None ) PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second). parameters currentAverageValue resource.Quantity - currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity) metricName str - metricName is the name of the metric in question selector meta_v1.LabelSelector - (optional) selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics. ResourceMetricSource class lightkube.models.autoscaling_v2beta1. ResourceMetricSource ( name , targetAverageUtilization=None , targetAverageValue=None ) ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). The values will be averaged together before being compared to the target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. Only one \"target\" type should be set. parameters name str - name is the name of the resource in question. targetAverageUtilization int - (optional) targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. targetAverageValue resource.Quantity - (optional) targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type. ResourceMetricStatus class lightkube.models.autoscaling_v2beta1. ResourceMetricStatus ( currentAverageValue , name , currentAverageUtilization=None ) ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. parameters currentAverageValue resource.Quantity - currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type. It will always be set, regardless of the corresponding metric specification. name str - name is the name of the resource in question. currentAverageUtilization int - (optional) currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. It will only be present if targetAverageValue was set in the corresponding metric specification.","title":"autoscaling_v2beta1"},{"location":"models/autoscaling_v2beta1/#autoscaling_v2beta1","text":"","title":"autoscaling_v2beta1"},{"location":"models/autoscaling_v2beta1/#crossversionobjectreference","text":"class lightkube.models.autoscaling_v2beta1. CrossVersionObjectReference ( kind , name , apiVersion=None ) CrossVersionObjectReference contains enough information to let you identify the referred resource. parameters kind str - Kind of the referent; More info name str - Name of the referent; More info apiVersion str - (optional) API version of the referent","title":"CrossVersionObjectReference"},{"location":"models/autoscaling_v2beta1/#externalmetricsource","text":"class lightkube.models.autoscaling_v2beta1. ExternalMetricSource ( metricName , metricSelector=None , targetAverageValue=None , targetValue=None ) ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one \"target\" type should be set. parameters metricName str - metricName is the name of the metric in question. metricSelector meta_v1.LabelSelector - (optional) metricSelector is used to identify a specific time series within a given metric. targetAverageValue resource.Quantity - (optional) targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue. targetValue resource.Quantity - (optional) targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.","title":"ExternalMetricSource"},{"location":"models/autoscaling_v2beta1/#externalmetricstatus","text":"class lightkube.models.autoscaling_v2beta1. ExternalMetricStatus ( currentValue , metricName , currentAverageValue=None , metricSelector=None ) ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object. parameters currentValue resource.Quantity - currentValue is the current value of the metric (as a quantity) metricName str - metricName is the name of a metric used for autoscaling in metric system. currentAverageValue resource.Quantity - (optional) currentAverageValue is the current value of metric averaged over autoscaled pods. metricSelector meta_v1.LabelSelector - (optional) metricSelector is used to identify a specific time series within a given metric.","title":"ExternalMetricStatus"},{"location":"models/autoscaling_v2beta1/#horizontalpodautoscaler","text":"class lightkube.models.autoscaling_v2beta1. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata is the standard object metadata. More info spec HorizontalPodAutoscalerSpec - (optional) spec is the specification for the behaviour of the autoscaler. More info status HorizontalPodAutoscalerStatus - (optional) status is the current information about the autoscaler.","title":"HorizontalPodAutoscaler"},{"location":"models/autoscaling_v2beta1/#horizontalpodautoscalercondition","text":"class lightkube.models.autoscaling_v2beta1. HorizontalPodAutoscalerCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point. parameters status str - status is the status of the condition (True, False, Unknown) type str - type describes the current condition lastTransitionTime meta_v1.Time - (optional) lastTransitionTime is the last time the condition transitioned from one status to another message str - (optional) message is a human-readable explanation containing details about the transition reason str - (optional) reason is the reason for the condition's last transition.","title":"HorizontalPodAutoscalerCondition"},{"location":"models/autoscaling_v2beta1/#horizontalpodautoscalerlist","text":"class lightkube.models.autoscaling_v2beta1. HorizontalPodAutoscalerList ( items , apiVersion=None , kind=None , metadata=None ) HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects. parameters items HorizontalPodAutoscaler - items is the list of horizontal pod autoscaler objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) metadata is the standard list metadata.","title":"HorizontalPodAutoscalerList"},{"location":"models/autoscaling_v2beta1/#horizontalpodautoscalerspec","text":"class lightkube.models.autoscaling_v2beta1. HorizontalPodAutoscalerSpec ( maxReplicas , scaleTargetRef , metrics=None , minReplicas=None ) HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler. parameters maxReplicas int - maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas. scaleTargetRef CrossVersionObjectReference - scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count. metrics MetricSpec - (optional) metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods. Ergo, metrics used must decrease as the pod count is increased, and vice-versa. See the individual metric source types for more information about how each type of metric must respond. minReplicas int - (optional) minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available.","title":"HorizontalPodAutoscalerSpec"},{"location":"models/autoscaling_v2beta1/#horizontalpodautoscalerstatus","text":"class lightkube.models.autoscaling_v2beta1. HorizontalPodAutoscalerStatus ( conditions , currentReplicas , desiredReplicas , currentMetrics=None , lastScaleTime=None , observedGeneration=None ) HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler. parameters conditions HorizontalPodAutoscalerCondition - conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met. currentReplicas int - currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler. desiredReplicas int - desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler. currentMetrics MetricStatus - (optional) currentMetrics is the last read state of the metrics used by this autoscaler. lastScaleTime meta_v1.Time - (optional) lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed. observedGeneration int - (optional) observedGeneration is the most recent generation observed by this autoscaler.","title":"HorizontalPodAutoscalerStatus"},{"location":"models/autoscaling_v2beta1/#metricspec","text":"class lightkube.models.autoscaling_v2beta1. MetricSpec ( type , external=None , object=None , pods=None , resource=None ) MetricSpec specifies how to scale based on a single metric (only type and one other matching field should be set at once). parameters type str - type is the type of metric source. It should be one of \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. external ExternalMetricSource - (optional) external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). object ObjectMetricSource - (optional) object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object). pods PodsMetricSource - (optional) pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. resource ResourceMetricSource - (optional) resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.","title":"MetricSpec"},{"location":"models/autoscaling_v2beta1/#metricstatus","text":"class lightkube.models.autoscaling_v2beta1. MetricStatus ( type , external=None , object=None , pods=None , resource=None ) MetricStatus describes the last-read state of a single metric. parameters type str - type is the type of metric source. It will be one of \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. external ExternalMetricStatus - (optional) external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). object ObjectMetricStatus - (optional) object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object). pods PodsMetricStatus - (optional) pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. resource ResourceMetricStatus - (optional) resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.","title":"MetricStatus"},{"location":"models/autoscaling_v2beta1/#objectmetricsource","text":"class lightkube.models.autoscaling_v2beta1. ObjectMetricSource ( metricName , target , targetValue , averageValue=None , selector=None ) ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object). parameters metricName str - metricName is the name of the metric in question. target CrossVersionObjectReference - target is the described Kubernetes object. targetValue resource.Quantity - targetValue is the target value of the metric (as a quantity). averageValue resource.Quantity - (optional) averageValue is the target value of the average of the metric across all relevant pods (as a quantity) selector meta_v1.LabelSelector - (optional) selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.","title":"ObjectMetricSource"},{"location":"models/autoscaling_v2beta1/#objectmetricstatus","text":"class lightkube.models.autoscaling_v2beta1. ObjectMetricStatus ( currentValue , metricName , target , averageValue=None , selector=None ) ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object). parameters currentValue resource.Quantity - currentValue is the current value of the metric (as a quantity). metricName str - metricName is the name of the metric in question. target CrossVersionObjectReference - target is the described Kubernetes object. averageValue resource.Quantity - (optional) averageValue is the current value of the average of the metric across all relevant pods (as a quantity) selector meta_v1.LabelSelector - (optional) selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.","title":"ObjectMetricStatus"},{"location":"models/autoscaling_v2beta1/#podsmetricsource","text":"class lightkube.models.autoscaling_v2beta1. PodsMetricSource ( metricName , targetAverageValue , selector=None ) PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. parameters metricName str - metricName is the name of the metric in question targetAverageValue resource.Quantity - targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity) selector meta_v1.LabelSelector - (optional) selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.","title":"PodsMetricSource"},{"location":"models/autoscaling_v2beta1/#podsmetricstatus","text":"class lightkube.models.autoscaling_v2beta1. PodsMetricStatus ( currentAverageValue , metricName , selector=None ) PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second). parameters currentAverageValue resource.Quantity - currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity) metricName str - metricName is the name of the metric in question selector meta_v1.LabelSelector - (optional) selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.","title":"PodsMetricStatus"},{"location":"models/autoscaling_v2beta1/#resourcemetricsource","text":"class lightkube.models.autoscaling_v2beta1. ResourceMetricSource ( name , targetAverageUtilization=None , targetAverageValue=None ) ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). The values will be averaged together before being compared to the target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. Only one \"target\" type should be set. parameters name str - name is the name of the resource in question. targetAverageUtilization int - (optional) targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. targetAverageValue resource.Quantity - (optional) targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type.","title":"ResourceMetricSource"},{"location":"models/autoscaling_v2beta1/#resourcemetricstatus","text":"class lightkube.models.autoscaling_v2beta1. ResourceMetricStatus ( currentAverageValue , name , currentAverageUtilization=None ) ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. parameters currentAverageValue resource.Quantity - currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \"pods\" metric source type. It will always be set, regardless of the corresponding metric specification. name str - name is the name of the resource in question. currentAverageUtilization int - (optional) currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. It will only be present if targetAverageValue was set in the corresponding metric specification.","title":"ResourceMetricStatus"},{"location":"models/autoscaling_v2beta2/","text":"autoscaling_v2beta2 CrossVersionObjectReference class lightkube.models.autoscaling_v2beta2. CrossVersionObjectReference ( kind , name , apiVersion=None ) CrossVersionObjectReference contains enough information to let you identify the referred resource. parameters kind str - Kind of the referent; More info name str - Name of the referent; More info apiVersion str - (optional) API version of the referent ExternalMetricSource class lightkube.models.autoscaling_v2beta2. ExternalMetricSource ( metric , target ) ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). parameters metric MetricIdentifier - metric identifies the target metric by name and selector target MetricTarget - target specifies the target value for the given metric ExternalMetricStatus class lightkube.models.autoscaling_v2beta2. ExternalMetricStatus ( current , metric ) ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object. parameters current MetricValueStatus - current contains the current value for the given metric metric MetricIdentifier - metric identifies the target metric by name and selector HPAScalingPolicy class lightkube.models.autoscaling_v2beta2. HPAScalingPolicy ( periodSeconds , type , value ) HPAScalingPolicy is a single policy which must hold true for a specified past interval. parameters periodSeconds int - PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min). type str - Type is used to specify the scaling policy. value int - Value contains the amount of change which is permitted by the policy. It must be greater than zero HPAScalingRules class lightkube.models.autoscaling_v2beta2. HPAScalingRules ( policies=None , selectPolicy=None , stabilizationWindowSeconds=None ) HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen. parameters policies HPAScalingPolicy - (optional) policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid selectPolicy str - (optional) selectPolicy is used to specify which policy should be used. If not set, the default value MaxPolicySelect is used. stabilizationWindowSeconds int - (optional) StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long). HorizontalPodAutoscaler class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata is the standard object metadata. More info spec HorizontalPodAutoscalerSpec - (optional) spec is the specification for the behaviour of the autoscaler. More info status HorizontalPodAutoscalerStatus - (optional) status is the current information about the autoscaler. HorizontalPodAutoscalerBehavior class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscalerBehavior ( scaleDown=None , scaleUp=None ) HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). parameters scaleDown HPAScalingRules - (optional) scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used). scaleUp HPAScalingRules - (optional) scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of: increase no more than 4 pods per 60 seconds double the number of pods per 60 seconds No stabilization is used. HorizontalPodAutoscalerCondition class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscalerCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point. parameters status str - status is the status of the condition (True, False, Unknown) type str - type describes the current condition lastTransitionTime meta_v1.Time - (optional) lastTransitionTime is the last time the condition transitioned from one status to another message str - (optional) message is a human-readable explanation containing details about the transition reason str - (optional) reason is the reason for the condition's last transition. HorizontalPodAutoscalerList class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscalerList ( items , apiVersion=None , kind=None , metadata=None ) HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects. parameters items HorizontalPodAutoscaler - items is the list of horizontal pod autoscaler objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) metadata is the standard list metadata. HorizontalPodAutoscalerSpec class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscalerSpec ( maxReplicas , scaleTargetRef , behavior=None , metrics=None , minReplicas=None ) HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler. parameters maxReplicas int - maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas. scaleTargetRef CrossVersionObjectReference - scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count. behavior HorizontalPodAutoscalerBehavior - (optional) behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used. metrics MetricSpec - (optional) metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods. Ergo, metrics used must decrease as the pod count is increased, and vice-versa. See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization. minReplicas int - (optional) minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available. HorizontalPodAutoscalerStatus class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscalerStatus ( conditions , currentReplicas , desiredReplicas , currentMetrics=None , lastScaleTime=None , observedGeneration=None ) HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler. parameters conditions HorizontalPodAutoscalerCondition - conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met. currentReplicas int - currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler. desiredReplicas int - desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler. currentMetrics MetricStatus - (optional) currentMetrics is the last read state of the metrics used by this autoscaler. lastScaleTime meta_v1.Time - (optional) lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed. observedGeneration int - (optional) observedGeneration is the most recent generation observed by this autoscaler. MetricIdentifier class lightkube.models.autoscaling_v2beta2. MetricIdentifier ( name , selector=None ) MetricIdentifier defines the name and optionally selector for a metric parameters name str - name is the name of the given metric selector meta_v1.LabelSelector - (optional) selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics. MetricSpec class lightkube.models.autoscaling_v2beta2. MetricSpec ( type , external=None , object=None , pods=None , resource=None ) MetricSpec specifies how to scale based on a single metric (only type and one other matching field should be set at once). parameters type str - type is the type of metric source. It should be one of \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. external ExternalMetricSource - (optional) external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). object ObjectMetricSource - (optional) object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object). pods PodsMetricSource - (optional) pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. resource ResourceMetricSource - (optional) resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. MetricStatus class lightkube.models.autoscaling_v2beta2. MetricStatus ( type , external=None , object=None , pods=None , resource=None ) MetricStatus describes the last-read state of a single metric. parameters type str - type is the type of metric source. It will be one of \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. external ExternalMetricStatus - (optional) external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). object ObjectMetricStatus - (optional) object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object). pods PodsMetricStatus - (optional) pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. resource ResourceMetricStatus - (optional) resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. MetricTarget class lightkube.models.autoscaling_v2beta2. MetricTarget ( type , averageUtilization=None , averageValue=None , value=None ) MetricTarget defines the target value, average value, or average utilization of a specific metric parameters type str - type represents whether the metric type is Utilization, Value, or AverageValue averageUtilization int - (optional) averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type averageValue resource.Quantity - (optional) averageValue is the target value of the average of the metric across all relevant pods (as a quantity) value resource.Quantity - (optional) value is the target value of the metric (as a quantity). MetricValueStatus class lightkube.models.autoscaling_v2beta2. MetricValueStatus ( averageUtilization=None , averageValue=None , value=None ) MetricValueStatus holds the current value for a metric parameters averageUtilization int - (optional) currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. averageValue resource.Quantity - (optional) averageValue is the current value of the average of the metric across all relevant pods (as a quantity) value resource.Quantity - (optional) value is the current value of the metric (as a quantity). ObjectMetricSource class lightkube.models.autoscaling_v2beta2. ObjectMetricSource ( describedObject , metric , target ) ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object). parameters describedObject CrossVersionObjectReference - metric MetricIdentifier - metric identifies the target metric by name and selector target MetricTarget - target specifies the target value for the given metric ObjectMetricStatus class lightkube.models.autoscaling_v2beta2. ObjectMetricStatus ( current , describedObject , metric ) ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object). parameters current MetricValueStatus - current contains the current value for the given metric describedObject CrossVersionObjectReference - metric MetricIdentifier - metric identifies the target metric by name and selector PodsMetricSource class lightkube.models.autoscaling_v2beta2. PodsMetricSource ( metric , target ) PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. parameters metric MetricIdentifier - metric identifies the target metric by name and selector target MetricTarget - target specifies the target value for the given metric PodsMetricStatus class lightkube.models.autoscaling_v2beta2. PodsMetricStatus ( current , metric ) PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second). parameters current MetricValueStatus - current contains the current value for the given metric metric MetricIdentifier - metric identifies the target metric by name and selector ResourceMetricSource class lightkube.models.autoscaling_v2beta2. ResourceMetricSource ( name , target ) ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). The values will be averaged together before being compared to the target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. Only one \"target\" type should be set. parameters name str - name is the name of the resource in question. target MetricTarget - target specifies the target value for the given metric ResourceMetricStatus class lightkube.models.autoscaling_v2beta2. ResourceMetricStatus ( current , name ) ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. parameters current MetricValueStatus - current contains the current value for the given metric name str - Name is the name of the resource in question.","title":"autoscaling_v2beta2"},{"location":"models/autoscaling_v2beta2/#autoscaling_v2beta2","text":"","title":"autoscaling_v2beta2"},{"location":"models/autoscaling_v2beta2/#crossversionobjectreference","text":"class lightkube.models.autoscaling_v2beta2. CrossVersionObjectReference ( kind , name , apiVersion=None ) CrossVersionObjectReference contains enough information to let you identify the referred resource. parameters kind str - Kind of the referent; More info name str - Name of the referent; More info apiVersion str - (optional) API version of the referent","title":"CrossVersionObjectReference"},{"location":"models/autoscaling_v2beta2/#externalmetricsource","text":"class lightkube.models.autoscaling_v2beta2. ExternalMetricSource ( metric , target ) ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). parameters metric MetricIdentifier - metric identifies the target metric by name and selector target MetricTarget - target specifies the target value for the given metric","title":"ExternalMetricSource"},{"location":"models/autoscaling_v2beta2/#externalmetricstatus","text":"class lightkube.models.autoscaling_v2beta2. ExternalMetricStatus ( current , metric ) ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object. parameters current MetricValueStatus - current contains the current value for the given metric metric MetricIdentifier - metric identifies the target metric by name and selector","title":"ExternalMetricStatus"},{"location":"models/autoscaling_v2beta2/#hpascalingpolicy","text":"class lightkube.models.autoscaling_v2beta2. HPAScalingPolicy ( periodSeconds , type , value ) HPAScalingPolicy is a single policy which must hold true for a specified past interval. parameters periodSeconds int - PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min). type str - Type is used to specify the scaling policy. value int - Value contains the amount of change which is permitted by the policy. It must be greater than zero","title":"HPAScalingPolicy"},{"location":"models/autoscaling_v2beta2/#hpascalingrules","text":"class lightkube.models.autoscaling_v2beta2. HPAScalingRules ( policies=None , selectPolicy=None , stabilizationWindowSeconds=None ) HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen. parameters policies HPAScalingPolicy - (optional) policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid selectPolicy str - (optional) selectPolicy is used to specify which policy should be used. If not set, the default value MaxPolicySelect is used. stabilizationWindowSeconds int - (optional) StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).","title":"HPAScalingRules"},{"location":"models/autoscaling_v2beta2/#horizontalpodautoscaler","text":"class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata is the standard object metadata. More info spec HorizontalPodAutoscalerSpec - (optional) spec is the specification for the behaviour of the autoscaler. More info status HorizontalPodAutoscalerStatus - (optional) status is the current information about the autoscaler.","title":"HorizontalPodAutoscaler"},{"location":"models/autoscaling_v2beta2/#horizontalpodautoscalerbehavior","text":"class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscalerBehavior ( scaleDown=None , scaleUp=None ) HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). parameters scaleDown HPAScalingRules - (optional) scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used). scaleUp HPAScalingRules - (optional) scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of: increase no more than 4 pods per 60 seconds double the number of pods per 60 seconds No stabilization is used.","title":"HorizontalPodAutoscalerBehavior"},{"location":"models/autoscaling_v2beta2/#horizontalpodautoscalercondition","text":"class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscalerCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point. parameters status str - status is the status of the condition (True, False, Unknown) type str - type describes the current condition lastTransitionTime meta_v1.Time - (optional) lastTransitionTime is the last time the condition transitioned from one status to another message str - (optional) message is a human-readable explanation containing details about the transition reason str - (optional) reason is the reason for the condition's last transition.","title":"HorizontalPodAutoscalerCondition"},{"location":"models/autoscaling_v2beta2/#horizontalpodautoscalerlist","text":"class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscalerList ( items , apiVersion=None , kind=None , metadata=None ) HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects. parameters items HorizontalPodAutoscaler - items is the list of horizontal pod autoscaler objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) metadata is the standard list metadata.","title":"HorizontalPodAutoscalerList"},{"location":"models/autoscaling_v2beta2/#horizontalpodautoscalerspec","text":"class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscalerSpec ( maxReplicas , scaleTargetRef , behavior=None , metrics=None , minReplicas=None ) HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler. parameters maxReplicas int - maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas. scaleTargetRef CrossVersionObjectReference - scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count. behavior HorizontalPodAutoscalerBehavior - (optional) behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used. metrics MetricSpec - (optional) metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods. Ergo, metrics used must decrease as the pod count is increased, and vice-versa. See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization. minReplicas int - (optional) minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod. minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured. Scaling is active as long as at least one metric value is available.","title":"HorizontalPodAutoscalerSpec"},{"location":"models/autoscaling_v2beta2/#horizontalpodautoscalerstatus","text":"class lightkube.models.autoscaling_v2beta2. HorizontalPodAutoscalerStatus ( conditions , currentReplicas , desiredReplicas , currentMetrics=None , lastScaleTime=None , observedGeneration=None ) HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler. parameters conditions HorizontalPodAutoscalerCondition - conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met. currentReplicas int - currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler. desiredReplicas int - desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler. currentMetrics MetricStatus - (optional) currentMetrics is the last read state of the metrics used by this autoscaler. lastScaleTime meta_v1.Time - (optional) lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed. observedGeneration int - (optional) observedGeneration is the most recent generation observed by this autoscaler.","title":"HorizontalPodAutoscalerStatus"},{"location":"models/autoscaling_v2beta2/#metricidentifier","text":"class lightkube.models.autoscaling_v2beta2. MetricIdentifier ( name , selector=None ) MetricIdentifier defines the name and optionally selector for a metric parameters name str - name is the name of the given metric selector meta_v1.LabelSelector - (optional) selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.","title":"MetricIdentifier"},{"location":"models/autoscaling_v2beta2/#metricspec","text":"class lightkube.models.autoscaling_v2beta2. MetricSpec ( type , external=None , object=None , pods=None , resource=None ) MetricSpec specifies how to scale based on a single metric (only type and one other matching field should be set at once). parameters type str - type is the type of metric source. It should be one of \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. external ExternalMetricSource - (optional) external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). object ObjectMetricSource - (optional) object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object). pods PodsMetricSource - (optional) pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. resource ResourceMetricSource - (optional) resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.","title":"MetricSpec"},{"location":"models/autoscaling_v2beta2/#metricstatus","text":"class lightkube.models.autoscaling_v2beta2. MetricStatus ( type , external=None , object=None , pods=None , resource=None ) MetricStatus describes the last-read state of a single metric. parameters type str - type is the type of metric source. It will be one of \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. external ExternalMetricStatus - (optional) external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). object ObjectMetricStatus - (optional) object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object). pods PodsMetricStatus - (optional) pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. resource ResourceMetricStatus - (optional) resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.","title":"MetricStatus"},{"location":"models/autoscaling_v2beta2/#metrictarget","text":"class lightkube.models.autoscaling_v2beta2. MetricTarget ( type , averageUtilization=None , averageValue=None , value=None ) MetricTarget defines the target value, average value, or average utilization of a specific metric parameters type str - type represents whether the metric type is Utilization, Value, or AverageValue averageUtilization int - (optional) averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type averageValue resource.Quantity - (optional) averageValue is the target value of the average of the metric across all relevant pods (as a quantity) value resource.Quantity - (optional) value is the target value of the metric (as a quantity).","title":"MetricTarget"},{"location":"models/autoscaling_v2beta2/#metricvaluestatus","text":"class lightkube.models.autoscaling_v2beta2. MetricValueStatus ( averageUtilization=None , averageValue=None , value=None ) MetricValueStatus holds the current value for a metric parameters averageUtilization int - (optional) currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. averageValue resource.Quantity - (optional) averageValue is the current value of the average of the metric across all relevant pods (as a quantity) value resource.Quantity - (optional) value is the current value of the metric (as a quantity).","title":"MetricValueStatus"},{"location":"models/autoscaling_v2beta2/#objectmetricsource","text":"class lightkube.models.autoscaling_v2beta2. ObjectMetricSource ( describedObject , metric , target ) ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object). parameters describedObject CrossVersionObjectReference - metric MetricIdentifier - metric identifies the target metric by name and selector target MetricTarget - target specifies the target value for the given metric","title":"ObjectMetricSource"},{"location":"models/autoscaling_v2beta2/#objectmetricstatus","text":"class lightkube.models.autoscaling_v2beta2. ObjectMetricStatus ( current , describedObject , metric ) ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object). parameters current MetricValueStatus - current contains the current value for the given metric describedObject CrossVersionObjectReference - metric MetricIdentifier - metric identifies the target metric by name and selector","title":"ObjectMetricStatus"},{"location":"models/autoscaling_v2beta2/#podsmetricsource","text":"class lightkube.models.autoscaling_v2beta2. PodsMetricSource ( metric , target ) PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value. parameters metric MetricIdentifier - metric identifies the target metric by name and selector target MetricTarget - target specifies the target value for the given metric","title":"PodsMetricSource"},{"location":"models/autoscaling_v2beta2/#podsmetricstatus","text":"class lightkube.models.autoscaling_v2beta2. PodsMetricStatus ( current , metric ) PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second). parameters current MetricValueStatus - current contains the current value for the given metric metric MetricIdentifier - metric identifies the target metric by name and selector","title":"PodsMetricStatus"},{"location":"models/autoscaling_v2beta2/#resourcemetricsource","text":"class lightkube.models.autoscaling_v2beta2. ResourceMetricSource ( name , target ) ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). The values will be averaged together before being compared to the target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. Only one \"target\" type should be set. parameters name str - name is the name of the resource in question. target MetricTarget - target specifies the target value for the given metric","title":"ResourceMetricSource"},{"location":"models/autoscaling_v2beta2/#resourcemetricstatus","text":"class lightkube.models.autoscaling_v2beta2. ResourceMetricStatus ( current , name ) ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. parameters current MetricValueStatus - current contains the current value for the given metric name str - Name is the name of the resource in question.","title":"ResourceMetricStatus"},{"location":"models/batch_v1/","text":"batch_v1 Job class lightkube.models.batch_v1. Job ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Job represents the configuration of a single job. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec JobSpec - (optional) Specification of the desired behavior of a job. More info status JobStatus - (optional) Current status of a job. More info JobCondition class lightkube.models.batch_v1. JobCondition ( status , type , lastProbeTime=None , lastTransitionTime=None , message=None , reason=None ) JobCondition describes current state of a job. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of job condition, Complete or Failed. lastProbeTime meta_v1.Time - (optional) Last time the condition was checked. lastTransitionTime meta_v1.Time - (optional) Last time the condition transit from one status to another. message str - (optional) Human readable message indicating details about last transition. reason str - (optional) (brief) reason for the condition's last transition. JobList class lightkube.models.batch_v1. JobList ( items , apiVersion=None , kind=None , metadata=None ) JobList is a collection of jobs. parameters items Job - items is the list of Jobs. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info JobSpec class lightkube.models.batch_v1. JobSpec ( template , activeDeadlineSeconds=None , backoffLimit=None , completions=None , manualSelector=None , parallelism=None , selector=None , ttlSecondsAfterFinished=None ) JobSpec describes how the job execution will look like. parameters template core_v1.PodTemplateSpec - Describes the pod that will be created when executing a job. More info activeDeadlineSeconds int - (optional) Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer backoffLimit int - (optional) Specifies the number of retries before marking this job failed. Defaults to 6 completions int - (optional) Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info manualSelector bool - (optional) manualSelector controls generation of pod labels and pod selectors. Leave manualSelector unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. However, You may see manualSelector=true in jobs that were created with the old extensions/v1beta1 API. More info parallelism int - (optional) Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info selector meta_v1.LabelSelector - (optional) A label query over pods that should match the pod count. Normally, the system sets this field for you. More info ttlSecondsAfterFinished int - (optional) ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature. JobStatus class lightkube.models.batch_v1. JobStatus ( active=None , completionTime=None , conditions=None , failed=None , startTime=None , succeeded=None ) JobStatus represents the current state of a Job. parameters active int - (optional) The number of actively running pods. completionTime meta_v1.Time - (optional) Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. conditions JobCondition - (optional) The latest available observations of an object's current state. More info failed int - (optional) The number of pods which reached phase Failed. startTime meta_v1.Time - (optional) Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. succeeded int - (optional) The number of pods which reached phase Succeeded.","title":"batch_v1"},{"location":"models/batch_v1/#batch_v1","text":"","title":"batch_v1"},{"location":"models/batch_v1/#job","text":"class lightkube.models.batch_v1. Job ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Job represents the configuration of a single job. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec JobSpec - (optional) Specification of the desired behavior of a job. More info status JobStatus - (optional) Current status of a job. More info","title":"Job"},{"location":"models/batch_v1/#jobcondition","text":"class lightkube.models.batch_v1. JobCondition ( status , type , lastProbeTime=None , lastTransitionTime=None , message=None , reason=None ) JobCondition describes current state of a job. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of job condition, Complete or Failed. lastProbeTime meta_v1.Time - (optional) Last time the condition was checked. lastTransitionTime meta_v1.Time - (optional) Last time the condition transit from one status to another. message str - (optional) Human readable message indicating details about last transition. reason str - (optional) (brief) reason for the condition's last transition.","title":"JobCondition"},{"location":"models/batch_v1/#joblist","text":"class lightkube.models.batch_v1. JobList ( items , apiVersion=None , kind=None , metadata=None ) JobList is a collection of jobs. parameters items Job - items is the list of Jobs. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"JobList"},{"location":"models/batch_v1/#jobspec","text":"class lightkube.models.batch_v1. JobSpec ( template , activeDeadlineSeconds=None , backoffLimit=None , completions=None , manualSelector=None , parallelism=None , selector=None , ttlSecondsAfterFinished=None ) JobSpec describes how the job execution will look like. parameters template core_v1.PodTemplateSpec - Describes the pod that will be created when executing a job. More info activeDeadlineSeconds int - (optional) Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer backoffLimit int - (optional) Specifies the number of retries before marking this job failed. Defaults to 6 completions int - (optional) Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info manualSelector bool - (optional) manualSelector controls generation of pod labels and pod selectors. Leave manualSelector unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. However, You may see manualSelector=true in jobs that were created with the old extensions/v1beta1 API. More info parallelism int - (optional) Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info selector meta_v1.LabelSelector - (optional) A label query over pods that should match the pod count. Normally, the system sets this field for you. More info ttlSecondsAfterFinished int - (optional) ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.","title":"JobSpec"},{"location":"models/batch_v1/#jobstatus","text":"class lightkube.models.batch_v1. JobStatus ( active=None , completionTime=None , conditions=None , failed=None , startTime=None , succeeded=None ) JobStatus represents the current state of a Job. parameters active int - (optional) The number of actively running pods. completionTime meta_v1.Time - (optional) Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. conditions JobCondition - (optional) The latest available observations of an object's current state. More info failed int - (optional) The number of pods which reached phase Failed. startTime meta_v1.Time - (optional) Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. succeeded int - (optional) The number of pods which reached phase Succeeded.","title":"JobStatus"},{"location":"models/batch_v1beta1/","text":"batch_v1beta1 CronJob class lightkube.models.batch_v1beta1. CronJob ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) CronJob represents the configuration of a single cron job. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec CronJobSpec - (optional) Specification of the desired behavior of a cron job, including the schedule. More info status CronJobStatus - (optional) Current status of a cron job. More info CronJobList class lightkube.models.batch_v1beta1. CronJobList ( items , apiVersion=None , kind=None , metadata=None ) CronJobList is a collection of cron jobs. parameters items CronJob - items is the list of CronJobs. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info CronJobSpec class lightkube.models.batch_v1beta1. CronJobSpec ( jobTemplate , schedule , concurrencyPolicy=None , failedJobsHistoryLimit=None , startingDeadlineSeconds=None , successfulJobsHistoryLimit=None , suspend=None ) CronJobSpec describes how the job execution will look like and when it will actually run. parameters jobTemplate JobTemplateSpec - Specifies the job that will be created when executing a CronJob. schedule str - The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron . concurrencyPolicy str - (optional) Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one failedJobsHistoryLimit int - (optional) The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. startingDeadlineSeconds int - (optional) Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones. successfulJobsHistoryLimit int - (optional) The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3. suspend bool - (optional) This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false. CronJobStatus class lightkube.models.batch_v1beta1. CronJobStatus ( active=None , lastScheduleTime=None ) CronJobStatus represents the current state of a cron job. parameters active core_v1.ObjectReference - (optional) A list of pointers to currently running jobs. lastScheduleTime meta_v1.Time - (optional) Information when was the last time the job was successfully scheduled. JobTemplateSpec class lightkube.models.batch_v1beta1. JobTemplateSpec ( metadata=None , spec=None ) JobTemplateSpec describes the data a Job should have when created from a template parameters metadata meta_v1.ObjectMeta - (optional) Standard object's metadata of the jobs created from this template. More info spec batch_v1.JobSpec - (optional) Specification of the desired behavior of the job. More info","title":"batch_v1beta1"},{"location":"models/batch_v1beta1/#batch_v1beta1","text":"","title":"batch_v1beta1"},{"location":"models/batch_v1beta1/#cronjob","text":"class lightkube.models.batch_v1beta1. CronJob ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) CronJob represents the configuration of a single cron job. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec CronJobSpec - (optional) Specification of the desired behavior of a cron job, including the schedule. More info status CronJobStatus - (optional) Current status of a cron job. More info","title":"CronJob"},{"location":"models/batch_v1beta1/#cronjoblist","text":"class lightkube.models.batch_v1beta1. CronJobList ( items , apiVersion=None , kind=None , metadata=None ) CronJobList is a collection of cron jobs. parameters items CronJob - items is the list of CronJobs. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"CronJobList"},{"location":"models/batch_v1beta1/#cronjobspec","text":"class lightkube.models.batch_v1beta1. CronJobSpec ( jobTemplate , schedule , concurrencyPolicy=None , failedJobsHistoryLimit=None , startingDeadlineSeconds=None , successfulJobsHistoryLimit=None , suspend=None ) CronJobSpec describes how the job execution will look like and when it will actually run. parameters jobTemplate JobTemplateSpec - Specifies the job that will be created when executing a CronJob. schedule str - The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron . concurrencyPolicy str - (optional) Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one failedJobsHistoryLimit int - (optional) The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1. startingDeadlineSeconds int - (optional) Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones. successfulJobsHistoryLimit int - (optional) The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3. suspend bool - (optional) This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false.","title":"CronJobSpec"},{"location":"models/batch_v1beta1/#cronjobstatus","text":"class lightkube.models.batch_v1beta1. CronJobStatus ( active=None , lastScheduleTime=None ) CronJobStatus represents the current state of a cron job. parameters active core_v1.ObjectReference - (optional) A list of pointers to currently running jobs. lastScheduleTime meta_v1.Time - (optional) Information when was the last time the job was successfully scheduled.","title":"CronJobStatus"},{"location":"models/batch_v1beta1/#jobtemplatespec","text":"class lightkube.models.batch_v1beta1. JobTemplateSpec ( metadata=None , spec=None ) JobTemplateSpec describes the data a Job should have when created from a template parameters metadata meta_v1.ObjectMeta - (optional) Standard object's metadata of the jobs created from this template. More info spec batch_v1.JobSpec - (optional) Specification of the desired behavior of the job. More info","title":"JobTemplateSpec"},{"location":"models/batch_v2alpha1/","text":"batch_v2alpha1 CronJob class lightkube.models.batch_v2alpha1. CronJob ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) CronJob represents the configuration of a single cron job. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec CronJobSpec - (optional) Specification of the desired behavior of a cron job, including the schedule. More info status CronJobStatus - (optional) Current status of a cron job. More info CronJobList class lightkube.models.batch_v2alpha1. CronJobList ( items , apiVersion=None , kind=None , metadata=None ) CronJobList is a collection of cron jobs. parameters items CronJob - items is the list of CronJobs. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info CronJobSpec class lightkube.models.batch_v2alpha1. CronJobSpec ( jobTemplate , schedule , concurrencyPolicy=None , failedJobsHistoryLimit=None , startingDeadlineSeconds=None , successfulJobsHistoryLimit=None , suspend=None ) CronJobSpec describes how the job execution will look like and when it will actually run. parameters jobTemplate JobTemplateSpec - Specifies the job that will be created when executing a CronJob. schedule str - The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron . concurrencyPolicy str - (optional) Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one failedJobsHistoryLimit int - (optional) The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. startingDeadlineSeconds int - (optional) Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones. successfulJobsHistoryLimit int - (optional) The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. suspend bool - (optional) This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false. CronJobStatus class lightkube.models.batch_v2alpha1. CronJobStatus ( active=None , lastScheduleTime=None ) CronJobStatus represents the current state of a cron job. parameters active core_v1.ObjectReference - (optional) A list of pointers to currently running jobs. lastScheduleTime meta_v1.Time - (optional) Information when was the last time the job was successfully scheduled. JobTemplateSpec class lightkube.models.batch_v2alpha1. JobTemplateSpec ( metadata=None , spec=None ) JobTemplateSpec describes the data a Job should have when created from a template parameters metadata meta_v1.ObjectMeta - (optional) Standard object's metadata of the jobs created from this template. More info spec batch_v1.JobSpec - (optional) Specification of the desired behavior of the job. More info","title":"batch_v2alpha1"},{"location":"models/batch_v2alpha1/#batch_v2alpha1","text":"","title":"batch_v2alpha1"},{"location":"models/batch_v2alpha1/#cronjob","text":"class lightkube.models.batch_v2alpha1. CronJob ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) CronJob represents the configuration of a single cron job. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec CronJobSpec - (optional) Specification of the desired behavior of a cron job, including the schedule. More info status CronJobStatus - (optional) Current status of a cron job. More info","title":"CronJob"},{"location":"models/batch_v2alpha1/#cronjoblist","text":"class lightkube.models.batch_v2alpha1. CronJobList ( items , apiVersion=None , kind=None , metadata=None ) CronJobList is a collection of cron jobs. parameters items CronJob - items is the list of CronJobs. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"CronJobList"},{"location":"models/batch_v2alpha1/#cronjobspec","text":"class lightkube.models.batch_v2alpha1. CronJobSpec ( jobTemplate , schedule , concurrencyPolicy=None , failedJobsHistoryLimit=None , startingDeadlineSeconds=None , successfulJobsHistoryLimit=None , suspend=None ) CronJobSpec describes how the job execution will look like and when it will actually run. parameters jobTemplate JobTemplateSpec - Specifies the job that will be created when executing a CronJob. schedule str - The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron . concurrencyPolicy str - (optional) Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one failedJobsHistoryLimit int - (optional) The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. startingDeadlineSeconds int - (optional) Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones. successfulJobsHistoryLimit int - (optional) The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. suspend bool - (optional) This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false.","title":"CronJobSpec"},{"location":"models/batch_v2alpha1/#cronjobstatus","text":"class lightkube.models.batch_v2alpha1. CronJobStatus ( active=None , lastScheduleTime=None ) CronJobStatus represents the current state of a cron job. parameters active core_v1.ObjectReference - (optional) A list of pointers to currently running jobs. lastScheduleTime meta_v1.Time - (optional) Information when was the last time the job was successfully scheduled.","title":"CronJobStatus"},{"location":"models/batch_v2alpha1/#jobtemplatespec","text":"class lightkube.models.batch_v2alpha1. JobTemplateSpec ( metadata=None , spec=None ) JobTemplateSpec describes the data a Job should have when created from a template parameters metadata meta_v1.ObjectMeta - (optional) Standard object's metadata of the jobs created from this template. More info spec batch_v1.JobSpec - (optional) Specification of the desired behavior of the job. More info","title":"JobTemplateSpec"},{"location":"models/certificates_v1beta1/","text":"certificates_v1beta1 CertificateSigningRequest class lightkube.models.certificates_v1beta1. CertificateSigningRequest ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Describes a certificate signing request parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec CertificateSigningRequestSpec - (optional) The certificate request itself and any additional information. status CertificateSigningRequestStatus - (optional) Derived information about the request. CertificateSigningRequestCondition class lightkube.models.certificates_v1beta1. CertificateSigningRequestCondition ( type , lastUpdateTime=None , message=None , reason=None ) parameters type str - request approval state, currently Approved or Denied. lastUpdateTime meta_v1.Time - (optional) timestamp for the last update to this condition message str - (optional) human readable message with details about the request state reason str - (optional) brief reason for the request state CertificateSigningRequestList class lightkube.models.certificates_v1beta1. CertificateSigningRequestList ( items , apiVersion=None , kind=None , metadata=None ) parameters items CertificateSigningRequest - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) CertificateSigningRequestSpec class lightkube.models.certificates_v1beta1. CertificateSigningRequestSpec ( request , extra=None , groups=None , signerName=None , uid=None , usages=None , username=None ) This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users. parameters request str - Base64-encoded PKCS#10 CSR data extra dict - (optional) Extra information about the requesting user. See user.Info interface for details. groups List[str] - (optional) Group information about the requesting user. See user.Info interface for details. signerName str - (optional) Requested signer for the request. It is a qualified name in the form: scope-hostname.io/name . If empty, it will be defaulted: If it's a kubelet client certificate, it is assigned \"kubernetes.io/kube-apiserver-client-kubelet\". If it's a kubelet serving certificate, it is assigned \"kubernetes.io/kubelet-serving\". Otherwise, it is assigned \"kubernetes.io/legacy-unknown\". Distribution of trust for signers happens out of band. You can select on this field using spec.signerName . uid str - (optional) UID information about the requesting user. See user.Info interface for details. usages List[str] - (optional) allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3 https://tools.ietf.org/html/rfc5280#section-4.2.1.12 username str - (optional) Information about the requesting user. See user.Info interface for details. CertificateSigningRequestStatus class lightkube.models.certificates_v1beta1. CertificateSigningRequestStatus ( certificate=None , conditions=None ) parameters certificate str - (optional) If request was approved, the controller will place the issued certificate here. conditions CertificateSigningRequestCondition - (optional) Conditions applied to the request, such as approval or denial.","title":"certificates_v1beta1"},{"location":"models/certificates_v1beta1/#certificates_v1beta1","text":"","title":"certificates_v1beta1"},{"location":"models/certificates_v1beta1/#certificatesigningrequest","text":"class lightkube.models.certificates_v1beta1. CertificateSigningRequest ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Describes a certificate signing request parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec CertificateSigningRequestSpec - (optional) The certificate request itself and any additional information. status CertificateSigningRequestStatus - (optional) Derived information about the request.","title":"CertificateSigningRequest"},{"location":"models/certificates_v1beta1/#certificatesigningrequestcondition","text":"class lightkube.models.certificates_v1beta1. CertificateSigningRequestCondition ( type , lastUpdateTime=None , message=None , reason=None ) parameters type str - request approval state, currently Approved or Denied. lastUpdateTime meta_v1.Time - (optional) timestamp for the last update to this condition message str - (optional) human readable message with details about the request state reason str - (optional) brief reason for the request state","title":"CertificateSigningRequestCondition"},{"location":"models/certificates_v1beta1/#certificatesigningrequestlist","text":"class lightkube.models.certificates_v1beta1. CertificateSigningRequestList ( items , apiVersion=None , kind=None , metadata=None ) parameters items CertificateSigningRequest - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional)","title":"CertificateSigningRequestList"},{"location":"models/certificates_v1beta1/#certificatesigningrequestspec","text":"class lightkube.models.certificates_v1beta1. CertificateSigningRequestSpec ( request , extra=None , groups=None , signerName=None , uid=None , usages=None , username=None ) This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users. parameters request str - Base64-encoded PKCS#10 CSR data extra dict - (optional) Extra information about the requesting user. See user.Info interface for details. groups List[str] - (optional) Group information about the requesting user. See user.Info interface for details. signerName str - (optional) Requested signer for the request. It is a qualified name in the form: scope-hostname.io/name . If empty, it will be defaulted: If it's a kubelet client certificate, it is assigned \"kubernetes.io/kube-apiserver-client-kubelet\". If it's a kubelet serving certificate, it is assigned \"kubernetes.io/kubelet-serving\". Otherwise, it is assigned \"kubernetes.io/legacy-unknown\". Distribution of trust for signers happens out of band. You can select on this field using spec.signerName . uid str - (optional) UID information about the requesting user. See user.Info interface for details. usages List[str] - (optional) allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3 https://tools.ietf.org/html/rfc5280#section-4.2.1.12 username str - (optional) Information about the requesting user. See user.Info interface for details.","title":"CertificateSigningRequestSpec"},{"location":"models/certificates_v1beta1/#certificatesigningrequeststatus","text":"class lightkube.models.certificates_v1beta1. CertificateSigningRequestStatus ( certificate=None , conditions=None ) parameters certificate str - (optional) If request was approved, the controller will place the issued certificate here. conditions CertificateSigningRequestCondition - (optional) Conditions applied to the request, such as approval or denial.","title":"CertificateSigningRequestStatus"},{"location":"models/coordination_v1/","text":"coordination_v1 Lease class lightkube.models.coordination_v1. Lease ( apiVersion=None , kind=None , metadata=None , spec=None ) Lease defines a lease concept. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) More info spec LeaseSpec - (optional) Specification of the Lease. More info LeaseList class lightkube.models.coordination_v1. LeaseList ( items , apiVersion=None , kind=None , metadata=None ) LeaseList is a list of Lease objects. parameters items Lease - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info LeaseSpec class lightkube.models.coordination_v1. LeaseSpec ( acquireTime=None , holderIdentity=None , leaseDurationSeconds=None , leaseTransitions=None , renewTime=None ) LeaseSpec is a specification of a Lease. parameters acquireTime meta_v1.MicroTime - (optional) acquireTime is a time when the current lease was acquired. holderIdentity str - (optional) holderIdentity contains the identity of the holder of a current lease. leaseDurationSeconds int - (optional) leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime. leaseTransitions int - (optional) leaseTransitions is the number of transitions of a lease between holders. renewTime meta_v1.MicroTime - (optional) renewTime is a time when the current holder of a lease has last updated the lease.","title":"coordination_v1"},{"location":"models/coordination_v1/#coordination_v1","text":"","title":"coordination_v1"},{"location":"models/coordination_v1/#lease","text":"class lightkube.models.coordination_v1. Lease ( apiVersion=None , kind=None , metadata=None , spec=None ) Lease defines a lease concept. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) More info spec LeaseSpec - (optional) Specification of the Lease. More info","title":"Lease"},{"location":"models/coordination_v1/#leaselist","text":"class lightkube.models.coordination_v1. LeaseList ( items , apiVersion=None , kind=None , metadata=None ) LeaseList is a list of Lease objects. parameters items Lease - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"LeaseList"},{"location":"models/coordination_v1/#leasespec","text":"class lightkube.models.coordination_v1. LeaseSpec ( acquireTime=None , holderIdentity=None , leaseDurationSeconds=None , leaseTransitions=None , renewTime=None ) LeaseSpec is a specification of a Lease. parameters acquireTime meta_v1.MicroTime - (optional) acquireTime is a time when the current lease was acquired. holderIdentity str - (optional) holderIdentity contains the identity of the holder of a current lease. leaseDurationSeconds int - (optional) leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime. leaseTransitions int - (optional) leaseTransitions is the number of transitions of a lease between holders. renewTime meta_v1.MicroTime - (optional) renewTime is a time when the current holder of a lease has last updated the lease.","title":"LeaseSpec"},{"location":"models/coordination_v1beta1/","text":"coordination_v1beta1 Lease class lightkube.models.coordination_v1beta1. Lease ( apiVersion=None , kind=None , metadata=None , spec=None ) Lease defines a lease concept. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) More info spec LeaseSpec - (optional) Specification of the Lease. More info LeaseList class lightkube.models.coordination_v1beta1. LeaseList ( items , apiVersion=None , kind=None , metadata=None ) LeaseList is a list of Lease objects. parameters items Lease - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info LeaseSpec class lightkube.models.coordination_v1beta1. LeaseSpec ( acquireTime=None , holderIdentity=None , leaseDurationSeconds=None , leaseTransitions=None , renewTime=None ) LeaseSpec is a specification of a Lease. parameters acquireTime meta_v1.MicroTime - (optional) acquireTime is a time when the current lease was acquired. holderIdentity str - (optional) holderIdentity contains the identity of the holder of a current lease. leaseDurationSeconds int - (optional) leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime. leaseTransitions int - (optional) leaseTransitions is the number of transitions of a lease between holders. renewTime meta_v1.MicroTime - (optional) renewTime is a time when the current holder of a lease has last updated the lease.","title":"coordination_v1beta1"},{"location":"models/coordination_v1beta1/#coordination_v1beta1","text":"","title":"coordination_v1beta1"},{"location":"models/coordination_v1beta1/#lease","text":"class lightkube.models.coordination_v1beta1. Lease ( apiVersion=None , kind=None , metadata=None , spec=None ) Lease defines a lease concept. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) More info spec LeaseSpec - (optional) Specification of the Lease. More info","title":"Lease"},{"location":"models/coordination_v1beta1/#leaselist","text":"class lightkube.models.coordination_v1beta1. LeaseList ( items , apiVersion=None , kind=None , metadata=None ) LeaseList is a list of Lease objects. parameters items Lease - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"LeaseList"},{"location":"models/coordination_v1beta1/#leasespec","text":"class lightkube.models.coordination_v1beta1. LeaseSpec ( acquireTime=None , holderIdentity=None , leaseDurationSeconds=None , leaseTransitions=None , renewTime=None ) LeaseSpec is a specification of a Lease. parameters acquireTime meta_v1.MicroTime - (optional) acquireTime is a time when the current lease was acquired. holderIdentity str - (optional) holderIdentity contains the identity of the holder of a current lease. leaseDurationSeconds int - (optional) leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime. leaseTransitions int - (optional) leaseTransitions is the number of transitions of a lease between holders. renewTime meta_v1.MicroTime - (optional) renewTime is a time when the current holder of a lease has last updated the lease.","title":"LeaseSpec"},{"location":"models/core_v1/","text":"core_v1 AWSElasticBlockStoreVolumeSource class lightkube.models.core_v1. AWSElasticBlockStoreVolumeSource ( volumeID , fsType=None , partition=None , readOnly=None ) Represents a Persistent Disk resource in AWS. An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling. parameters volumeID str - Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info partition int - (optional) The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). readOnly bool - (optional) Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info Affinity class lightkube.models.core_v1. Affinity ( nodeAffinity=None , podAffinity=None , podAntiAffinity=None ) Affinity is a group of affinity scheduling rules. parameters nodeAffinity NodeAffinity - (optional) Describes node affinity scheduling rules for the pod. podAffinity PodAffinity - (optional) Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)). podAntiAffinity PodAntiAffinity - (optional) Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)). AttachedVolume class lightkube.models.core_v1. AttachedVolume ( devicePath , name ) AttachedVolume describes a volume attached to a node parameters devicePath str - DevicePath represents the device path where the volume should be available name str - Name of the attached volume AzureDiskVolumeSource class lightkube.models.core_v1. AzureDiskVolumeSource ( diskName , diskURI , cachingMode=None , fsType=None , kind=None , readOnly=None ) AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. parameters diskName str - The Name of the data disk in the blob storage diskURI str - The URI the data disk in the blob storage cachingMode str - (optional) Host Caching mode: None, Read Only, Read Write. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. kind str - (optional) Expected values Shared: multiple blob disks per storage account Dedicated: single blob disk per storage account Managed: azure managed data disk (only in managed availability set). defaults to shared readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. AzureFilePersistentVolumeSource class lightkube.models.core_v1. AzureFilePersistentVolumeSource ( secretName , shareName , readOnly=None , secretNamespace=None ) AzureFile represents an Azure File Service mount on the host and bind mount to the pod. parameters secretName str - the name of secret that contains Azure Storage Account Name and Key shareName str - Share Name readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. secretNamespace str - (optional) the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod AzureFileVolumeSource class lightkube.models.core_v1. AzureFileVolumeSource ( secretName , shareName , readOnly=None ) AzureFile represents an Azure File Service mount on the host and bind mount to the pod. parameters secretName str - the name of secret that contains Azure Storage Account Name and Key shareName str - Share Name readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. Binding class lightkube.models.core_v1. Binding ( target , apiVersion=None , kind=None , metadata=None ) Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead. parameters target ObjectReference - The target object that you want to bind to the standard object. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info CSIPersistentVolumeSource class lightkube.models.core_v1. CSIPersistentVolumeSource ( driver , volumeHandle , controllerExpandSecretRef=None , controllerPublishSecretRef=None , fsType=None , nodePublishSecretRef=None , nodeStageSecretRef=None , readOnly=None , volumeAttributes=None ) Represents storage that is managed by an external CSI volume driver (Beta feature) parameters driver str - Driver is the name of the driver to use for this volume. Required. volumeHandle str - VolumeHandle is the unique volume name returned by the CSI volume plugin\u2019s CreateVolume to refer to the volume on all subsequent calls. Required. controllerExpandSecretRef SecretReference - (optional) ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed. controllerPublishSecretRef SecretReference - (optional) ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". nodePublishSecretRef SecretReference - (optional) NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed. nodeStageSecretRef SecretReference - (optional) NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed. readOnly bool - (optional) Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write). volumeAttributes dict - (optional) Attributes of the volume to publish. CSIVolumeSource class lightkube.models.core_v1. CSIVolumeSource ( driver , fsType=None , nodePublishSecretRef=None , readOnly=None , volumeAttributes=None ) Represents a source location of a volume to mount, managed by an external CSI driver parameters driver str - Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster. fsType str - (optional) Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply. nodePublishSecretRef LocalObjectReference - (optional) NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed. readOnly bool - (optional) Specifies a read-only configuration for the volume. Defaults to false (read/write). volumeAttributes dict - (optional) VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values. Capabilities class lightkube.models.core_v1. Capabilities ( add=None , drop=None ) Adds and removes POSIX capabilities from running containers. parameters add List[str] - (optional) Added capabilities drop List[str] - (optional) Removed capabilities CephFSPersistentVolumeSource class lightkube.models.core_v1. CephFSPersistentVolumeSource ( monitors , path=None , readOnly=None , secretFile=None , secretRef=None , user=None ) Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling. parameters monitors List[str] - Required: Monitors is a collection of Ceph monitors More info path str - (optional) Optional: Used as the mounted root, rather than the full Ceph tree, default is / readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info secretFile str - (optional) Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info secretRef SecretReference - (optional) Optional: SecretRef is reference to the authentication secret for User, default is empty. More info user str - (optional) Optional: User is the rados user name, default is admin More info CephFSVolumeSource class lightkube.models.core_v1. CephFSVolumeSource ( monitors , path=None , readOnly=None , secretFile=None , secretRef=None , user=None ) Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling. parameters monitors List[str] - Required: Monitors is a collection of Ceph monitors More info path str - (optional) Optional: Used as the mounted root, rather than the full Ceph tree, default is / readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info secretFile str - (optional) Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info secretRef LocalObjectReference - (optional) Optional: SecretRef is reference to the authentication secret for User, default is empty. More info user str - (optional) Optional: User is the rados user name, default is admin More info CinderPersistentVolumeSource class lightkube.models.core_v1. CinderPersistentVolumeSource ( volumeID , fsType=None , readOnly=None , secretRef=None ) Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling. parameters volumeID str - volume id used to identify the volume in cinder. More info fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info secretRef SecretReference - (optional) Optional: points to a secret object containing parameters used to connect to OpenStack. CinderVolumeSource class lightkube.models.core_v1. CinderVolumeSource ( volumeID , fsType=None , readOnly=None , secretRef=None ) Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling. parameters volumeID str - volume id used to identify the volume in cinder. More info fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info secretRef LocalObjectReference - (optional) Optional: points to a secret object containing parameters used to connect to OpenStack. ClientIPConfig class lightkube.models.core_v1. ClientIPConfig ( timeoutSeconds=None ) ClientIPConfig represents the configurations of Client IP based session affinity. parameters timeoutSeconds int - (optional) timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours). ComponentCondition class lightkube.models.core_v1. ComponentCondition ( status , type , error=None , message=None ) Information about the condition of a component. parameters status str - Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\". type str - Type of condition for a component. Valid value: \"Healthy\" error str - (optional) Condition error code for a component. For example, a health check error code. message str - (optional) Message about the condition for a component. For example, information about a health check. ComponentStatus class lightkube.models.core_v1. ComponentStatus ( apiVersion=None , conditions=None , kind=None , metadata=None ) ComponentStatus (and ComponentStatusList) holds the cluster validation info. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info conditions ComponentCondition - (optional) List of component conditions observed kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info ComponentStatusList class lightkube.models.core_v1. ComponentStatusList ( items , apiVersion=None , kind=None , metadata=None ) Status of all the conditions for the component as a list of ComponentStatus objects. parameters items ComponentStatus - List of ComponentStatus objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info ConfigMap class lightkube.models.core_v1. ConfigMap ( apiVersion=None , binaryData=None , data=None , immutable=None , kind=None , metadata=None ) ConfigMap holds configuration data for pods to consume. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info binaryData dict - (optional) BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', ' ' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet. data dict - (optional) Data contains the configuration data. Each key must consist of alphanumeric characters, '-', ' ' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process. immutable bool - (optional) Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature gate. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info ConfigMapEnvSource class lightkube.models.core_v1. ConfigMapEnvSource ( name=None , optional=None ) ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables. parameters name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the ConfigMap must be defined ConfigMapKeySelector class lightkube.models.core_v1. ConfigMapKeySelector ( key , name=None , optional=None ) Selects a key from a ConfigMap. parameters key str - The key to select. name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the ConfigMap or its key must be defined ConfigMapList class lightkube.models.core_v1. ConfigMapList ( items , apiVersion=None , kind=None , metadata=None ) ConfigMapList is a resource containing a list of ConfigMap objects. parameters items ConfigMap - Items is the list of ConfigMaps. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) More info ConfigMapNodeConfigSource class lightkube.models.core_v1. ConfigMapNodeConfigSource ( kubeletConfigKey , name , namespace , resourceVersion=None , uid=None ) ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. parameters kubeletConfigKey str - KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases. name str - Name is the metadata.name of the referenced ConfigMap. This field is required in all cases. namespace str - Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases. resourceVersion str - (optional) ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status. uid str - (optional) UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status. ConfigMapProjection class lightkube.models.core_v1. ConfigMapProjection ( items=None , name=None , optional=None ) Adapts a ConfigMap into a projected volume. The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode. parameters items KeyToPath - (optional) If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the ConfigMap or its keys must be defined ConfigMapVolumeSource class lightkube.models.core_v1. ConfigMapVolumeSource ( defaultMode=None , items=None , name=None , optional=None ) Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling. parameters defaultMode int - (optional) Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. items KeyToPath - (optional) If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the ConfigMap or its keys must be defined Container class lightkube.models.core_v1. Container ( name , args=None , command=None , env=None , envFrom=None , image=None , imagePullPolicy=None , lifecycle=None , livenessProbe=None , ports=None , readinessProbe=None , resources=None , securityContext=None , startupProbe=None , stdin=None , stdinOnce=None , terminationMessagePath=None , terminationMessagePolicy=None , tty=None , volumeDevices=None , volumeMounts=None , workingDir=None ) A single application container that you want to run within a pod. parameters name str - Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated. args List[str] - (optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info command List[str] - (optional) Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info env EnvVar - (optional) List of environment variables to set in the container. Cannot be updated. envFrom EnvFromSource - (optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated. image str - (optional) Docker image name. More info This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets. imagePullPolicy str - (optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info lifecycle Lifecycle - (optional) Actions that the management system should take in response to container lifecycle events. Cannot be updated. livenessProbe Probe - (optional) Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info ports ContainerPort - (optional) List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated. readinessProbe Probe - (optional) Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info resources ResourceRequirements - (optional) Compute Resources required by this container. Cannot be updated. More info securityContext SecurityContext - (optional) Security options the pod should run with. More info More info startupProbe Probe - (optional) StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info stdin bool - (optional) Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false. stdinOnce bool - (optional) Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false terminationMessagePath str - (optional) Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated. terminationMessagePolicy str - (optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated. tty bool - (optional) Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false. volumeDevices VolumeDevice - (optional) volumeDevices is the list of block devices to be used by the container. volumeMounts VolumeMount - (optional) Pod volumes to mount into the container's filesystem. Cannot be updated. workingDir str - (optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated. ContainerImage class lightkube.models.core_v1. ContainerImage ( names , sizeBytes=None ) Describe a container image parameters names List[str] - Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"] sizeBytes int - (optional) The size of the image in bytes. ContainerPort class lightkube.models.core_v1. ContainerPort ( containerPort , hostIP=None , hostPort=None , name=None , protocol=None ) ContainerPort represents a network port in a single container. parameters containerPort int - Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536. hostIP str - (optional) What host IP to bind the external port to. hostPort int - (optional) Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this. name str - (optional) If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services. protocol str - (optional) Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\". ContainerState class lightkube.models.core_v1. ContainerState ( running=None , terminated=None , waiting=None ) ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting. parameters running ContainerStateRunning - (optional) Details about a running container terminated ContainerStateTerminated - (optional) Details about a terminated container waiting ContainerStateWaiting - (optional) Details about a waiting container ContainerStateRunning class lightkube.models.core_v1. ContainerStateRunning ( startedAt=None ) ContainerStateRunning is a running state of a container. parameters startedAt meta_v1.Time - (optional) Time at which the container was last (re-)started ContainerStateTerminated class lightkube.models.core_v1. ContainerStateTerminated ( exitCode , containerID=None , finishedAt=None , message=None , reason=None , signal=None , startedAt=None ) ContainerStateTerminated is a terminated state of a container. parameters exitCode int - Exit status from the last termination of the container containerID str - (optional) Container's ID in the format 'docker:// ' finishedAt meta_v1.Time - (optional) Time at which the container last terminated message str - (optional) Message regarding the last termination of the container reason str - (optional) (brief) reason from the last termination of the container signal int - (optional) Signal from the last termination of the container startedAt meta_v1.Time - (optional) Time at which previous execution of the container started ContainerStateWaiting class lightkube.models.core_v1. ContainerStateWaiting ( message=None , reason=None ) ContainerStateWaiting is a waiting state of a container. parameters message str - (optional) Message regarding why the container is not yet running. reason str - (optional) (brief) reason the container is not yet running. ContainerStatus class lightkube.models.core_v1. ContainerStatus ( image , imageID , name , ready , restartCount , containerID=None , lastState=None , started=None , state=None ) ContainerStatus contains details for the current status of this container. parameters image str - The image the container is running. More info imageID str - ImageID of the container's image. name str - This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated. ready bool - Specifies whether the container has passed its readiness probe. restartCount int - The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC. containerID str - (optional) Container's ID in the format 'docker:// '. lastState ContainerState - (optional) Details about the container's last termination condition. started bool - (optional) Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined. state ContainerState - (optional) Details about the container's current condition. DaemonEndpoint class lightkube.models.core_v1. DaemonEndpoint ( Port ) DaemonEndpoint contains information about a single Daemon endpoint. parameters Port int - Port number of the given endpoint. DownwardAPIProjection class lightkube.models.core_v1. DownwardAPIProjection ( items=None ) Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode. parameters items DownwardAPIVolumeFile - (optional) Items is a list of DownwardAPIVolume file DownwardAPIVolumeFile class lightkube.models.core_v1. DownwardAPIVolumeFile ( path , fieldRef=None , mode=None , resourceFieldRef=None ) DownwardAPIVolumeFile represents information to create the file containing the pod field parameters path str - Required: Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' fieldRef ObjectFieldSelector - (optional) Required: Selects a field of the pod: only annotations, labels, name and namespace are supported. mode int - (optional) Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. resourceFieldRef ResourceFieldSelector - (optional) Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported. DownwardAPIVolumeSource class lightkube.models.core_v1. DownwardAPIVolumeSource ( defaultMode=None , items=None ) DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling. parameters defaultMode int - (optional) Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. items DownwardAPIVolumeFile - (optional) Items is a list of downward API volume file EmptyDirVolumeSource class lightkube.models.core_v1. EmptyDirVolumeSource ( medium=None , sizeLimit=None ) Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling. parameters medium str - (optional) What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info sizeLimit resource.Quantity - (optional) Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info EndpointAddress class lightkube.models.core_v1. EndpointAddress ( ip , hostname=None , nodeName=None , targetRef=None ) EndpointAddress is a tuple that describes single IP address. parameters ip str - The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready. hostname str - (optional) The Hostname of this endpoint nodeName str - (optional) Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node. targetRef ObjectReference - (optional) Reference to object providing the endpoint. EndpointPort class lightkube.models.core_v1. EndpointPort ( port , appProtocol=None , name=None , protocol=None ) EndpointPort is a tuple that describes a single port. parameters port int - The port number of the endpoint. appProtocol str - (optional) The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names ). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate. name str - (optional) The name of this port. This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined. protocol str - (optional) The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP. EndpointSubset class lightkube.models.core_v1. EndpointSubset ( addresses=None , notReadyAddresses=None , ports=None ) EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given: { Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}], Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}] } The resulting set of endpoints can be viewed as: a: [ 10.10.1.1:8675, 10.10.2.2:8675 ], b: [ 10.10.1.1:309, 10.10.2.2:309 ] parameters addresses EndpointAddress - (optional) IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize. notReadyAddresses EndpointAddress - (optional) IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check. ports EndpointPort - (optional) Port numbers available on the related IP addresses. Endpoints class lightkube.models.core_v1. Endpoints ( apiVersion=None , kind=None , metadata=None , subsets=None ) Endpoints is a collection of endpoints that implement the actual service. Example: Name: \"mysvc\", Subsets: [ { Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}], Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}] }, { Addresses: [{\"ip\": \"10.10.3.3\"}], Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}] }, ] parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info subsets EndpointSubset - (optional) The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service. EndpointsList class lightkube.models.core_v1. EndpointsList ( items , apiVersion=None , kind=None , metadata=None ) EndpointsList is a list of endpoints. parameters items Endpoints - List of endpoints. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info EnvFromSource class lightkube.models.core_v1. EnvFromSource ( configMapRef=None , prefix=None , secretRef=None ) EnvFromSource represents the source of a set of ConfigMaps parameters configMapRef ConfigMapEnvSource - (optional) The ConfigMap to select from prefix str - (optional) An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER. secretRef SecretEnvSource - (optional) The Secret to select from EnvVar class lightkube.models.core_v1. EnvVar ( name , value=None , valueFrom=None ) EnvVar represents an environment variable present in a Container. parameters name str - Name of the environment variable. Must be a C_IDENTIFIER. value str - (optional) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\". valueFrom EnvVarSource - (optional) Source for the environment variable's value. Cannot be used if value is not empty. EnvVarSource class lightkube.models.core_v1. EnvVarSource ( configMapKeyRef=None , fieldRef=None , resourceFieldRef=None , secretKeyRef=None ) EnvVarSource represents a source for the value of an EnvVar. parameters configMapKeyRef ConfigMapKeySelector - (optional) Selects a key of a ConfigMap. fieldRef ObjectFieldSelector - (optional) Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs. resourceFieldRef ResourceFieldSelector - (optional) Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported. secretKeyRef SecretKeySelector - (optional) Selects a key of a secret in the pod's namespace EphemeralContainer class lightkube.models.core_v1. EphemeralContainer ( name , args=None , command=None , env=None , envFrom=None , image=None , imagePullPolicy=None , lifecycle=None , livenessProbe=None , ports=None , readinessProbe=None , resources=None , securityContext=None , startupProbe=None , stdin=None , stdinOnce=None , targetContainerName=None , terminationMessagePath=None , terminationMessagePolicy=None , tty=None , volumeDevices=None , volumeMounts=None , workingDir=None ) An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag. parameters name str - Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers. args List[str] - (optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info command List[str] - (optional) Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info env EnvVar - (optional) List of environment variables to set in the container. Cannot be updated. envFrom EnvFromSource - (optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated. image str - (optional) Docker image name. More info imagePullPolicy str - (optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info lifecycle Lifecycle - (optional) Lifecycle is not allowed for ephemeral containers. livenessProbe Probe - (optional) Probes are not allowed for ephemeral containers. ports ContainerPort - (optional) Ports are not allowed for ephemeral containers. readinessProbe Probe - (optional) Probes are not allowed for ephemeral containers. resources ResourceRequirements - (optional) Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod. securityContext SecurityContext - (optional) SecurityContext is not allowed for ephemeral containers. startupProbe Probe - (optional) Probes are not allowed for ephemeral containers. stdin bool - (optional) Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false. stdinOnce bool - (optional) Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false targetContainerName str - (optional) If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature. terminationMessagePath str - (optional) Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated. terminationMessagePolicy str - (optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated. tty bool - (optional) Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false. volumeDevices VolumeDevice - (optional) volumeDevices is the list of block devices to be used by the container. volumeMounts VolumeMount - (optional) Pod volumes to mount into the container's filesystem. Cannot be updated. workingDir str - (optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated. Event class lightkube.models.core_v1. Event ( involvedObject , metadata , action=None , apiVersion=None , count=None , eventTime=None , firstTimestamp=None , kind=None , lastTimestamp=None , message=None , reason=None , related=None , reportingComponent=None , reportingInstance=None , series=None , source=None , type=None ) Event is a report of an event somewhere in the cluster. parameters involvedObject ObjectReference - The object that this event is about. metadata meta_v1.ObjectMeta - Standard object's metadata. More info action str - (optional) What action was taken/failed regarding to the Regarding object. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info count int - (optional) The number of times this event has occurred. eventTime meta_v1.MicroTime - (optional) Time when this Event was first observed. firstTimestamp meta_v1.Time - (optional) The time at which the event was first recorded. (Time of server receipt is in TypeMeta.) kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info lastTimestamp meta_v1.Time - (optional) The time at which the most recent occurrence of this event was recorded. message str - (optional) A human-readable description of the status of this operation. reason str - (optional) This should be a short, machine understandable string that gives the reason for the transition into the object's current status. related ObjectReference - (optional) Optional secondary object for more complex actions. reportingComponent str - (optional) Name of the controller that emitted this Event, e.g. kubernetes.io/kubelet . reportingInstance str - (optional) ID of the controller instance, e.g. kubelet-xyzf . series EventSeries - (optional) Data about the Event series this event represents or nil if it's a singleton Event. source EventSource - (optional) The component reporting this event. Should be a short machine understandable string. type str - (optional) Type of this event (Normal, Warning), new types could be added in the future EventList class lightkube.models.core_v1. EventList ( items , apiVersion=None , kind=None , metadata=None ) EventList is a list of events. parameters items Event - List of events apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info EventSeries class lightkube.models.core_v1. EventSeries ( count=None , lastObservedTime=None , state=None ) EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. parameters count int - (optional) Number of occurrences in this series up to the last heartbeat time lastObservedTime meta_v1.MicroTime - (optional) Time of the last occurrence observed state str - (optional) State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18 EventSource class lightkube.models.core_v1. EventSource ( component=None , host=None ) EventSource contains information for an event. parameters component str - (optional) Component from which the event is generated. host str - (optional) Node name on which the event is generated. ExecAction class lightkube.models.core_v1. ExecAction ( command=None ) ExecAction describes a \"run in container\" action. parameters command List[str] - (optional) Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. FCVolumeSource class lightkube.models.core_v1. FCVolumeSource ( fsType=None , lun=None , readOnly=None , targetWWNs=None , wwids=None ) Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling. parameters fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. lun int - (optional) Optional: FC target lun number readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. targetWWNs List[str] - (optional) Optional: FC target worldwide names (WWNs) wwids List[str] - (optional) Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously. FlexPersistentVolumeSource class lightkube.models.core_v1. FlexPersistentVolumeSource ( driver , fsType=None , options=None , readOnly=None , secretRef=None ) FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin. parameters driver str - Driver is the name of the driver to use for this volume. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script. options dict - (optional) Optional: Extra command options if any. readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. secretRef SecretReference - (optional) Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts. FlexVolumeSource class lightkube.models.core_v1. FlexVolumeSource ( driver , fsType=None , options=None , readOnly=None , secretRef=None ) FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. parameters driver str - Driver is the name of the driver to use for this volume. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script. options dict - (optional) Optional: Extra command options if any. readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. secretRef LocalObjectReference - (optional) Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts. FlockerVolumeSource class lightkube.models.core_v1. FlockerVolumeSource ( datasetName=None , datasetUUID=None ) Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling. parameters datasetName str - (optional) Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated datasetUUID str - (optional) UUID of the dataset. This is unique identifier of a Flocker dataset GCEPersistentDiskVolumeSource class lightkube.models.core_v1. GCEPersistentDiskVolumeSource ( pdName , fsType=None , partition=None , readOnly=None ) Represents a Persistent Disk resource in Google Compute Engine. A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling. parameters pdName str - Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info partition int - (optional) The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info readOnly bool - (optional) ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info GitRepoVolumeSource class lightkube.models.core_v1. GitRepoVolumeSource ( repository , directory=None , revision=None ) Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container. parameters repository str - Repository URL directory str - (optional) Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name. revision str - (optional) Commit hash for the specified revision. GlusterfsPersistentVolumeSource class lightkube.models.core_v1. GlusterfsPersistentVolumeSource ( endpoints , path , endpointsNamespace=None , readOnly=None ) Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling. parameters endpoints str - EndpointsName is the endpoint name that details Glusterfs topology. More info path str - Path is the Glusterfs volume path. More info endpointsNamespace str - (optional) EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info readOnly bool - (optional) ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info GlusterfsVolumeSource class lightkube.models.core_v1. GlusterfsVolumeSource ( endpoints , path , readOnly=None ) Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling. parameters endpoints str - EndpointsName is the endpoint name that details Glusterfs topology. More info path str - Path is the Glusterfs volume path. More info readOnly bool - (optional) ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info HTTPGetAction class lightkube.models.core_v1. HTTPGetAction ( port , host=None , httpHeaders=None , path=None , scheme=None ) HTTPGetAction describes an action based on HTTP Get requests. parameters port util_intstr.IntOrString - Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. host str - (optional) Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead. httpHeaders HTTPHeader - (optional) Custom headers to set in the request. HTTP allows repeated headers. path str - (optional) Path to access on the HTTP server. scheme str - (optional) Scheme to use for connecting to the host. Defaults to HTTP. HTTPHeader class lightkube.models.core_v1. HTTPHeader ( name , value ) HTTPHeader describes a custom header to be used in HTTP probes parameters name str - The header field name value str - The header field value Handler class lightkube.models.core_v1. Handler ( exec=None , httpGet=None , tcpSocket=None ) Handler defines a specific action that should be taken parameters exec ExecAction - (optional) One and only one of the following should be specified. Exec specifies the action to take. httpGet HTTPGetAction - (optional) HTTPGet specifies the http request to perform. tcpSocket TCPSocketAction - (optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported HostAlias class lightkube.models.core_v1. HostAlias ( hostnames=None , ip=None ) HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file. parameters hostnames List[str] - (optional) Hostnames for the above IP address. ip str - (optional) IP address of the host file entry. HostPathVolumeSource class lightkube.models.core_v1. HostPathVolumeSource ( path , type=None ) Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling. parameters path str - Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info type str - (optional) Type for HostPath Volume Defaults to \"\" More info ISCSIPersistentVolumeSource class lightkube.models.core_v1. ISCSIPersistentVolumeSource ( iqn , lun , targetPortal , chapAuthDiscovery=None , chapAuthSession=None , fsType=None , initiatorName=None , iscsiInterface=None , portals=None , readOnly=None , secretRef=None ) ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling. parameters iqn str - Target iSCSI Qualified Name. lun int - iSCSI Target Lun number. targetPortal str - iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). chapAuthDiscovery bool - (optional) whether support iSCSI Discovery CHAP authentication chapAuthSession bool - (optional) whether support iSCSI Session CHAP authentication fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info initiatorName str - (optional) Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface : will be created for the connection. iscsiInterface str - (optional) iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp). portals List[str] - (optional) iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). readOnly bool - (optional) ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. secretRef SecretReference - (optional) CHAP Secret for iSCSI target and initiator authentication ISCSIVolumeSource class lightkube.models.core_v1. ISCSIVolumeSource ( iqn , lun , targetPortal , chapAuthDiscovery=None , chapAuthSession=None , fsType=None , initiatorName=None , iscsiInterface=None , portals=None , readOnly=None , secretRef=None ) Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling. parameters iqn str - Target iSCSI Qualified Name. lun int - iSCSI Target Lun number. targetPortal str - iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). chapAuthDiscovery bool - (optional) whether support iSCSI Discovery CHAP authentication chapAuthSession bool - (optional) whether support iSCSI Session CHAP authentication fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info initiatorName str - (optional) Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface : will be created for the connection. iscsiInterface str - (optional) iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp). portals List[str] - (optional) iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). readOnly bool - (optional) ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. secretRef LocalObjectReference - (optional) CHAP Secret for iSCSI target and initiator authentication KeyToPath class lightkube.models.core_v1. KeyToPath ( key , path , mode=None ) Maps a string key to a path within a volume. parameters key str - The key to project. path str - The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'. mode int - (optional) Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. Lifecycle class lightkube.models.core_v1. Lifecycle ( postStart=None , preStop=None ) Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted. parameters postStart Handler - (optional) PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info preStop Handler - (optional) PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info LimitRange class lightkube.models.core_v1. LimitRange ( apiVersion=None , kind=None , metadata=None , spec=None ) LimitRange sets resource usage limits for each kind of resource in a Namespace. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec LimitRangeSpec - (optional) Spec defines the limits enforced. More info LimitRangeItem class lightkube.models.core_v1. LimitRangeItem ( type , default=None , defaultRequest=None , max=None , maxLimitRequestRatio=None , min=None ) LimitRangeItem defines a min/max usage limit for any resource that matches on kind. parameters type str - Type of resource that this limit applies to. default dict - (optional) Default resource requirement limit value by resource name if resource limit is omitted. defaultRequest dict - (optional) DefaultRequest is the default resource requirement request value by resource name if resource request is omitted. max dict - (optional) Max usage constraints on this kind by resource name. maxLimitRequestRatio dict - (optional) MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource. min dict - (optional) Min usage constraints on this kind by resource name. LimitRangeList class lightkube.models.core_v1. LimitRangeList ( items , apiVersion=None , kind=None , metadata=None ) LimitRangeList is a list of LimitRange items. parameters items LimitRange - Items is a list of LimitRange objects. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info LimitRangeSpec class lightkube.models.core_v1. LimitRangeSpec ( limits ) LimitRangeSpec defines a min/max usage limit for resources that match on kind. parameters limits LimitRangeItem - Limits is the list of LimitRangeItem objects that are enforced. LoadBalancerIngress class lightkube.models.core_v1. LoadBalancerIngress ( hostname=None , ip=None ) LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point. parameters hostname str - (optional) Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers) ip str - (optional) IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers) LoadBalancerStatus class lightkube.models.core_v1. LoadBalancerStatus ( ingress=None ) LoadBalancerStatus represents the status of a load-balancer. parameters ingress LoadBalancerIngress - (optional) Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points. LocalObjectReference class lightkube.models.core_v1. LocalObjectReference ( name=None ) LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace. parameters name str - (optional) Name of the referent. More info LocalVolumeSource class lightkube.models.core_v1. LocalVolumeSource ( path , fsType=None ) Local represents directly-attached storage with node affinity (Beta feature) parameters path str - The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...). fsType str - (optional) Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a fileystem if unspecified. NFSVolumeSource class lightkube.models.core_v1. NFSVolumeSource ( path , server , readOnly=None ) Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling. parameters path str - Path that is exported by the NFS server. More info server str - Server is the hostname or IP address of the NFS server. More info readOnly bool - (optional) ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info Namespace class lightkube.models.core_v1. Namespace ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Namespace provides a scope for Names. Use of multiple namespaces is optional. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec NamespaceSpec - (optional) Spec defines the behavior of the Namespace. More info status NamespaceStatus - (optional) Status describes the current status of a Namespace. More info NamespaceCondition class lightkube.models.core_v1. NamespaceCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) NamespaceCondition contains details about state of namespace. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of namespace controller condition. lastTransitionTime meta_v1.Time - (optional) message str - (optional) reason str - (optional) NamespaceList class lightkube.models.core_v1. NamespaceList ( items , apiVersion=None , kind=None , metadata=None ) NamespaceList is a list of Namespaces. parameters items Namespace - Items is the list of Namespace objects in the list. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info NamespaceSpec class lightkube.models.core_v1. NamespaceSpec ( finalizers=None ) NamespaceSpec describes the attributes on a Namespace. parameters finalizers List[str] - (optional) Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info NamespaceStatus class lightkube.models.core_v1. NamespaceStatus ( conditions=None , phase=None ) NamespaceStatus is information about the current status of a Namespace. parameters conditions NamespaceCondition - (optional) Represents the latest available observations of a namespace's current state. phase str - (optional) Phase is the current lifecycle phase of the namespace. More info Node class lightkube.models.core_v1. Node ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd). parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec NodeSpec - (optional) Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status status NodeStatus - (optional) Most recently observed status of the node. Populated by the system. Read-only. More info NodeAddress class lightkube.models.core_v1. NodeAddress ( address , type ) NodeAddress contains information for the node's address. parameters address str - The node address. type str - Node address type, one of Hostname, ExternalIP or InternalIP. NodeAffinity class lightkube.models.core_v1. NodeAffinity ( preferredDuringSchedulingIgnoredDuringExecution=None , requiredDuringSchedulingIgnoredDuringExecution=None ) Node affinity is a group of node affinity scheduling rules. parameters preferredDuringSchedulingIgnoredDuringExecution PreferredSchedulingTerm - (optional) The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred. requiredDuringSchedulingIgnoredDuringExecution NodeSelector - (optional) If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node. NodeCondition class lightkube.models.core_v1. NodeCondition ( status , type , lastHeartbeatTime=None , lastTransitionTime=None , message=None , reason=None ) NodeCondition contains condition information for a node. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of node condition. lastHeartbeatTime meta_v1.Time - (optional) Last time we got an update on a given condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transit from one status to another. message str - (optional) Human readable message indicating details about last transition. reason str - (optional) (brief) reason for the condition's last transition. NodeConfigSource class lightkube.models.core_v1. NodeConfigSource ( configMap=None ) NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. parameters configMap ConfigMapNodeConfigSource - (optional) ConfigMap is a reference to a Node's ConfigMap NodeConfigStatus class lightkube.models.core_v1. NodeConfigStatus ( active=None , assigned=None , error=None , lastKnownGood=None ) NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource. parameters active NodeConfigSource - (optional) Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error. assigned NodeConfigSource - (optional) Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned. error str - (optional) Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions. lastKnownGood NodeConfigSource - (optional) LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future. NodeDaemonEndpoints class lightkube.models.core_v1. NodeDaemonEndpoints ( kubeletEndpoint=None ) NodeDaemonEndpoints lists ports opened by daemons running on the Node. parameters kubeletEndpoint DaemonEndpoint - (optional) Endpoint on which Kubelet is listening. NodeList class lightkube.models.core_v1. NodeList ( items , apiVersion=None , kind=None , metadata=None ) NodeList is the whole list of all Nodes which have been registered with master. parameters items Node - List of nodes apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info NodeSelector class lightkube.models.core_v1. NodeSelector ( nodeSelectorTerms ) A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms. parameters nodeSelectorTerms NodeSelectorTerm - Required. A list of node selector terms. The terms are ORed. NodeSelectorRequirement class lightkube.models.core_v1. NodeSelectorRequirement ( key , operator , values=None ) A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values. parameters key str - The label key that the selector applies to. operator str - Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. values List[str] - (optional) An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch. NodeSelectorTerm class lightkube.models.core_v1. NodeSelectorTerm ( matchExpressions=None , matchFields=None ) A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm. parameters matchExpressions NodeSelectorRequirement - (optional) A list of node selector requirements by node's labels. matchFields NodeSelectorRequirement - (optional) A list of node selector requirements by node's fields. NodeSpec class lightkube.models.core_v1. NodeSpec ( configSource=None , externalID=None , podCIDR=None , podCIDRs=None , providerID=None , taints=None , unschedulable=None ) NodeSpec describes the attributes that a node is created with. parameters configSource NodeConfigSource - (optional) If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field externalID str - (optional) Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966 podCIDR str - (optional) PodCIDR represents the pod IP range assigned to the node. podCIDRs List[str] - (optional) podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6. providerID str - (optional) ID of the node assigned by the cloud provider in the format: :// taints Taint - (optional) If specified, the node's taints. unschedulable bool - (optional) Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info NodeStatus class lightkube.models.core_v1. NodeStatus ( addresses=None , allocatable=None , capacity=None , conditions=None , config=None , daemonEndpoints=None , images=None , nodeInfo=None , phase=None , volumesAttached=None , volumesInUse=None ) NodeStatus is information about the current status of a node. parameters addresses NodeAddress - (optional) List of addresses reachable to the node. Queried from cloud provider, if available. More info Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example. allocatable dict - (optional) Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity. capacity dict - (optional) Capacity represents the total resources of a node. More info conditions NodeCondition - (optional) Conditions is an array of current observed node conditions. More info config NodeConfigStatus - (optional) Status of the config assigned to the node via the dynamic Kubelet config feature. daemonEndpoints NodeDaemonEndpoints - (optional) Endpoints of daemons running on the Node. images ContainerImage - (optional) List of container images on this node nodeInfo NodeSystemInfo - (optional) Set of ids/uuids to uniquely identify the node. More info phase str - (optional) NodePhase is the recently observed lifecycle phase of the node. More info The field is never populated, and now is deprecated. volumesAttached AttachedVolume - (optional) List of volumes that are attached to the node. volumesInUse List[str] - (optional) List of attachable volumes in use (mounted) by the node. NodeSystemInfo class lightkube.models.core_v1. NodeSystemInfo ( architecture , bootID , containerRuntimeVersion , kernelVersion , kubeProxyVersion , kubeletVersion , machineID , operatingSystem , osImage , systemUUID ) NodeSystemInfo is a set of ids/uuids to uniquely identify the node. parameters architecture str - The Architecture reported by the node bootID str - Boot ID reported by the node. containerRuntimeVersion str - ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0). kernelVersion str - Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64). kubeProxyVersion str - KubeProxy Version reported by the node. kubeletVersion str - Kubelet Version reported by the node. machineID str - MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html operatingSystem str - The Operating System reported by the node osImage str - OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)). systemUUID str - SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html ObjectFieldSelector class lightkube.models.core_v1. ObjectFieldSelector ( fieldPath , apiVersion=None ) ObjectFieldSelector selects an APIVersioned field of an object. parameters fieldPath str - Path of the field to select in the specified API version. apiVersion str - (optional) Version of the schema the FieldPath is written in terms of, defaults to \"v1\". ObjectReference class lightkube.models.core_v1. ObjectReference ( apiVersion=None , fieldPath=None , kind=None , name=None , namespace=None , resourceVersion=None , uid=None ) ObjectReference contains enough information to let you inspect or modify the referred object. parameters apiVersion str - (optional) API version of the referent. fieldPath str - (optional) If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. kind str - (optional) Kind of the referent. More info name str - (optional) Name of the referent. More info namespace str - (optional) Namespace of the referent. More info resourceVersion str - (optional) Specific resourceVersion to which this reference is made, if any. More info uid str - (optional) UID of the referent. More info PersistentVolume class lightkube.models.core_v1. PersistentVolume ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec PersistentVolumeSpec - (optional) Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info status PersistentVolumeStatus - (optional) Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info PersistentVolumeClaim class lightkube.models.core_v1. PersistentVolumeClaim ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) PersistentVolumeClaim is a user's request for and claim to a persistent volume parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec PersistentVolumeClaimSpec - (optional) Spec defines the desired characteristics of a volume requested by a pod author. More info status PersistentVolumeClaimStatus - (optional) Status represents the current information/status of a persistent volume claim. Read-only. More info PersistentVolumeClaimCondition class lightkube.models.core_v1. PersistentVolumeClaimCondition ( status , type , lastProbeTime=None , lastTransitionTime=None , message=None , reason=None ) PersistentVolumeClaimCondition contails details about state of pvc parameters status str - type str - lastProbeTime meta_v1.Time - (optional) Last time we probed the condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) Human-readable message indicating details about last transition. reason str - (optional) Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized. PersistentVolumeClaimList class lightkube.models.core_v1. PersistentVolumeClaimList ( items , apiVersion=None , kind=None , metadata=None ) PersistentVolumeClaimList is a list of PersistentVolumeClaim items. parameters items PersistentVolumeClaim - A list of persistent volume claims. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info PersistentVolumeClaimSpec class lightkube.models.core_v1. PersistentVolumeClaimSpec ( accessModes=None , dataSource=None , resources=None , selector=None , storageClassName=None , volumeMode=None , volumeName=None ) PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes parameters accessModes List[str] - (optional) AccessModes contains the desired access modes the volume should have. More info dataSource TypedLocalObjectReference - (optional) This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change. resources ResourceRequirements - (optional) Resources represents the minimum resources the volume should have. More info selector meta_v1.LabelSelector - (optional) A label query over volumes to consider for binding. storageClassName str - (optional) Name of the StorageClass required by the claim. More info volumeMode str - (optional) volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. volumeName str - (optional) VolumeName is the binding reference to the PersistentVolume backing this claim. PersistentVolumeClaimStatus class lightkube.models.core_v1. PersistentVolumeClaimStatus ( accessModes=None , capacity=None , conditions=None , phase=None ) PersistentVolumeClaimStatus is the current status of a persistent volume claim. parameters accessModes List[str] - (optional) AccessModes contains the actual access modes the volume backing the PVC has. More info capacity dict - (optional) Represents the actual resources of the underlying volume. conditions PersistentVolumeClaimCondition - (optional) Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'. phase str - (optional) Phase represents the current phase of PersistentVolumeClaim. PersistentVolumeClaimVolumeSource class lightkube.models.core_v1. PersistentVolumeClaimVolumeSource ( claimName , readOnly=None ) PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system). parameters claimName str - ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info readOnly bool - (optional) Will force the ReadOnly setting in VolumeMounts. Default false. PersistentVolumeList class lightkube.models.core_v1. PersistentVolumeList ( items , apiVersion=None , kind=None , metadata=None ) PersistentVolumeList is a list of PersistentVolume items. parameters items PersistentVolume - List of persistent volumes. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info PersistentVolumeSpec class lightkube.models.core_v1. PersistentVolumeSpec ( accessModes=None , awsElasticBlockStore=None , azureDisk=None , azureFile=None , capacity=None , cephfs=None , cinder=None , claimRef=None , csi=None , fc=None , flexVolume=None , flocker=None , gcePersistentDisk=None , glusterfs=None , hostPath=None , iscsi=None , local=None , mountOptions=None , nfs=None , nodeAffinity=None , persistentVolumeReclaimPolicy=None , photonPersistentDisk=None , portworxVolume=None , quobyte=None , rbd=None , scaleIO=None , storageClassName=None , storageos=None , volumeMode=None , vsphereVolume=None ) PersistentVolumeSpec is the specification of a persistent volume. parameters accessModes List[str] - (optional) AccessModes contains all ways the volume can be mounted. More info awsElasticBlockStore AWSElasticBlockStoreVolumeSource - (optional) AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info azureDisk AzureDiskVolumeSource - (optional) AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. azureFile AzureFilePersistentVolumeSource - (optional) AzureFile represents an Azure File Service mount on the host and bind mount to the pod. capacity dict - (optional) A description of the persistent volume's resources and capacity. More info cephfs CephFSPersistentVolumeSource - (optional) CephFS represents a Ceph FS mount on the host that shares a pod's lifetime cinder CinderPersistentVolumeSource - (optional) Cinder represents a cinder volume attached and mounted on kubelets host machine. More info claimRef ObjectReference - (optional) ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info csi CSIPersistentVolumeSource - (optional) CSI represents storage that is handled by an external CSI driver (Beta feature). fc FCVolumeSource - (optional) FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod. flexVolume FlexPersistentVolumeSource - (optional) FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. flocker FlockerVolumeSource - (optional) Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running gcePersistentDisk GCEPersistentDiskVolumeSource - (optional) GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info glusterfs GlusterfsPersistentVolumeSource - (optional) Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info hostPath HostPathVolumeSource - (optional) HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info iscsi ISCSIPersistentVolumeSource - (optional) ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. local LocalVolumeSource - (optional) Local represents directly-attached storage with node affinity mountOptions List[str] - (optional) A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info nfs NFSVolumeSource - (optional) NFS represents an NFS mount on the host. Provisioned by an admin. More info nodeAffinity VolumeNodeAffinity - (optional) NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume. persistentVolumeReclaimPolicy str - (optional) What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info photonPersistentDisk PhotonPersistentDiskVolumeSource - (optional) PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine portworxVolume PortworxVolumeSource - (optional) PortworxVolume represents a portworx volume attached and mounted on kubelets host machine quobyte QuobyteVolumeSource - (optional) Quobyte represents a Quobyte mount on the host that shares a pod's lifetime rbd RBDPersistentVolumeSource - (optional) RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info scaleIO ScaleIOPersistentVolumeSource - (optional) ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes. storageClassName str - (optional) Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass. storageos StorageOSPersistentVolumeSource - (optional) StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info volumeMode str - (optional) volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. vsphereVolume VsphereVirtualDiskVolumeSource - (optional) VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine PersistentVolumeStatus class lightkube.models.core_v1. PersistentVolumeStatus ( message=None , phase=None , reason=None ) PersistentVolumeStatus is the current status of a persistent volume. parameters message str - (optional) A human-readable message indicating details about why the volume is in this state. phase str - (optional) Phase indicates if a volume is available, bound to a claim, or released by a claim. More info reason str - (optional) Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI. PhotonPersistentDiskVolumeSource class lightkube.models.core_v1. PhotonPersistentDiskVolumeSource ( pdID , fsType=None ) Represents a Photon Controller persistent disk resource. parameters pdID str - ID that identifies Photon Controller persistent disk fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. Pod class lightkube.models.core_v1. Pod ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec PodSpec - (optional) Specification of the desired behavior of the pod. More info status PodStatus - (optional) Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info PodAffinity class lightkube.models.core_v1. PodAffinity ( preferredDuringSchedulingIgnoredDuringExecution=None , requiredDuringSchedulingIgnoredDuringExecution=None ) Pod affinity is a group of inter pod affinity scheduling rules. parameters preferredDuringSchedulingIgnoredDuringExecution WeightedPodAffinityTerm - (optional) The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. requiredDuringSchedulingIgnoredDuringExecution PodAffinityTerm - (optional) If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. PodAffinityTerm class lightkube.models.core_v1. PodAffinityTerm ( topologyKey , labelSelector=None , namespaces=None ) Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key matches that of any node on which a pod of the set of pods is running parameters topologyKey str - This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. labelSelector meta_v1.LabelSelector - (optional) A label query over a set of resources, in this case pods. namespaces List[str] - (optional) namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\" PodAntiAffinity class lightkube.models.core_v1. PodAntiAffinity ( preferredDuringSchedulingIgnoredDuringExecution=None , requiredDuringSchedulingIgnoredDuringExecution=None ) Pod anti affinity is a group of inter pod anti affinity scheduling rules. parameters preferredDuringSchedulingIgnoredDuringExecution WeightedPodAffinityTerm - (optional) The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. requiredDuringSchedulingIgnoredDuringExecution PodAffinityTerm - (optional) If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. PodCondition class lightkube.models.core_v1. PodCondition ( status , type , lastProbeTime=None , lastTransitionTime=None , message=None , reason=None ) PodCondition contains details for the current condition of this pod. parameters status str - Status is the status of the condition. Can be True, False, Unknown. More info type str - Type is the type of the condition. More info lastProbeTime meta_v1.Time - (optional) Last time we probed the condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) Human-readable message indicating details about last transition. reason str - (optional) Unique, one-word, CamelCase reason for the condition's last transition. PodDNSConfig class lightkube.models.core_v1. PodDNSConfig ( nameservers=None , options=None , searches=None ) PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy. parameters nameservers List[str] - (optional) A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed. options PodDNSConfigOption - (optional) A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy. searches List[str] - (optional) A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed. PodDNSConfigOption class lightkube.models.core_v1. PodDNSConfigOption ( name=None , value=None ) PodDNSConfigOption defines DNS resolver options of a pod. parameters name str - (optional) Required. value str - (optional) PodIP class lightkube.models.core_v1. PodIP ( ip=None ) IP address information for entries in the (plural) PodIPs field. Each entry includes: IP: An IP address allocated to the pod. Routable at least within the cluster. parameters ip str - (optional) ip is an IP address (IPv4 or IPv6) assigned to the pod PodList class lightkube.models.core_v1. PodList ( items , apiVersion=None , kind=None , metadata=None ) PodList is a list of Pods. parameters items Pod - List of pods. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info PodReadinessGate class lightkube.models.core_v1. PodReadinessGate ( conditionType ) PodReadinessGate contains the reference to a pod condition parameters conditionType str - ConditionType refers to a condition in the pod's condition list with matching type. PodSecurityContext class lightkube.models.core_v1. PodSecurityContext ( fsGroup=None , fsGroupChangePolicy=None , runAsGroup=None , runAsNonRoot=None , runAsUser=None , seLinuxOptions=None , supplementalGroups=None , sysctls=None , windowsOptions=None ) PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext. Field values of container.securityContext take precedence over field values of PodSecurityContext. parameters fsGroup int - (optional) A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume. fsGroupChangePolicy str - (optional) fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified defaults to \"Always\". runAsGroup int - (optional) The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. runAsNonRoot bool - (optional) Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. runAsUser int - (optional) The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. seLinuxOptions SELinuxOptions - (optional) The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. supplementalGroups List[int] - (optional) A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container. sysctls Sysctl - (optional) Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. windowsOptions WindowsSecurityContextOptions - (optional) The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. PodSpec class lightkube.models.core_v1. PodSpec ( containers , activeDeadlineSeconds=None , affinity=None , automountServiceAccountToken=None , dnsConfig=None , dnsPolicy=None , enableServiceLinks=None , ephemeralContainers=None , hostAliases=None , hostIPC=None , hostNetwork=None , hostPID=None , hostname=None , imagePullSecrets=None , initContainers=None , nodeName=None , nodeSelector=None , overhead=None , preemptionPolicy=None , priority=None , priorityClassName=None , readinessGates=None , restartPolicy=None , runtimeClassName=None , schedulerName=None , securityContext=None , serviceAccount=None , serviceAccountName=None , shareProcessNamespace=None , subdomain=None , terminationGracePeriodSeconds=None , tolerations=None , topologySpreadConstraints=None , volumes=None ) PodSpec is a description of a pod. parameters containers Container - List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. activeDeadlineSeconds int - (optional) Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer. affinity Affinity - (optional) If specified, the pod's scheduling constraints automountServiceAccountToken bool - (optional) AutomountServiceAccountToken indicates whether a service account token should be automatically mounted. dnsConfig PodDNSConfig - (optional) Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. dnsPolicy str - (optional) Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. enableServiceLinks bool - (optional) EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true. ephemeralContainers EphemeralContainer - (optional) List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature. hostAliases HostAlias - (optional) HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods. hostIPC bool - (optional) Use the host's ipc namespace. Optional: Default to false. hostNetwork bool - (optional) Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false. hostPID bool - (optional) Use the host's pid namespace. Optional: Default to false. hostname str - (optional) Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value. imagePullSecrets LocalObjectReference - (optional) ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info initContainers Container - (optional) List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info nodeName str - (optional) NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements. nodeSelector dict - (optional) NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info overhead dict - (optional) Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature. preemptionPolicy str - (optional) PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature. priority int - (optional) The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. priorityClassName str - (optional) If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. readinessGates PodReadinessGate - (optional) If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info restartPolicy str - (optional) Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info runtimeClassName str - (optional) RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod. If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info This is a beta feature as of Kubernetes v1.14. schedulerName str - (optional) If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler. securityContext PodSecurityContext - (optional) SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty. See type description for default values of each field. serviceAccount str - (optional) DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead. serviceAccountName str - (optional) ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info shareProcessNamespace bool - (optional) Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. subdomain str - (optional) If specified, the fully qualified Pod hostname will be \" . . .svc. \". If not specified, the pod will not have a domainname at all. terminationGracePeriodSeconds int - (optional) Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds. tolerations Toleration - (optional) If specified, the pod's tolerations. topologySpreadConstraints TopologySpreadConstraint - (optional) TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. This field is only honored by clusters that enable the EvenPodsSpread feature. All topologySpreadConstraints are ANDed. volumes Volume - (optional) List of volumes that can be mounted by containers belonging to the pod. More info PodStatus class lightkube.models.core_v1. PodStatus ( conditions=None , containerStatuses=None , ephemeralContainerStatuses=None , hostIP=None , initContainerStatuses=None , message=None , nominatedNodeName=None , phase=None , podIP=None , podIPs=None , qosClass=None , reason=None , startTime=None ) PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane. parameters conditions PodCondition - (optional) Current service state of pod. More info containerStatuses ContainerStatus - (optional) The list has one entry per container in the manifest. Each entry is currently the output of docker inspect . More info ephemeralContainerStatuses ContainerStatus - (optional) Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature. hostIP str - (optional) IP address of the host to which the pod is assigned. Empty if not yet scheduled. initContainerStatuses ContainerStatus - (optional) The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info message str - (optional) A human readable message indicating details about why the pod is in this condition. nominatedNodeName str - (optional) nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled. phase str - (optional) The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values: Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. More info podIP str - (optional) IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated. podIPs PodIP - (optional) podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet. qosClass str - (optional) The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info reason str - (optional) A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted' startTime meta_v1.Time - (optional) RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod. PodTemplate class lightkube.models.core_v1. PodTemplate ( apiVersion=None , kind=None , metadata=None , template=None ) PodTemplate describes a template for creating copies of a predefined pod. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info template PodTemplateSpec - (optional) Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status PodTemplateList class lightkube.models.core_v1. PodTemplateList ( items , apiVersion=None , kind=None , metadata=None ) PodTemplateList is a list of PodTemplates. parameters items PodTemplate - List of pod templates apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info PodTemplateSpec class lightkube.models.core_v1. PodTemplateSpec ( metadata=None , spec=None ) PodTemplateSpec describes the data a pod should have when created from a template parameters metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec PodSpec - (optional) Specification of the desired behavior of the pod. More info PortworxVolumeSource class lightkube.models.core_v1. PortworxVolumeSource ( volumeID , fsType=None , readOnly=None ) PortworxVolumeSource represents a Portworx volume resource. parameters volumeID str - VolumeID uniquely identifies a Portworx volume fsType str - (optional) FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified. readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. PreferredSchedulingTerm class lightkube.models.core_v1. PreferredSchedulingTerm ( preference , weight ) An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op). parameters preference NodeSelectorTerm - A node selector term, associated with the corresponding weight. weight int - Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100. Probe class lightkube.models.core_v1. Probe ( exec=None , failureThreshold=None , httpGet=None , initialDelaySeconds=None , periodSeconds=None , successThreshold=None , tcpSocket=None , timeoutSeconds=None ) Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic. parameters exec ExecAction - (optional) One and only one of the following should be specified. Exec specifies the action to take. failureThreshold int - (optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. httpGet HTTPGetAction - (optional) HTTPGet specifies the http request to perform. initialDelaySeconds int - (optional) Number of seconds after the container has started before liveness probes are initiated. More info periodSeconds int - (optional) How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. successThreshold int - (optional) Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1. tcpSocket TCPSocketAction - (optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported timeoutSeconds int - (optional) Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info ProjectedVolumeSource class lightkube.models.core_v1. ProjectedVolumeSource ( sources , defaultMode=None ) Represents a projected volume source parameters sources VolumeProjection - list of volume projections defaultMode int - (optional) Mode bits to use on created files by default. Must be a value between 0 and Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. QuobyteVolumeSource class lightkube.models.core_v1. QuobyteVolumeSource ( registry , volume , group=None , readOnly=None , tenant=None , user=None ) Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling. parameters registry str - Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes volume str - Volume is a string that references an already created Quobyte volume by name. group str - (optional) Group to map volume access to Default is no group readOnly bool - (optional) ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false. tenant str - (optional) Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin user str - (optional) User to map volume access to Defaults to serivceaccount user RBDPersistentVolumeSource class lightkube.models.core_v1. RBDPersistentVolumeSource ( image , monitors , fsType=None , keyring=None , pool=None , readOnly=None , secretRef=None , user=None ) Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling. parameters image str - The rados image name. More info monitors List[str] - A collection of Ceph monitors. More info fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info keyring str - (optional) Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info pool str - (optional) The rados pool name. Default is rbd. More info readOnly bool - (optional) ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info secretRef SecretReference - (optional) SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info user str - (optional) The rados user name. Default is admin. More info RBDVolumeSource class lightkube.models.core_v1. RBDVolumeSource ( image , monitors , fsType=None , keyring=None , pool=None , readOnly=None , secretRef=None , user=None ) Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling. parameters image str - The rados image name. More info monitors List[str] - A collection of Ceph monitors. More info fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info keyring str - (optional) Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info pool str - (optional) The rados pool name. Default is rbd. More info readOnly bool - (optional) ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info secretRef LocalObjectReference - (optional) SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info user str - (optional) The rados user name. Default is admin. More info ReplicationController class lightkube.models.core_v1. ReplicationController ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) ReplicationController represents the configuration of a replication controller. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info spec ReplicationControllerSpec - (optional) Spec defines the specification of the desired behavior of the replication controller. More info status ReplicationControllerStatus - (optional) Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info ReplicationControllerCondition class lightkube.models.core_v1. ReplicationControllerCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) ReplicationControllerCondition describes the state of a replication controller at a certain point. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of replication controller condition. lastTransitionTime meta_v1.Time - (optional) The last time the condition transitioned from one status to another. message str - (optional) A human readable message indicating details about the transition. reason str - (optional) The reason for the condition's last transition. ReplicationControllerList class lightkube.models.core_v1. ReplicationControllerList ( items , apiVersion=None , kind=None , metadata=None ) ReplicationControllerList is a collection of replication controllers. parameters items ReplicationController - List of replication controllers. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info ReplicationControllerSpec class lightkube.models.core_v1. ReplicationControllerSpec ( minReadySeconds=None , replicas=None , selector=None , template=None ) ReplicationControllerSpec is the specification of a replication controller. parameters minReadySeconds int - (optional) Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) replicas int - (optional) Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info selector dict - (optional) Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info template PodTemplateSpec - (optional) Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info ReplicationControllerStatus class lightkube.models.core_v1. ReplicationControllerStatus ( replicas , availableReplicas=None , conditions=None , fullyLabeledReplicas=None , observedGeneration=None , readyReplicas=None ) ReplicationControllerStatus represents the current status of a replication controller. parameters replicas int - Replicas is the most recently oberved number of replicas. More info availableReplicas int - (optional) The number of available replicas (ready for at least minReadySeconds) for this replication controller. conditions ReplicationControllerCondition - (optional) Represents the latest available observations of a replication controller's current state. fullyLabeledReplicas int - (optional) The number of pods that have labels matching the labels of the pod template of the replication controller. observedGeneration int - (optional) ObservedGeneration reflects the generation of the most recently observed replication controller. readyReplicas int - (optional) The number of ready replicas for this replication controller. ResourceFieldSelector class lightkube.models.core_v1. ResourceFieldSelector ( resource , containerName=None , divisor=None ) ResourceFieldSelector represents container resources (cpu, memory) and their output format parameters resource str - Required: resource to select containerName str - (optional) Container name: required for volumes, optional for env vars divisor resource.Quantity - (optional) Specifies the output format of the exposed resources, defaults to \"1\" ResourceQuota class lightkube.models.core_v1. ResourceQuota ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) ResourceQuota sets aggregate quota restrictions enforced per namespace parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec ResourceQuotaSpec - (optional) Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status status ResourceQuotaStatus - (optional) Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status ResourceQuotaList class lightkube.models.core_v1. ResourceQuotaList ( items , apiVersion=None , kind=None , metadata=None ) ResourceQuotaList is a list of ResourceQuota items. parameters items ResourceQuota - Items is a list of ResourceQuota objects. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info ResourceQuotaSpec class lightkube.models.core_v1. ResourceQuotaSpec ( hard=None , scopeSelector=None , scopes=None ) ResourceQuotaSpec defines the desired hard limits to enforce for Quota. parameters hard dict - (optional) hard is the set of desired hard limits for each named resource. More info scopeSelector ScopeSelector - (optional) scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched. scopes List[str] - (optional) A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects. ResourceQuotaStatus class lightkube.models.core_v1. ResourceQuotaStatus ( hard=None , used=None ) ResourceQuotaStatus defines the enforced hard limits and observed use. parameters hard dict - (optional) Hard is the set of enforced hard limits for each named resource. More info used dict - (optional) Used is the current observed total usage of the resource in the namespace. ResourceRequirements class lightkube.models.core_v1. ResourceRequirements ( limits=None , requests=None ) ResourceRequirements describes the compute resource requirements. parameters limits dict - (optional) Limits describes the maximum amount of compute resources allowed. More info requests dict - (optional) Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info SELinuxOptions class lightkube.models.core_v1. SELinuxOptions ( level=None , role=None , type=None , user=None ) SELinuxOptions are the labels to be applied to the container parameters level str - (optional) Level is SELinux level label that applies to the container. role str - (optional) Role is a SELinux role label that applies to the container. type str - (optional) Type is a SELinux type label that applies to the container. user str - (optional) User is a SELinux user label that applies to the container. ScaleIOPersistentVolumeSource class lightkube.models.core_v1. ScaleIOPersistentVolumeSource ( gateway , secretRef , system , fsType=None , protectionDomain=None , readOnly=None , sslEnabled=None , storageMode=None , storagePool=None , volumeName=None ) ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume parameters gateway str - The host address of the ScaleIO API Gateway. secretRef SecretReference - SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail. system str - The name of the storage system as configured in ScaleIO. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\" protectionDomain str - (optional) The name of the ScaleIO Protection Domain for the configured storage. readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. sslEnabled bool - (optional) Flag to enable/disable SSL communication with Gateway, default false storageMode str - (optional) Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned. storagePool str - (optional) The ScaleIO Storage Pool associated with the protection domain. volumeName str - (optional) The name of a volume already created in the ScaleIO system that is associated with this volume source. ScaleIOVolumeSource class lightkube.models.core_v1. ScaleIOVolumeSource ( gateway , secretRef , system , fsType=None , protectionDomain=None , readOnly=None , sslEnabled=None , storageMode=None , storagePool=None , volumeName=None ) ScaleIOVolumeSource represents a persistent ScaleIO volume parameters gateway str - The host address of the ScaleIO API Gateway. secretRef LocalObjectReference - SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail. system str - The name of the storage system as configured in ScaleIO. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\". protectionDomain str - (optional) The name of the ScaleIO Protection Domain for the configured storage. readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. sslEnabled bool - (optional) Flag to enable/disable SSL communication with Gateway, default false storageMode str - (optional) Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned. storagePool str - (optional) The ScaleIO Storage Pool associated with the protection domain. volumeName str - (optional) The name of a volume already created in the ScaleIO system that is associated with this volume source. ScopeSelector class lightkube.models.core_v1. ScopeSelector ( matchExpressions=None ) A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements. parameters matchExpressions ScopedResourceSelectorRequirement - (optional) A list of scope selector requirements by scope of the resources. ScopedResourceSelectorRequirement class lightkube.models.core_v1. ScopedResourceSelectorRequirement ( operator , scopeName , values=None ) A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values. parameters operator str - Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. scopeName str - The name of the scope that the selector applies to. values List[str] - (optional) An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. Secret class lightkube.models.core_v1. Secret ( apiVersion=None , data=None , immutable=None , kind=None , metadata=None , stringData=None , type=None ) Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info data dict - (optional) Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4 immutable bool - (optional) Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature gate. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info stringData dict - (optional) stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API. type str - (optional) Used to facilitate programmatic handling of secret data. SecretEnvSource class lightkube.models.core_v1. SecretEnvSource ( name=None , optional=None ) SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables. parameters name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the Secret must be defined SecretKeySelector class lightkube.models.core_v1. SecretKeySelector ( key , name=None , optional=None ) SecretKeySelector selects a key of a Secret. parameters key str - The key of the secret to select from. Must be a valid secret key. name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the Secret or its key must be defined SecretList class lightkube.models.core_v1. SecretList ( items , apiVersion=None , kind=None , metadata=None ) SecretList is a list of Secret. parameters items Secret - Items is a list of secret objects. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info SecretProjection class lightkube.models.core_v1. SecretProjection ( items=None , name=None , optional=None ) Adapts a secret into a projected volume. The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode. parameters items KeyToPath - (optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the Secret or its key must be defined SecretReference class lightkube.models.core_v1. SecretReference ( name=None , namespace=None ) SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace parameters name str - (optional) Name is unique within a namespace to reference a secret resource. namespace str - (optional) Namespace defines the space within which the secret name must be unique. SecretVolumeSource class lightkube.models.core_v1. SecretVolumeSource ( defaultMode=None , items=None , optional=None , secretName=None ) Adapts a Secret into a volume. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling. parameters defaultMode int - (optional) Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. items KeyToPath - (optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. optional bool - (optional) Specify whether the Secret or its keys must be defined secretName str - (optional) Name of the secret in the pod's namespace to use. More info SecurityContext class lightkube.models.core_v1. SecurityContext ( allowPrivilegeEscalation=None , capabilities=None , privileged=None , procMount=None , readOnlyRootFilesystem=None , runAsGroup=None , runAsNonRoot=None , runAsUser=None , seLinuxOptions=None , windowsOptions=None ) SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence. parameters allowPrivilegeEscalation bool - (optional) AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN capabilities Capabilities - (optional) The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. privileged bool - (optional) Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. procMount str - (optional) procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. readOnlyRootFilesystem bool - (optional) Whether this container has a read-only root filesystem. Default is false. runAsGroup int - (optional) The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. runAsNonRoot bool - (optional) Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. runAsUser int - (optional) The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. seLinuxOptions SELinuxOptions - (optional) The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. windowsOptions WindowsSecurityContextOptions - (optional) The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Service class lightkube.models.core_v1. Service ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec ServiceSpec - (optional) Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status status ServiceStatus - (optional) Most recently observed status of the service. Populated by the system. Read-only. More info ServiceAccount class lightkube.models.core_v1. ServiceAccount ( apiVersion=None , automountServiceAccountToken=None , imagePullSecrets=None , kind=None , metadata=None , secrets=None ) ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info automountServiceAccountToken bool - (optional) AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level. imagePullSecrets LocalObjectReference - (optional) ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info secrets ObjectReference - (optional) Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info ServiceAccountList class lightkube.models.core_v1. ServiceAccountList ( items , apiVersion=None , kind=None , metadata=None ) ServiceAccountList is a list of ServiceAccount objects parameters items ServiceAccount - List of ServiceAccounts. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info ServiceAccountTokenProjection class lightkube.models.core_v1. ServiceAccountTokenProjection ( path , audience=None , expirationSeconds=None ) ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise). parameters path str - Path is the path relative to the mount point of the file to project the token into. audience str - (optional) Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver. expirationSeconds int - (optional) ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes. ServiceList class lightkube.models.core_v1. ServiceList ( items , apiVersion=None , kind=None , metadata=None ) ServiceList holds a list of services. parameters items Service - List of services apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info ServicePort class lightkube.models.core_v1. ServicePort ( port , appProtocol=None , name=None , nodePort=None , protocol=None , targetPort=None ) ServicePort contains information on service's port. parameters port int - The port that will be exposed by this service. appProtocol str - (optional) The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names ). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate. name str - (optional) The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service. nodePort int - (optional) The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info protocol str - (optional) The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP. targetPort util_intstr.IntOrString - (optional) Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info ServiceSpec class lightkube.models.core_v1. ServiceSpec ( clusterIP=None , externalIPs=None , externalName=None , externalTrafficPolicy=None , healthCheckNodePort=None , ipFamily=None , loadBalancerIP=None , loadBalancerSourceRanges=None , ports=None , publishNotReadyAddresses=None , selector=None , sessionAffinity=None , sessionAffinityConfig=None , topologyKeys=None , type=None ) ServiceSpec describes the attributes that a user creates on a service. parameters clusterIP str - (optional) clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info externalIPs List[str] - (optional) externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system. externalName str - (optional) externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname ( https://tools.ietf.org/html/rfc1123 ) and requires Type to be ExternalName. externalTrafficPolicy str - (optional) externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading. healthCheckNodePort int - (optional) healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local. ipFamily str - (optional) ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6). If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster. If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family. Endpoints for this Service will be of this family. This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment. loadBalancerIP str - (optional) Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. loadBalancerSourceRanges List[str] - (optional) If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info ports ServicePort - (optional) The list of ports that are exposed by this service. More info publishNotReadyAddresses bool - (optional) publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery. selector dict - (optional) Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info sessionAffinity str - (optional) Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info sessionAffinityConfig SessionAffinityConfig - (optional) sessionAffinityConfig contains the configurations of session affinity. topologyKeys List[str] - (optional) topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. type str - (optional) type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info ServiceStatus class lightkube.models.core_v1. ServiceStatus ( loadBalancer=None ) ServiceStatus represents the current status of a service. parameters loadBalancer LoadBalancerStatus - (optional) LoadBalancer contains the current status of the load-balancer, if one is present. SessionAffinityConfig class lightkube.models.core_v1. SessionAffinityConfig ( clientIP=None ) SessionAffinityConfig represents the configurations of session affinity. parameters clientIP ClientIPConfig - (optional) clientIP contains the configurations of Client IP based session affinity. StorageOSPersistentVolumeSource class lightkube.models.core_v1. StorageOSPersistentVolumeSource ( fsType=None , readOnly=None , secretRef=None , volumeName=None , volumeNamespace=None ) Represents a StorageOS persistent volume resource. parameters fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. secretRef ObjectReference - (optional) SecretRef specifies the secret to use for obtaining the StorageOS API credentials. If not specified, default values will be attempted. volumeName str - (optional) VolumeName is the human-readable name of the StorageOS volume. Volume names are only unique within a namespace. volumeNamespace str - (optional) VolumeNamespace specifies the scope of the volume within StorageOS. If no namespace is specified then the Pod's namespace will be used. This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created. StorageOSVolumeSource class lightkube.models.core_v1. StorageOSVolumeSource ( fsType=None , readOnly=None , secretRef=None , volumeName=None , volumeNamespace=None ) Represents a StorageOS persistent volume resource. parameters fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. secretRef LocalObjectReference - (optional) SecretRef specifies the secret to use for obtaining the StorageOS API credentials. If not specified, default values will be attempted. volumeName str - (optional) VolumeName is the human-readable name of the StorageOS volume. Volume names are only unique within a namespace. volumeNamespace str - (optional) VolumeNamespace specifies the scope of the volume within StorageOS. If no namespace is specified then the Pod's namespace will be used. This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created. Sysctl class lightkube.models.core_v1. Sysctl ( name , value ) Sysctl defines a kernel parameter to be set parameters name str - Name of a property to set value str - Value of a property to set TCPSocketAction class lightkube.models.core_v1. TCPSocketAction ( port , host=None ) TCPSocketAction describes an action based on opening a socket parameters port util_intstr.IntOrString - Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. host str - (optional) Optional: Host name to connect to, defaults to the pod IP. Taint class lightkube.models.core_v1. Taint ( effect , key , timeAdded=None , value=None ) The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint. parameters effect str - Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute. key str - Required. The taint key to be applied to a node. timeAdded meta_v1.Time - (optional) TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints. value str - (optional) The taint value corresponding to the taint key. Toleration class lightkube.models.core_v1. Toleration ( effect=None , key=None , operator=None , tolerationSeconds=None , value=None ) The pod this Toleration is attached to tolerates any taint that matches the triple using the matching operator . parameters effect str - (optional) Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute. key str - (optional) Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. operator str - (optional) Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. tolerationSeconds int - (optional) TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system. value str - (optional) Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string. TopologySelectorLabelRequirement class lightkube.models.core_v1. TopologySelectorLabelRequirement ( key , values ) A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future. parameters key str - The label key that the selector applies to. values List[str] - An array of string values. One value must match the label to be selected. Each entry in Values is ORed. TopologySelectorTerm class lightkube.models.core_v1. TopologySelectorTerm ( matchLabelExpressions=None ) A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future. parameters matchLabelExpressions TopologySelectorLabelRequirement - (optional) A list of topology selector requirements by labels. TopologySpreadConstraint class lightkube.models.core_v1. TopologySpreadConstraint ( maxSkew , topologyKey , whenUnsatisfiable , labelSelector=None ) TopologySpreadConstraint specifies how to spread matching pods among the given topology. parameters maxSkew int - MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | | P | P | | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed. topologyKey str - TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field. whenUnsatisfiable str - WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as \"Unsatisfiable\" if and only if placing incoming pod on any topology violates \"MaxSkew\". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P | P | P | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it more imbalanced. It's a required field. labelSelector meta_v1.LabelSelector - (optional) LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain. TypedLocalObjectReference class lightkube.models.core_v1. TypedLocalObjectReference ( kind , name , apiGroup=None ) TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace. parameters kind str - Kind is the type of resource being referenced name str - Name is the name of resource being referenced apiGroup str - (optional) APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. Volume class lightkube.models.core_v1. Volume ( name , awsElasticBlockStore=None , azureDisk=None , azureFile=None , cephfs=None , cinder=None , configMap=None , csi=None , downwardAPI=None , emptyDir=None , fc=None , flexVolume=None , flocker=None , gcePersistentDisk=None , gitRepo=None , glusterfs=None , hostPath=None , iscsi=None , nfs=None , persistentVolumeClaim=None , photonPersistentDisk=None , portworxVolume=None , projected=None , quobyte=None , rbd=None , scaleIO=None , secret=None , storageos=None , vsphereVolume=None ) Volume represents a named volume in a pod that may be accessed by any container in the pod. parameters name str - Volume's name. Must be a DNS_LABEL and unique within the pod. More info awsElasticBlockStore AWSElasticBlockStoreVolumeSource - (optional) AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info azureDisk AzureDiskVolumeSource - (optional) AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. azureFile AzureFileVolumeSource - (optional) AzureFile represents an Azure File Service mount on the host and bind mount to the pod. cephfs CephFSVolumeSource - (optional) CephFS represents a Ceph FS mount on the host that shares a pod's lifetime cinder CinderVolumeSource - (optional) Cinder represents a cinder volume attached and mounted on kubelets host machine. More info configMap ConfigMapVolumeSource - (optional) ConfigMap represents a configMap that should populate this volume csi CSIVolumeSource - (optional) CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature). downwardAPI DownwardAPIVolumeSource - (optional) DownwardAPI represents downward API about the pod that should populate this volume emptyDir EmptyDirVolumeSource - (optional) EmptyDir represents a temporary directory that shares a pod's lifetime. More info fc FCVolumeSource - (optional) FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod. flexVolume FlexVolumeSource - (optional) FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. flocker FlockerVolumeSource - (optional) Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running gcePersistentDisk GCEPersistentDiskVolumeSource - (optional) GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info gitRepo GitRepoVolumeSource - (optional) GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container. glusterfs GlusterfsVolumeSource - (optional) Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info hostPath HostPathVolumeSource - (optional) HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info iscsi ISCSIVolumeSource - (optional) ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info nfs NFSVolumeSource - (optional) NFS represents an NFS mount on the host that shares a pod's lifetime More info persistentVolumeClaim PersistentVolumeClaimVolumeSource - (optional) PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info photonPersistentDisk PhotonPersistentDiskVolumeSource - (optional) PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine portworxVolume PortworxVolumeSource - (optional) PortworxVolume represents a portworx volume attached and mounted on kubelets host machine projected ProjectedVolumeSource - (optional) Items for all in one resources secrets, configmaps, and downward API quobyte QuobyteVolumeSource - (optional) Quobyte represents a Quobyte mount on the host that shares a pod's lifetime rbd RBDVolumeSource - (optional) RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info scaleIO ScaleIOVolumeSource - (optional) ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes. secret SecretVolumeSource - (optional) Secret represents a secret that should populate this volume. More info storageos StorageOSVolumeSource - (optional) StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes. vsphereVolume VsphereVirtualDiskVolumeSource - (optional) VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine VolumeDevice class lightkube.models.core_v1. VolumeDevice ( devicePath , name ) volumeDevice describes a mapping of a raw block device within a container. parameters devicePath str - devicePath is the path inside of the container that the device will be mapped to. name str - name must match the name of a persistentVolumeClaim in the pod VolumeMount class lightkube.models.core_v1. VolumeMount ( mountPath , name , mountPropagation=None , readOnly=None , subPath=None , subPathExpr=None ) VolumeMount describes a mounting of a Volume within a container. parameters mountPath str - Path within the container at which the volume should be mounted. Must not contain ':'. name str - This must match the Name of a Volume. mountPropagation str - (optional) mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. readOnly bool - (optional) Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. subPath str - (optional) Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root). subPathExpr str - (optional) Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive. VolumeNodeAffinity class lightkube.models.core_v1. VolumeNodeAffinity ( required=None ) VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from. parameters required NodeSelector - (optional) Required specifies hard node constraints that must be met. VolumeProjection class lightkube.models.core_v1. VolumeProjection ( configMap=None , downwardAPI=None , secret=None , serviceAccountToken=None ) Projection that may be projected along with other supported volume types parameters configMap ConfigMapProjection - (optional) information about the configMap data to project downwardAPI DownwardAPIProjection - (optional) information about the downwardAPI data to project secret SecretProjection - (optional) information about the secret data to project serviceAccountToken ServiceAccountTokenProjection - (optional) information about the serviceAccountToken data to project VsphereVirtualDiskVolumeSource class lightkube.models.core_v1. VsphereVirtualDiskVolumeSource ( volumePath , fsType=None , storagePolicyID=None , storagePolicyName=None ) Represents a vSphere volume resource. parameters volumePath str - Path that identifies vSphere volume vmdk fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. storagePolicyID str - (optional) Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName. storagePolicyName str - (optional) Storage Policy Based Management (SPBM) profile name. WeightedPodAffinityTerm class lightkube.models.core_v1. WeightedPodAffinityTerm ( podAffinityTerm , weight ) The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s) parameters podAffinityTerm PodAffinityTerm - Required. A pod affinity term, associated with the corresponding weight. weight int - weight associated with matching the corresponding podAffinityTerm, in the range 1-100. WindowsSecurityContextOptions class lightkube.models.core_v1. WindowsSecurityContextOptions ( gmsaCredentialSpec=None , gmsaCredentialSpecName=None , runAsUserName=None ) WindowsSecurityContextOptions contain Windows-specific options and credentials. parameters gmsaCredentialSpec str - (optional) GMSACredentialSpec is where the GMSA admission webhook ( https://github.com/kubernetes-sigs/windows-gmsa ) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. gmsaCredentialSpecName str - (optional) GMSACredentialSpecName is the name of the GMSA credential spec to use. runAsUserName str - (optional) The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.","title":"core_v1"},{"location":"models/core_v1/#core_v1","text":"","title":"core_v1"},{"location":"models/core_v1/#awselasticblockstorevolumesource","text":"class lightkube.models.core_v1. AWSElasticBlockStoreVolumeSource ( volumeID , fsType=None , partition=None , readOnly=None ) Represents a Persistent Disk resource in AWS. An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling. parameters volumeID str - Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info partition int - (optional) The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). readOnly bool - (optional) Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info","title":"AWSElasticBlockStoreVolumeSource"},{"location":"models/core_v1/#affinity","text":"class lightkube.models.core_v1. Affinity ( nodeAffinity=None , podAffinity=None , podAntiAffinity=None ) Affinity is a group of affinity scheduling rules. parameters nodeAffinity NodeAffinity - (optional) Describes node affinity scheduling rules for the pod. podAffinity PodAffinity - (optional) Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)). podAntiAffinity PodAntiAffinity - (optional) Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).","title":"Affinity"},{"location":"models/core_v1/#attachedvolume","text":"class lightkube.models.core_v1. AttachedVolume ( devicePath , name ) AttachedVolume describes a volume attached to a node parameters devicePath str - DevicePath represents the device path where the volume should be available name str - Name of the attached volume","title":"AttachedVolume"},{"location":"models/core_v1/#azurediskvolumesource","text":"class lightkube.models.core_v1. AzureDiskVolumeSource ( diskName , diskURI , cachingMode=None , fsType=None , kind=None , readOnly=None ) AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. parameters diskName str - The Name of the data disk in the blob storage diskURI str - The URI the data disk in the blob storage cachingMode str - (optional) Host Caching mode: None, Read Only, Read Write. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. kind str - (optional) Expected values Shared: multiple blob disks per storage account Dedicated: single blob disk per storage account Managed: azure managed data disk (only in managed availability set). defaults to shared readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.","title":"AzureDiskVolumeSource"},{"location":"models/core_v1/#azurefilepersistentvolumesource","text":"class lightkube.models.core_v1. AzureFilePersistentVolumeSource ( secretName , shareName , readOnly=None , secretNamespace=None ) AzureFile represents an Azure File Service mount on the host and bind mount to the pod. parameters secretName str - the name of secret that contains Azure Storage Account Name and Key shareName str - Share Name readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. secretNamespace str - (optional) the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod","title":"AzureFilePersistentVolumeSource"},{"location":"models/core_v1/#azurefilevolumesource","text":"class lightkube.models.core_v1. AzureFileVolumeSource ( secretName , shareName , readOnly=None ) AzureFile represents an Azure File Service mount on the host and bind mount to the pod. parameters secretName str - the name of secret that contains Azure Storage Account Name and Key shareName str - Share Name readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.","title":"AzureFileVolumeSource"},{"location":"models/core_v1/#binding","text":"class lightkube.models.core_v1. Binding ( target , apiVersion=None , kind=None , metadata=None ) Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead. parameters target ObjectReference - The target object that you want to bind to the standard object. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info","title":"Binding"},{"location":"models/core_v1/#csipersistentvolumesource","text":"class lightkube.models.core_v1. CSIPersistentVolumeSource ( driver , volumeHandle , controllerExpandSecretRef=None , controllerPublishSecretRef=None , fsType=None , nodePublishSecretRef=None , nodeStageSecretRef=None , readOnly=None , volumeAttributes=None ) Represents storage that is managed by an external CSI volume driver (Beta feature) parameters driver str - Driver is the name of the driver to use for this volume. Required. volumeHandle str - VolumeHandle is the unique volume name returned by the CSI volume plugin\u2019s CreateVolume to refer to the volume on all subsequent calls. Required. controllerExpandSecretRef SecretReference - (optional) ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed. controllerPublishSecretRef SecretReference - (optional) ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". nodePublishSecretRef SecretReference - (optional) NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed. nodeStageSecretRef SecretReference - (optional) NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed. readOnly bool - (optional) Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write). volumeAttributes dict - (optional) Attributes of the volume to publish.","title":"CSIPersistentVolumeSource"},{"location":"models/core_v1/#csivolumesource","text":"class lightkube.models.core_v1. CSIVolumeSource ( driver , fsType=None , nodePublishSecretRef=None , readOnly=None , volumeAttributes=None ) Represents a source location of a volume to mount, managed by an external CSI driver parameters driver str - Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster. fsType str - (optional) Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply. nodePublishSecretRef LocalObjectReference - (optional) NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed. readOnly bool - (optional) Specifies a read-only configuration for the volume. Defaults to false (read/write). volumeAttributes dict - (optional) VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.","title":"CSIVolumeSource"},{"location":"models/core_v1/#capabilities","text":"class lightkube.models.core_v1. Capabilities ( add=None , drop=None ) Adds and removes POSIX capabilities from running containers. parameters add List[str] - (optional) Added capabilities drop List[str] - (optional) Removed capabilities","title":"Capabilities"},{"location":"models/core_v1/#cephfspersistentvolumesource","text":"class lightkube.models.core_v1. CephFSPersistentVolumeSource ( monitors , path=None , readOnly=None , secretFile=None , secretRef=None , user=None ) Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling. parameters monitors List[str] - Required: Monitors is a collection of Ceph monitors More info path str - (optional) Optional: Used as the mounted root, rather than the full Ceph tree, default is / readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info secretFile str - (optional) Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info secretRef SecretReference - (optional) Optional: SecretRef is reference to the authentication secret for User, default is empty. More info user str - (optional) Optional: User is the rados user name, default is admin More info","title":"CephFSPersistentVolumeSource"},{"location":"models/core_v1/#cephfsvolumesource","text":"class lightkube.models.core_v1. CephFSVolumeSource ( monitors , path=None , readOnly=None , secretFile=None , secretRef=None , user=None ) Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling. parameters monitors List[str] - Required: Monitors is a collection of Ceph monitors More info path str - (optional) Optional: Used as the mounted root, rather than the full Ceph tree, default is / readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info secretFile str - (optional) Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info secretRef LocalObjectReference - (optional) Optional: SecretRef is reference to the authentication secret for User, default is empty. More info user str - (optional) Optional: User is the rados user name, default is admin More info","title":"CephFSVolumeSource"},{"location":"models/core_v1/#cinderpersistentvolumesource","text":"class lightkube.models.core_v1. CinderPersistentVolumeSource ( volumeID , fsType=None , readOnly=None , secretRef=None ) Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling. parameters volumeID str - volume id used to identify the volume in cinder. More info fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info secretRef SecretReference - (optional) Optional: points to a secret object containing parameters used to connect to OpenStack.","title":"CinderPersistentVolumeSource"},{"location":"models/core_v1/#cindervolumesource","text":"class lightkube.models.core_v1. CinderVolumeSource ( volumeID , fsType=None , readOnly=None , secretRef=None ) Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling. parameters volumeID str - volume id used to identify the volume in cinder. More info fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info secretRef LocalObjectReference - (optional) Optional: points to a secret object containing parameters used to connect to OpenStack.","title":"CinderVolumeSource"},{"location":"models/core_v1/#clientipconfig","text":"class lightkube.models.core_v1. ClientIPConfig ( timeoutSeconds=None ) ClientIPConfig represents the configurations of Client IP based session affinity. parameters timeoutSeconds int - (optional) timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).","title":"ClientIPConfig"},{"location":"models/core_v1/#componentcondition","text":"class lightkube.models.core_v1. ComponentCondition ( status , type , error=None , message=None ) Information about the condition of a component. parameters status str - Status of the condition for a component. Valid values for \"Healthy\": \"True\", \"False\", or \"Unknown\". type str - Type of condition for a component. Valid value: \"Healthy\" error str - (optional) Condition error code for a component. For example, a health check error code. message str - (optional) Message about the condition for a component. For example, information about a health check.","title":"ComponentCondition"},{"location":"models/core_v1/#componentstatus","text":"class lightkube.models.core_v1. ComponentStatus ( apiVersion=None , conditions=None , kind=None , metadata=None ) ComponentStatus (and ComponentStatusList) holds the cluster validation info. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info conditions ComponentCondition - (optional) List of component conditions observed kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info","title":"ComponentStatus"},{"location":"models/core_v1/#componentstatuslist","text":"class lightkube.models.core_v1. ComponentStatusList ( items , apiVersion=None , kind=None , metadata=None ) Status of all the conditions for the component as a list of ComponentStatus objects. parameters items ComponentStatus - List of ComponentStatus objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"ComponentStatusList"},{"location":"models/core_v1/#configmap","text":"class lightkube.models.core_v1. ConfigMap ( apiVersion=None , binaryData=None , data=None , immutable=None , kind=None , metadata=None ) ConfigMap holds configuration data for pods to consume. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info binaryData dict - (optional) BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', ' ' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet. data dict - (optional) Data contains the configuration data. Each key must consist of alphanumeric characters, '-', ' ' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process. immutable bool - (optional) Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature gate. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info","title":"ConfigMap"},{"location":"models/core_v1/#configmapenvsource","text":"class lightkube.models.core_v1. ConfigMapEnvSource ( name=None , optional=None ) ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables. parameters name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the ConfigMap must be defined","title":"ConfigMapEnvSource"},{"location":"models/core_v1/#configmapkeyselector","text":"class lightkube.models.core_v1. ConfigMapKeySelector ( key , name=None , optional=None ) Selects a key from a ConfigMap. parameters key str - The key to select. name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the ConfigMap or its key must be defined","title":"ConfigMapKeySelector"},{"location":"models/core_v1/#configmaplist","text":"class lightkube.models.core_v1. ConfigMapList ( items , apiVersion=None , kind=None , metadata=None ) ConfigMapList is a resource containing a list of ConfigMap objects. parameters items ConfigMap - Items is the list of ConfigMaps. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) More info","title":"ConfigMapList"},{"location":"models/core_v1/#configmapnodeconfigsource","text":"class lightkube.models.core_v1. ConfigMapNodeConfigSource ( kubeletConfigKey , name , namespace , resourceVersion=None , uid=None ) ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. parameters kubeletConfigKey str - KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases. name str - Name is the metadata.name of the referenced ConfigMap. This field is required in all cases. namespace str - Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases. resourceVersion str - (optional) ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status. uid str - (optional) UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.","title":"ConfigMapNodeConfigSource"},{"location":"models/core_v1/#configmapprojection","text":"class lightkube.models.core_v1. ConfigMapProjection ( items=None , name=None , optional=None ) Adapts a ConfigMap into a projected volume. The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode. parameters items KeyToPath - (optional) If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the ConfigMap or its keys must be defined","title":"ConfigMapProjection"},{"location":"models/core_v1/#configmapvolumesource","text":"class lightkube.models.core_v1. ConfigMapVolumeSource ( defaultMode=None , items=None , name=None , optional=None ) Adapts a ConfigMap into a volume. The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling. parameters defaultMode int - (optional) Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. items KeyToPath - (optional) If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the ConfigMap or its keys must be defined","title":"ConfigMapVolumeSource"},{"location":"models/core_v1/#container","text":"class lightkube.models.core_v1. Container ( name , args=None , command=None , env=None , envFrom=None , image=None , imagePullPolicy=None , lifecycle=None , livenessProbe=None , ports=None , readinessProbe=None , resources=None , securityContext=None , startupProbe=None , stdin=None , stdinOnce=None , terminationMessagePath=None , terminationMessagePolicy=None , tty=None , volumeDevices=None , volumeMounts=None , workingDir=None ) A single application container that you want to run within a pod. parameters name str - Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated. args List[str] - (optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info command List[str] - (optional) Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info env EnvVar - (optional) List of environment variables to set in the container. Cannot be updated. envFrom EnvFromSource - (optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated. image str - (optional) Docker image name. More info This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets. imagePullPolicy str - (optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info lifecycle Lifecycle - (optional) Actions that the management system should take in response to container lifecycle events. Cannot be updated. livenessProbe Probe - (optional) Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info ports ContainerPort - (optional) List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated. readinessProbe Probe - (optional) Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info resources ResourceRequirements - (optional) Compute Resources required by this container. Cannot be updated. More info securityContext SecurityContext - (optional) Security options the pod should run with. More info More info startupProbe Probe - (optional) StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is a beta feature enabled by the StartupProbe feature flag. More info stdin bool - (optional) Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false. stdinOnce bool - (optional) Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false terminationMessagePath str - (optional) Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated. terminationMessagePolicy str - (optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated. tty bool - (optional) Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false. volumeDevices VolumeDevice - (optional) volumeDevices is the list of block devices to be used by the container. volumeMounts VolumeMount - (optional) Pod volumes to mount into the container's filesystem. Cannot be updated. workingDir str - (optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.","title":"Container"},{"location":"models/core_v1/#containerimage","text":"class lightkube.models.core_v1. ContainerImage ( names , sizeBytes=None ) Describe a container image parameters names List[str] - Names by which this image is known. e.g. [\"k8s.gcr.io/hyperkube:v1.0.7\", \"dockerhub.io/google_containers/hyperkube:v1.0.7\"] sizeBytes int - (optional) The size of the image in bytes.","title":"ContainerImage"},{"location":"models/core_v1/#containerport","text":"class lightkube.models.core_v1. ContainerPort ( containerPort , hostIP=None , hostPort=None , name=None , protocol=None ) ContainerPort represents a network port in a single container. parameters containerPort int - Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536. hostIP str - (optional) What host IP to bind the external port to. hostPort int - (optional) Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this. name str - (optional) If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services. protocol str - (optional) Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".","title":"ContainerPort"},{"location":"models/core_v1/#containerstate","text":"class lightkube.models.core_v1. ContainerState ( running=None , terminated=None , waiting=None ) ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting. parameters running ContainerStateRunning - (optional) Details about a running container terminated ContainerStateTerminated - (optional) Details about a terminated container waiting ContainerStateWaiting - (optional) Details about a waiting container","title":"ContainerState"},{"location":"models/core_v1/#containerstaterunning","text":"class lightkube.models.core_v1. ContainerStateRunning ( startedAt=None ) ContainerStateRunning is a running state of a container. parameters startedAt meta_v1.Time - (optional) Time at which the container was last (re-)started","title":"ContainerStateRunning"},{"location":"models/core_v1/#containerstateterminated","text":"class lightkube.models.core_v1. ContainerStateTerminated ( exitCode , containerID=None , finishedAt=None , message=None , reason=None , signal=None , startedAt=None ) ContainerStateTerminated is a terminated state of a container. parameters exitCode int - Exit status from the last termination of the container containerID str - (optional) Container's ID in the format 'docker:// ' finishedAt meta_v1.Time - (optional) Time at which the container last terminated message str - (optional) Message regarding the last termination of the container reason str - (optional) (brief) reason from the last termination of the container signal int - (optional) Signal from the last termination of the container startedAt meta_v1.Time - (optional) Time at which previous execution of the container started","title":"ContainerStateTerminated"},{"location":"models/core_v1/#containerstatewaiting","text":"class lightkube.models.core_v1. ContainerStateWaiting ( message=None , reason=None ) ContainerStateWaiting is a waiting state of a container. parameters message str - (optional) Message regarding why the container is not yet running. reason str - (optional) (brief) reason the container is not yet running.","title":"ContainerStateWaiting"},{"location":"models/core_v1/#containerstatus","text":"class lightkube.models.core_v1. ContainerStatus ( image , imageID , name , ready , restartCount , containerID=None , lastState=None , started=None , state=None ) ContainerStatus contains details for the current status of this container. parameters image str - The image the container is running. More info imageID str - ImageID of the container's image. name str - This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated. ready bool - Specifies whether the container has passed its readiness probe. restartCount int - The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC. containerID str - (optional) Container's ID in the format 'docker:// '. lastState ContainerState - (optional) Details about the container's last termination condition. started bool - (optional) Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined. state ContainerState - (optional) Details about the container's current condition.","title":"ContainerStatus"},{"location":"models/core_v1/#daemonendpoint","text":"class lightkube.models.core_v1. DaemonEndpoint ( Port ) DaemonEndpoint contains information about a single Daemon endpoint. parameters Port int - Port number of the given endpoint.","title":"DaemonEndpoint"},{"location":"models/core_v1/#downwardapiprojection","text":"class lightkube.models.core_v1. DownwardAPIProjection ( items=None ) Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode. parameters items DownwardAPIVolumeFile - (optional) Items is a list of DownwardAPIVolume file","title":"DownwardAPIProjection"},{"location":"models/core_v1/#downwardapivolumefile","text":"class lightkube.models.core_v1. DownwardAPIVolumeFile ( path , fieldRef=None , mode=None , resourceFieldRef=None ) DownwardAPIVolumeFile represents information to create the file containing the pod field parameters path str - Required: Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..' fieldRef ObjectFieldSelector - (optional) Required: Selects a field of the pod: only annotations, labels, name and namespace are supported. mode int - (optional) Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. resourceFieldRef ResourceFieldSelector - (optional) Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.","title":"DownwardAPIVolumeFile"},{"location":"models/core_v1/#downwardapivolumesource","text":"class lightkube.models.core_v1. DownwardAPIVolumeSource ( defaultMode=None , items=None ) DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling. parameters defaultMode int - (optional) Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. items DownwardAPIVolumeFile - (optional) Items is a list of downward API volume file","title":"DownwardAPIVolumeSource"},{"location":"models/core_v1/#emptydirvolumesource","text":"class lightkube.models.core_v1. EmptyDirVolumeSource ( medium=None , sizeLimit=None ) Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling. parameters medium str - (optional) What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info sizeLimit resource.Quantity - (optional) Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info","title":"EmptyDirVolumeSource"},{"location":"models/core_v1/#endpointaddress","text":"class lightkube.models.core_v1. EndpointAddress ( ip , hostname=None , nodeName=None , targetRef=None ) EndpointAddress is a tuple that describes single IP address. parameters ip str - The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready. hostname str - (optional) The Hostname of this endpoint nodeName str - (optional) Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node. targetRef ObjectReference - (optional) Reference to object providing the endpoint.","title":"EndpointAddress"},{"location":"models/core_v1/#endpointport","text":"class lightkube.models.core_v1. EndpointPort ( port , appProtocol=None , name=None , protocol=None ) EndpointPort is a tuple that describes a single port. parameters port int - The port number of the endpoint. appProtocol str - (optional) The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names ). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate. name str - (optional) The name of this port. This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined. protocol str - (optional) The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.","title":"EndpointPort"},{"location":"models/core_v1/#endpointsubset","text":"class lightkube.models.core_v1. EndpointSubset ( addresses=None , notReadyAddresses=None , ports=None ) EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given: { Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}], Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}] } The resulting set of endpoints can be viewed as: a: [ 10.10.1.1:8675, 10.10.2.2:8675 ], b: [ 10.10.1.1:309, 10.10.2.2:309 ] parameters addresses EndpointAddress - (optional) IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize. notReadyAddresses EndpointAddress - (optional) IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check. ports EndpointPort - (optional) Port numbers available on the related IP addresses.","title":"EndpointSubset"},{"location":"models/core_v1/#endpoints","text":"class lightkube.models.core_v1. Endpoints ( apiVersion=None , kind=None , metadata=None , subsets=None ) Endpoints is a collection of endpoints that implement the actual service. Example: Name: \"mysvc\", Subsets: [ { Addresses: [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}], Ports: [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}] }, { Addresses: [{\"ip\": \"10.10.3.3\"}], Ports: [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}] }, ] parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info subsets EndpointSubset - (optional) The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.","title":"Endpoints"},{"location":"models/core_v1/#endpointslist","text":"class lightkube.models.core_v1. EndpointsList ( items , apiVersion=None , kind=None , metadata=None ) EndpointsList is a list of endpoints. parameters items Endpoints - List of endpoints. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"EndpointsList"},{"location":"models/core_v1/#envfromsource","text":"class lightkube.models.core_v1. EnvFromSource ( configMapRef=None , prefix=None , secretRef=None ) EnvFromSource represents the source of a set of ConfigMaps parameters configMapRef ConfigMapEnvSource - (optional) The ConfigMap to select from prefix str - (optional) An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER. secretRef SecretEnvSource - (optional) The Secret to select from","title":"EnvFromSource"},{"location":"models/core_v1/#envvar","text":"class lightkube.models.core_v1. EnvVar ( name , value=None , valueFrom=None ) EnvVar represents an environment variable present in a Container. parameters name str - Name of the environment variable. Must be a C_IDENTIFIER. value str - (optional) Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\". valueFrom EnvVarSource - (optional) Source for the environment variable's value. Cannot be used if value is not empty.","title":"EnvVar"},{"location":"models/core_v1/#envvarsource","text":"class lightkube.models.core_v1. EnvVarSource ( configMapKeyRef=None , fieldRef=None , resourceFieldRef=None , secretKeyRef=None ) EnvVarSource represents a source for the value of an EnvVar. parameters configMapKeyRef ConfigMapKeySelector - (optional) Selects a key of a ConfigMap. fieldRef ObjectFieldSelector - (optional) Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs. resourceFieldRef ResourceFieldSelector - (optional) Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported. secretKeyRef SecretKeySelector - (optional) Selects a key of a secret in the pod's namespace","title":"EnvVarSource"},{"location":"models/core_v1/#ephemeralcontainer","text":"class lightkube.models.core_v1. EphemeralContainer ( name , args=None , command=None , env=None , envFrom=None , image=None , imagePullPolicy=None , lifecycle=None , livenessProbe=None , ports=None , readinessProbe=None , resources=None , securityContext=None , startupProbe=None , stdin=None , stdinOnce=None , targetContainerName=None , terminationMessagePath=None , terminationMessagePolicy=None , tty=None , volumeDevices=None , volumeMounts=None , workingDir=None ) An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag. parameters name str - Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers. args List[str] - (optional) Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info command List[str] - (optional) Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info env EnvVar - (optional) List of environment variables to set in the container. Cannot be updated. envFrom EnvFromSource - (optional) List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated. image str - (optional) Docker image name. More info imagePullPolicy str - (optional) Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info lifecycle Lifecycle - (optional) Lifecycle is not allowed for ephemeral containers. livenessProbe Probe - (optional) Probes are not allowed for ephemeral containers. ports ContainerPort - (optional) Ports are not allowed for ephemeral containers. readinessProbe Probe - (optional) Probes are not allowed for ephemeral containers. resources ResourceRequirements - (optional) Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod. securityContext SecurityContext - (optional) SecurityContext is not allowed for ephemeral containers. startupProbe Probe - (optional) Probes are not allowed for ephemeral containers. stdin bool - (optional) Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false. stdinOnce bool - (optional) Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false targetContainerName str - (optional) If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature. terminationMessagePath str - (optional) Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated. terminationMessagePolicy str - (optional) Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated. tty bool - (optional) Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false. volumeDevices VolumeDevice - (optional) volumeDevices is the list of block devices to be used by the container. volumeMounts VolumeMount - (optional) Pod volumes to mount into the container's filesystem. Cannot be updated. workingDir str - (optional) Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.","title":"EphemeralContainer"},{"location":"models/core_v1/#event","text":"class lightkube.models.core_v1. Event ( involvedObject , metadata , action=None , apiVersion=None , count=None , eventTime=None , firstTimestamp=None , kind=None , lastTimestamp=None , message=None , reason=None , related=None , reportingComponent=None , reportingInstance=None , series=None , source=None , type=None ) Event is a report of an event somewhere in the cluster. parameters involvedObject ObjectReference - The object that this event is about. metadata meta_v1.ObjectMeta - Standard object's metadata. More info action str - (optional) What action was taken/failed regarding to the Regarding object. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info count int - (optional) The number of times this event has occurred. eventTime meta_v1.MicroTime - (optional) Time when this Event was first observed. firstTimestamp meta_v1.Time - (optional) The time at which the event was first recorded. (Time of server receipt is in TypeMeta.) kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info lastTimestamp meta_v1.Time - (optional) The time at which the most recent occurrence of this event was recorded. message str - (optional) A human-readable description of the status of this operation. reason str - (optional) This should be a short, machine understandable string that gives the reason for the transition into the object's current status. related ObjectReference - (optional) Optional secondary object for more complex actions. reportingComponent str - (optional) Name of the controller that emitted this Event, e.g. kubernetes.io/kubelet . reportingInstance str - (optional) ID of the controller instance, e.g. kubelet-xyzf . series EventSeries - (optional) Data about the Event series this event represents or nil if it's a singleton Event. source EventSource - (optional) The component reporting this event. Should be a short machine understandable string. type str - (optional) Type of this event (Normal, Warning), new types could be added in the future","title":"Event"},{"location":"models/core_v1/#eventlist","text":"class lightkube.models.core_v1. EventList ( items , apiVersion=None , kind=None , metadata=None ) EventList is a list of events. parameters items Event - List of events apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"EventList"},{"location":"models/core_v1/#eventseries","text":"class lightkube.models.core_v1. EventSeries ( count=None , lastObservedTime=None , state=None ) EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. parameters count int - (optional) Number of occurrences in this series up to the last heartbeat time lastObservedTime meta_v1.MicroTime - (optional) Time of the last occurrence observed state str - (optional) State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18","title":"EventSeries"},{"location":"models/core_v1/#eventsource","text":"class lightkube.models.core_v1. EventSource ( component=None , host=None ) EventSource contains information for an event. parameters component str - (optional) Component from which the event is generated. host str - (optional) Node name on which the event is generated.","title":"EventSource"},{"location":"models/core_v1/#execaction","text":"class lightkube.models.core_v1. ExecAction ( command=None ) ExecAction describes a \"run in container\" action. parameters command List[str] - (optional) Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.","title":"ExecAction"},{"location":"models/core_v1/#fcvolumesource","text":"class lightkube.models.core_v1. FCVolumeSource ( fsType=None , lun=None , readOnly=None , targetWWNs=None , wwids=None ) Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling. parameters fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. lun int - (optional) Optional: FC target lun number readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. targetWWNs List[str] - (optional) Optional: FC target worldwide names (WWNs) wwids List[str] - (optional) Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.","title":"FCVolumeSource"},{"location":"models/core_v1/#flexpersistentvolumesource","text":"class lightkube.models.core_v1. FlexPersistentVolumeSource ( driver , fsType=None , options=None , readOnly=None , secretRef=None ) FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin. parameters driver str - Driver is the name of the driver to use for this volume. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script. options dict - (optional) Optional: Extra command options if any. readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. secretRef SecretReference - (optional) Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.","title":"FlexPersistentVolumeSource"},{"location":"models/core_v1/#flexvolumesource","text":"class lightkube.models.core_v1. FlexVolumeSource ( driver , fsType=None , options=None , readOnly=None , secretRef=None ) FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. parameters driver str - Driver is the name of the driver to use for this volume. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script. options dict - (optional) Optional: Extra command options if any. readOnly bool - (optional) Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. secretRef LocalObjectReference - (optional) Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.","title":"FlexVolumeSource"},{"location":"models/core_v1/#flockervolumesource","text":"class lightkube.models.core_v1. FlockerVolumeSource ( datasetName=None , datasetUUID=None ) Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling. parameters datasetName str - (optional) Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated datasetUUID str - (optional) UUID of the dataset. This is unique identifier of a Flocker dataset","title":"FlockerVolumeSource"},{"location":"models/core_v1/#gcepersistentdiskvolumesource","text":"class lightkube.models.core_v1. GCEPersistentDiskVolumeSource ( pdName , fsType=None , partition=None , readOnly=None ) Represents a Persistent Disk resource in Google Compute Engine. A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling. parameters pdName str - Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info partition int - (optional) The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info readOnly bool - (optional) ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info","title":"GCEPersistentDiskVolumeSource"},{"location":"models/core_v1/#gitrepovolumesource","text":"class lightkube.models.core_v1. GitRepoVolumeSource ( repository , directory=None , revision=None ) Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container. parameters repository str - Repository URL directory str - (optional) Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name. revision str - (optional) Commit hash for the specified revision.","title":"GitRepoVolumeSource"},{"location":"models/core_v1/#glusterfspersistentvolumesource","text":"class lightkube.models.core_v1. GlusterfsPersistentVolumeSource ( endpoints , path , endpointsNamespace=None , readOnly=None ) Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling. parameters endpoints str - EndpointsName is the endpoint name that details Glusterfs topology. More info path str - Path is the Glusterfs volume path. More info endpointsNamespace str - (optional) EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info readOnly bool - (optional) ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info","title":"GlusterfsPersistentVolumeSource"},{"location":"models/core_v1/#glusterfsvolumesource","text":"class lightkube.models.core_v1. GlusterfsVolumeSource ( endpoints , path , readOnly=None ) Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling. parameters endpoints str - EndpointsName is the endpoint name that details Glusterfs topology. More info path str - Path is the Glusterfs volume path. More info readOnly bool - (optional) ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info","title":"GlusterfsVolumeSource"},{"location":"models/core_v1/#httpgetaction","text":"class lightkube.models.core_v1. HTTPGetAction ( port , host=None , httpHeaders=None , path=None , scheme=None ) HTTPGetAction describes an action based on HTTP Get requests. parameters port util_intstr.IntOrString - Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. host str - (optional) Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead. httpHeaders HTTPHeader - (optional) Custom headers to set in the request. HTTP allows repeated headers. path str - (optional) Path to access on the HTTP server. scheme str - (optional) Scheme to use for connecting to the host. Defaults to HTTP.","title":"HTTPGetAction"},{"location":"models/core_v1/#httpheader","text":"class lightkube.models.core_v1. HTTPHeader ( name , value ) HTTPHeader describes a custom header to be used in HTTP probes parameters name str - The header field name value str - The header field value","title":"HTTPHeader"},{"location":"models/core_v1/#handler","text":"class lightkube.models.core_v1. Handler ( exec=None , httpGet=None , tcpSocket=None ) Handler defines a specific action that should be taken parameters exec ExecAction - (optional) One and only one of the following should be specified. Exec specifies the action to take. httpGet HTTPGetAction - (optional) HTTPGet specifies the http request to perform. tcpSocket TCPSocketAction - (optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported","title":"Handler"},{"location":"models/core_v1/#hostalias","text":"class lightkube.models.core_v1. HostAlias ( hostnames=None , ip=None ) HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file. parameters hostnames List[str] - (optional) Hostnames for the above IP address. ip str - (optional) IP address of the host file entry.","title":"HostAlias"},{"location":"models/core_v1/#hostpathvolumesource","text":"class lightkube.models.core_v1. HostPathVolumeSource ( path , type=None ) Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling. parameters path str - Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info type str - (optional) Type for HostPath Volume Defaults to \"\" More info","title":"HostPathVolumeSource"},{"location":"models/core_v1/#iscsipersistentvolumesource","text":"class lightkube.models.core_v1. ISCSIPersistentVolumeSource ( iqn , lun , targetPortal , chapAuthDiscovery=None , chapAuthSession=None , fsType=None , initiatorName=None , iscsiInterface=None , portals=None , readOnly=None , secretRef=None ) ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling. parameters iqn str - Target iSCSI Qualified Name. lun int - iSCSI Target Lun number. targetPortal str - iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). chapAuthDiscovery bool - (optional) whether support iSCSI Discovery CHAP authentication chapAuthSession bool - (optional) whether support iSCSI Session CHAP authentication fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info initiatorName str - (optional) Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface : will be created for the connection. iscsiInterface str - (optional) iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp). portals List[str] - (optional) iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). readOnly bool - (optional) ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. secretRef SecretReference - (optional) CHAP Secret for iSCSI target and initiator authentication","title":"ISCSIPersistentVolumeSource"},{"location":"models/core_v1/#iscsivolumesource","text":"class lightkube.models.core_v1. ISCSIVolumeSource ( iqn , lun , targetPortal , chapAuthDiscovery=None , chapAuthSession=None , fsType=None , initiatorName=None , iscsiInterface=None , portals=None , readOnly=None , secretRef=None ) Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling. parameters iqn str - Target iSCSI Qualified Name. lun int - iSCSI Target Lun number. targetPortal str - iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). chapAuthDiscovery bool - (optional) whether support iSCSI Discovery CHAP authentication chapAuthSession bool - (optional) whether support iSCSI Session CHAP authentication fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info initiatorName str - (optional) Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface : will be created for the connection. iscsiInterface str - (optional) iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp). portals List[str] - (optional) iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). readOnly bool - (optional) ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. secretRef LocalObjectReference - (optional) CHAP Secret for iSCSI target and initiator authentication","title":"ISCSIVolumeSource"},{"location":"models/core_v1/#keytopath","text":"class lightkube.models.core_v1. KeyToPath ( key , path , mode=None ) Maps a string key to a path within a volume. parameters key str - The key to project. path str - The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'. mode int - (optional) Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.","title":"KeyToPath"},{"location":"models/core_v1/#lifecycle","text":"class lightkube.models.core_v1. Lifecycle ( postStart=None , preStop=None ) Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted. parameters postStart Handler - (optional) PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info preStop Handler - (optional) PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info","title":"Lifecycle"},{"location":"models/core_v1/#limitrange","text":"class lightkube.models.core_v1. LimitRange ( apiVersion=None , kind=None , metadata=None , spec=None ) LimitRange sets resource usage limits for each kind of resource in a Namespace. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec LimitRangeSpec - (optional) Spec defines the limits enforced. More info","title":"LimitRange"},{"location":"models/core_v1/#limitrangeitem","text":"class lightkube.models.core_v1. LimitRangeItem ( type , default=None , defaultRequest=None , max=None , maxLimitRequestRatio=None , min=None ) LimitRangeItem defines a min/max usage limit for any resource that matches on kind. parameters type str - Type of resource that this limit applies to. default dict - (optional) Default resource requirement limit value by resource name if resource limit is omitted. defaultRequest dict - (optional) DefaultRequest is the default resource requirement request value by resource name if resource request is omitted. max dict - (optional) Max usage constraints on this kind by resource name. maxLimitRequestRatio dict - (optional) MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource. min dict - (optional) Min usage constraints on this kind by resource name.","title":"LimitRangeItem"},{"location":"models/core_v1/#limitrangelist","text":"class lightkube.models.core_v1. LimitRangeList ( items , apiVersion=None , kind=None , metadata=None ) LimitRangeList is a list of LimitRange items. parameters items LimitRange - Items is a list of LimitRange objects. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"LimitRangeList"},{"location":"models/core_v1/#limitrangespec","text":"class lightkube.models.core_v1. LimitRangeSpec ( limits ) LimitRangeSpec defines a min/max usage limit for resources that match on kind. parameters limits LimitRangeItem - Limits is the list of LimitRangeItem objects that are enforced.","title":"LimitRangeSpec"},{"location":"models/core_v1/#loadbalanceringress","text":"class lightkube.models.core_v1. LoadBalancerIngress ( hostname=None , ip=None ) LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point. parameters hostname str - (optional) Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers) ip str - (optional) IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)","title":"LoadBalancerIngress"},{"location":"models/core_v1/#loadbalancerstatus","text":"class lightkube.models.core_v1. LoadBalancerStatus ( ingress=None ) LoadBalancerStatus represents the status of a load-balancer. parameters ingress LoadBalancerIngress - (optional) Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.","title":"LoadBalancerStatus"},{"location":"models/core_v1/#localobjectreference","text":"class lightkube.models.core_v1. LocalObjectReference ( name=None ) LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace. parameters name str - (optional) Name of the referent. More info","title":"LocalObjectReference"},{"location":"models/core_v1/#localvolumesource","text":"class lightkube.models.core_v1. LocalVolumeSource ( path , fsType=None ) Local represents directly-attached storage with node affinity (Beta feature) parameters path str - The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...). fsType str - (optional) Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a fileystem if unspecified.","title":"LocalVolumeSource"},{"location":"models/core_v1/#nfsvolumesource","text":"class lightkube.models.core_v1. NFSVolumeSource ( path , server , readOnly=None ) Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling. parameters path str - Path that is exported by the NFS server. More info server str - Server is the hostname or IP address of the NFS server. More info readOnly bool - (optional) ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info","title":"NFSVolumeSource"},{"location":"models/core_v1/#namespace","text":"class lightkube.models.core_v1. Namespace ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Namespace provides a scope for Names. Use of multiple namespaces is optional. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec NamespaceSpec - (optional) Spec defines the behavior of the Namespace. More info status NamespaceStatus - (optional) Status describes the current status of a Namespace. More info","title":"Namespace"},{"location":"models/core_v1/#namespacecondition","text":"class lightkube.models.core_v1. NamespaceCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) NamespaceCondition contains details about state of namespace. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of namespace controller condition. lastTransitionTime meta_v1.Time - (optional) message str - (optional) reason str - (optional)","title":"NamespaceCondition"},{"location":"models/core_v1/#namespacelist","text":"class lightkube.models.core_v1. NamespaceList ( items , apiVersion=None , kind=None , metadata=None ) NamespaceList is a list of Namespaces. parameters items Namespace - Items is the list of Namespace objects in the list. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"NamespaceList"},{"location":"models/core_v1/#namespacespec","text":"class lightkube.models.core_v1. NamespaceSpec ( finalizers=None ) NamespaceSpec describes the attributes on a Namespace. parameters finalizers List[str] - (optional) Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info","title":"NamespaceSpec"},{"location":"models/core_v1/#namespacestatus","text":"class lightkube.models.core_v1. NamespaceStatus ( conditions=None , phase=None ) NamespaceStatus is information about the current status of a Namespace. parameters conditions NamespaceCondition - (optional) Represents the latest available observations of a namespace's current state. phase str - (optional) Phase is the current lifecycle phase of the namespace. More info","title":"NamespaceStatus"},{"location":"models/core_v1/#node","text":"class lightkube.models.core_v1. Node ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd). parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec NodeSpec - (optional) Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status status NodeStatus - (optional) Most recently observed status of the node. Populated by the system. Read-only. More info","title":"Node"},{"location":"models/core_v1/#nodeaddress","text":"class lightkube.models.core_v1. NodeAddress ( address , type ) NodeAddress contains information for the node's address. parameters address str - The node address. type str - Node address type, one of Hostname, ExternalIP or InternalIP.","title":"NodeAddress"},{"location":"models/core_v1/#nodeaffinity","text":"class lightkube.models.core_v1. NodeAffinity ( preferredDuringSchedulingIgnoredDuringExecution=None , requiredDuringSchedulingIgnoredDuringExecution=None ) Node affinity is a group of node affinity scheduling rules. parameters preferredDuringSchedulingIgnoredDuringExecution PreferredSchedulingTerm - (optional) The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred. requiredDuringSchedulingIgnoredDuringExecution NodeSelector - (optional) If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.","title":"NodeAffinity"},{"location":"models/core_v1/#nodecondition","text":"class lightkube.models.core_v1. NodeCondition ( status , type , lastHeartbeatTime=None , lastTransitionTime=None , message=None , reason=None ) NodeCondition contains condition information for a node. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of node condition. lastHeartbeatTime meta_v1.Time - (optional) Last time we got an update on a given condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transit from one status to another. message str - (optional) Human readable message indicating details about last transition. reason str - (optional) (brief) reason for the condition's last transition.","title":"NodeCondition"},{"location":"models/core_v1/#nodeconfigsource","text":"class lightkube.models.core_v1. NodeConfigSource ( configMap=None ) NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. parameters configMap ConfigMapNodeConfigSource - (optional) ConfigMap is a reference to a Node's ConfigMap","title":"NodeConfigSource"},{"location":"models/core_v1/#nodeconfigstatus","text":"class lightkube.models.core_v1. NodeConfigStatus ( active=None , assigned=None , error=None , lastKnownGood=None ) NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource. parameters active NodeConfigSource - (optional) Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error. assigned NodeConfigSource - (optional) Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned. error str - (optional) Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions. lastKnownGood NodeConfigSource - (optional) LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.","title":"NodeConfigStatus"},{"location":"models/core_v1/#nodedaemonendpoints","text":"class lightkube.models.core_v1. NodeDaemonEndpoints ( kubeletEndpoint=None ) NodeDaemonEndpoints lists ports opened by daemons running on the Node. parameters kubeletEndpoint DaemonEndpoint - (optional) Endpoint on which Kubelet is listening.","title":"NodeDaemonEndpoints"},{"location":"models/core_v1/#nodelist","text":"class lightkube.models.core_v1. NodeList ( items , apiVersion=None , kind=None , metadata=None ) NodeList is the whole list of all Nodes which have been registered with master. parameters items Node - List of nodes apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"NodeList"},{"location":"models/core_v1/#nodeselector","text":"class lightkube.models.core_v1. NodeSelector ( nodeSelectorTerms ) A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms. parameters nodeSelectorTerms NodeSelectorTerm - Required. A list of node selector terms. The terms are ORed.","title":"NodeSelector"},{"location":"models/core_v1/#nodeselectorrequirement","text":"class lightkube.models.core_v1. NodeSelectorRequirement ( key , operator , values=None ) A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values. parameters key str - The label key that the selector applies to. operator str - Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt. values List[str] - (optional) An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.","title":"NodeSelectorRequirement"},{"location":"models/core_v1/#nodeselectorterm","text":"class lightkube.models.core_v1. NodeSelectorTerm ( matchExpressions=None , matchFields=None ) A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm. parameters matchExpressions NodeSelectorRequirement - (optional) A list of node selector requirements by node's labels. matchFields NodeSelectorRequirement - (optional) A list of node selector requirements by node's fields.","title":"NodeSelectorTerm"},{"location":"models/core_v1/#nodespec","text":"class lightkube.models.core_v1. NodeSpec ( configSource=None , externalID=None , podCIDR=None , podCIDRs=None , providerID=None , taints=None , unschedulable=None ) NodeSpec describes the attributes that a node is created with. parameters configSource NodeConfigSource - (optional) If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field externalID str - (optional) Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966 podCIDR str - (optional) PodCIDR represents the pod IP range assigned to the node. podCIDRs List[str] - (optional) podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6. providerID str - (optional) ID of the node assigned by the cloud provider in the format: :// taints Taint - (optional) If specified, the node's taints. unschedulable bool - (optional) Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info","title":"NodeSpec"},{"location":"models/core_v1/#nodestatus","text":"class lightkube.models.core_v1. NodeStatus ( addresses=None , allocatable=None , capacity=None , conditions=None , config=None , daemonEndpoints=None , images=None , nodeInfo=None , phase=None , volumesAttached=None , volumesInUse=None ) NodeStatus is information about the current status of a node. parameters addresses NodeAddress - (optional) List of addresses reachable to the node. Queried from cloud provider, if available. More info Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example. allocatable dict - (optional) Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity. capacity dict - (optional) Capacity represents the total resources of a node. More info conditions NodeCondition - (optional) Conditions is an array of current observed node conditions. More info config NodeConfigStatus - (optional) Status of the config assigned to the node via the dynamic Kubelet config feature. daemonEndpoints NodeDaemonEndpoints - (optional) Endpoints of daemons running on the Node. images ContainerImage - (optional) List of container images on this node nodeInfo NodeSystemInfo - (optional) Set of ids/uuids to uniquely identify the node. More info phase str - (optional) NodePhase is the recently observed lifecycle phase of the node. More info The field is never populated, and now is deprecated. volumesAttached AttachedVolume - (optional) List of volumes that are attached to the node. volumesInUse List[str] - (optional) List of attachable volumes in use (mounted) by the node.","title":"NodeStatus"},{"location":"models/core_v1/#nodesysteminfo","text":"class lightkube.models.core_v1. NodeSystemInfo ( architecture , bootID , containerRuntimeVersion , kernelVersion , kubeProxyVersion , kubeletVersion , machineID , operatingSystem , osImage , systemUUID ) NodeSystemInfo is a set of ids/uuids to uniquely identify the node. parameters architecture str - The Architecture reported by the node bootID str - Boot ID reported by the node. containerRuntimeVersion str - ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0). kernelVersion str - Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64). kubeProxyVersion str - KubeProxy Version reported by the node. kubeletVersion str - Kubelet Version reported by the node. machineID str - MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html operatingSystem str - The Operating System reported by the node osImage str - OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)). systemUUID str - SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html","title":"NodeSystemInfo"},{"location":"models/core_v1/#objectfieldselector","text":"class lightkube.models.core_v1. ObjectFieldSelector ( fieldPath , apiVersion=None ) ObjectFieldSelector selects an APIVersioned field of an object. parameters fieldPath str - Path of the field to select in the specified API version. apiVersion str - (optional) Version of the schema the FieldPath is written in terms of, defaults to \"v1\".","title":"ObjectFieldSelector"},{"location":"models/core_v1/#objectreference","text":"class lightkube.models.core_v1. ObjectReference ( apiVersion=None , fieldPath=None , kind=None , name=None , namespace=None , resourceVersion=None , uid=None ) ObjectReference contains enough information to let you inspect or modify the referred object. parameters apiVersion str - (optional) API version of the referent. fieldPath str - (optional) If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. kind str - (optional) Kind of the referent. More info name str - (optional) Name of the referent. More info namespace str - (optional) Namespace of the referent. More info resourceVersion str - (optional) Specific resourceVersion to which this reference is made, if any. More info uid str - (optional) UID of the referent. More info","title":"ObjectReference"},{"location":"models/core_v1/#persistentvolume","text":"class lightkube.models.core_v1. PersistentVolume ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec PersistentVolumeSpec - (optional) Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info status PersistentVolumeStatus - (optional) Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info","title":"PersistentVolume"},{"location":"models/core_v1/#persistentvolumeclaim","text":"class lightkube.models.core_v1. PersistentVolumeClaim ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) PersistentVolumeClaim is a user's request for and claim to a persistent volume parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec PersistentVolumeClaimSpec - (optional) Spec defines the desired characteristics of a volume requested by a pod author. More info status PersistentVolumeClaimStatus - (optional) Status represents the current information/status of a persistent volume claim. Read-only. More info","title":"PersistentVolumeClaim"},{"location":"models/core_v1/#persistentvolumeclaimcondition","text":"class lightkube.models.core_v1. PersistentVolumeClaimCondition ( status , type , lastProbeTime=None , lastTransitionTime=None , message=None , reason=None ) PersistentVolumeClaimCondition contails details about state of pvc parameters status str - type str - lastProbeTime meta_v1.Time - (optional) Last time we probed the condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) Human-readable message indicating details about last transition. reason str - (optional) Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.","title":"PersistentVolumeClaimCondition"},{"location":"models/core_v1/#persistentvolumeclaimlist","text":"class lightkube.models.core_v1. PersistentVolumeClaimList ( items , apiVersion=None , kind=None , metadata=None ) PersistentVolumeClaimList is a list of PersistentVolumeClaim items. parameters items PersistentVolumeClaim - A list of persistent volume claims. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"PersistentVolumeClaimList"},{"location":"models/core_v1/#persistentvolumeclaimspec","text":"class lightkube.models.core_v1. PersistentVolumeClaimSpec ( accessModes=None , dataSource=None , resources=None , selector=None , storageClassName=None , volumeMode=None , volumeName=None ) PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes parameters accessModes List[str] - (optional) AccessModes contains the desired access modes the volume should have. More info dataSource TypedLocalObjectReference - (optional) This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot - Beta) * An existing PVC (PersistentVolumeClaim) * An existing custom resource/object that implements data population (Alpha) In order to use VolumeSnapshot object types, the appropriate feature gate must be enabled (VolumeSnapshotDataSource or AnyVolumeDataSource) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change. resources ResourceRequirements - (optional) Resources represents the minimum resources the volume should have. More info selector meta_v1.LabelSelector - (optional) A label query over volumes to consider for binding. storageClassName str - (optional) Name of the StorageClass required by the claim. More info volumeMode str - (optional) volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. volumeName str - (optional) VolumeName is the binding reference to the PersistentVolume backing this claim.","title":"PersistentVolumeClaimSpec"},{"location":"models/core_v1/#persistentvolumeclaimstatus","text":"class lightkube.models.core_v1. PersistentVolumeClaimStatus ( accessModes=None , capacity=None , conditions=None , phase=None ) PersistentVolumeClaimStatus is the current status of a persistent volume claim. parameters accessModes List[str] - (optional) AccessModes contains the actual access modes the volume backing the PVC has. More info capacity dict - (optional) Represents the actual resources of the underlying volume. conditions PersistentVolumeClaimCondition - (optional) Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'. phase str - (optional) Phase represents the current phase of PersistentVolumeClaim.","title":"PersistentVolumeClaimStatus"},{"location":"models/core_v1/#persistentvolumeclaimvolumesource","text":"class lightkube.models.core_v1. PersistentVolumeClaimVolumeSource ( claimName , readOnly=None ) PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system). parameters claimName str - ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info readOnly bool - (optional) Will force the ReadOnly setting in VolumeMounts. Default false.","title":"PersistentVolumeClaimVolumeSource"},{"location":"models/core_v1/#persistentvolumelist","text":"class lightkube.models.core_v1. PersistentVolumeList ( items , apiVersion=None , kind=None , metadata=None ) PersistentVolumeList is a list of PersistentVolume items. parameters items PersistentVolume - List of persistent volumes. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"PersistentVolumeList"},{"location":"models/core_v1/#persistentvolumespec","text":"class lightkube.models.core_v1. PersistentVolumeSpec ( accessModes=None , awsElasticBlockStore=None , azureDisk=None , azureFile=None , capacity=None , cephfs=None , cinder=None , claimRef=None , csi=None , fc=None , flexVolume=None , flocker=None , gcePersistentDisk=None , glusterfs=None , hostPath=None , iscsi=None , local=None , mountOptions=None , nfs=None , nodeAffinity=None , persistentVolumeReclaimPolicy=None , photonPersistentDisk=None , portworxVolume=None , quobyte=None , rbd=None , scaleIO=None , storageClassName=None , storageos=None , volumeMode=None , vsphereVolume=None ) PersistentVolumeSpec is the specification of a persistent volume. parameters accessModes List[str] - (optional) AccessModes contains all ways the volume can be mounted. More info awsElasticBlockStore AWSElasticBlockStoreVolumeSource - (optional) AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info azureDisk AzureDiskVolumeSource - (optional) AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. azureFile AzureFilePersistentVolumeSource - (optional) AzureFile represents an Azure File Service mount on the host and bind mount to the pod. capacity dict - (optional) A description of the persistent volume's resources and capacity. More info cephfs CephFSPersistentVolumeSource - (optional) CephFS represents a Ceph FS mount on the host that shares a pod's lifetime cinder CinderPersistentVolumeSource - (optional) Cinder represents a cinder volume attached and mounted on kubelets host machine. More info claimRef ObjectReference - (optional) ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info csi CSIPersistentVolumeSource - (optional) CSI represents storage that is handled by an external CSI driver (Beta feature). fc FCVolumeSource - (optional) FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod. flexVolume FlexPersistentVolumeSource - (optional) FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. flocker FlockerVolumeSource - (optional) Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running gcePersistentDisk GCEPersistentDiskVolumeSource - (optional) GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info glusterfs GlusterfsPersistentVolumeSource - (optional) Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info hostPath HostPathVolumeSource - (optional) HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info iscsi ISCSIPersistentVolumeSource - (optional) ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. local LocalVolumeSource - (optional) Local represents directly-attached storage with node affinity mountOptions List[str] - (optional) A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info nfs NFSVolumeSource - (optional) NFS represents an NFS mount on the host. Provisioned by an admin. More info nodeAffinity VolumeNodeAffinity - (optional) NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume. persistentVolumeReclaimPolicy str - (optional) What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info photonPersistentDisk PhotonPersistentDiskVolumeSource - (optional) PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine portworxVolume PortworxVolumeSource - (optional) PortworxVolume represents a portworx volume attached and mounted on kubelets host machine quobyte QuobyteVolumeSource - (optional) Quobyte represents a Quobyte mount on the host that shares a pod's lifetime rbd RBDPersistentVolumeSource - (optional) RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info scaleIO ScaleIOPersistentVolumeSource - (optional) ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes. storageClassName str - (optional) Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass. storageos StorageOSPersistentVolumeSource - (optional) StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info volumeMode str - (optional) volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec. vsphereVolume VsphereVirtualDiskVolumeSource - (optional) VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine","title":"PersistentVolumeSpec"},{"location":"models/core_v1/#persistentvolumestatus","text":"class lightkube.models.core_v1. PersistentVolumeStatus ( message=None , phase=None , reason=None ) PersistentVolumeStatus is the current status of a persistent volume. parameters message str - (optional) A human-readable message indicating details about why the volume is in this state. phase str - (optional) Phase indicates if a volume is available, bound to a claim, or released by a claim. More info reason str - (optional) Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.","title":"PersistentVolumeStatus"},{"location":"models/core_v1/#photonpersistentdiskvolumesource","text":"class lightkube.models.core_v1. PhotonPersistentDiskVolumeSource ( pdID , fsType=None ) Represents a Photon Controller persistent disk resource. parameters pdID str - ID that identifies Photon Controller persistent disk fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.","title":"PhotonPersistentDiskVolumeSource"},{"location":"models/core_v1/#pod","text":"class lightkube.models.core_v1. Pod ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec PodSpec - (optional) Specification of the desired behavior of the pod. More info status PodStatus - (optional) Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info","title":"Pod"},{"location":"models/core_v1/#podaffinity","text":"class lightkube.models.core_v1. PodAffinity ( preferredDuringSchedulingIgnoredDuringExecution=None , requiredDuringSchedulingIgnoredDuringExecution=None ) Pod affinity is a group of inter pod affinity scheduling rules. parameters preferredDuringSchedulingIgnoredDuringExecution WeightedPodAffinityTerm - (optional) The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. requiredDuringSchedulingIgnoredDuringExecution PodAffinityTerm - (optional) If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","title":"PodAffinity"},{"location":"models/core_v1/#podaffinityterm","text":"class lightkube.models.core_v1. PodAffinityTerm ( topologyKey , labelSelector=None , namespaces=None ) Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key matches that of any node on which a pod of the set of pods is running parameters topologyKey str - This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed. labelSelector meta_v1.LabelSelector - (optional) A label query over a set of resources, in this case pods. namespaces List[str] - (optional) namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"","title":"PodAffinityTerm"},{"location":"models/core_v1/#podantiaffinity","text":"class lightkube.models.core_v1. PodAntiAffinity ( preferredDuringSchedulingIgnoredDuringExecution=None , requiredDuringSchedulingIgnoredDuringExecution=None ) Pod anti affinity is a group of inter pod anti affinity scheduling rules. parameters preferredDuringSchedulingIgnoredDuringExecution WeightedPodAffinityTerm - (optional) The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred. requiredDuringSchedulingIgnoredDuringExecution PodAffinityTerm - (optional) If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.","title":"PodAntiAffinity"},{"location":"models/core_v1/#podcondition","text":"class lightkube.models.core_v1. PodCondition ( status , type , lastProbeTime=None , lastTransitionTime=None , message=None , reason=None ) PodCondition contains details for the current condition of this pod. parameters status str - Status is the status of the condition. Can be True, False, Unknown. More info type str - Type is the type of the condition. More info lastProbeTime meta_v1.Time - (optional) Last time we probed the condition. lastTransitionTime meta_v1.Time - (optional) Last time the condition transitioned from one status to another. message str - (optional) Human-readable message indicating details about last transition. reason str - (optional) Unique, one-word, CamelCase reason for the condition's last transition.","title":"PodCondition"},{"location":"models/core_v1/#poddnsconfig","text":"class lightkube.models.core_v1. PodDNSConfig ( nameservers=None , options=None , searches=None ) PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy. parameters nameservers List[str] - (optional) A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed. options PodDNSConfigOption - (optional) A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy. searches List[str] - (optional) A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.","title":"PodDNSConfig"},{"location":"models/core_v1/#poddnsconfigoption","text":"class lightkube.models.core_v1. PodDNSConfigOption ( name=None , value=None ) PodDNSConfigOption defines DNS resolver options of a pod. parameters name str - (optional) Required. value str - (optional)","title":"PodDNSConfigOption"},{"location":"models/core_v1/#podip","text":"class lightkube.models.core_v1. PodIP ( ip=None ) IP address information for entries in the (plural) PodIPs field. Each entry includes: IP: An IP address allocated to the pod. Routable at least within the cluster. parameters ip str - (optional) ip is an IP address (IPv4 or IPv6) assigned to the pod","title":"PodIP"},{"location":"models/core_v1/#podlist","text":"class lightkube.models.core_v1. PodList ( items , apiVersion=None , kind=None , metadata=None ) PodList is a list of Pods. parameters items Pod - List of pods. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"PodList"},{"location":"models/core_v1/#podreadinessgate","text":"class lightkube.models.core_v1. PodReadinessGate ( conditionType ) PodReadinessGate contains the reference to a pod condition parameters conditionType str - ConditionType refers to a condition in the pod's condition list with matching type.","title":"PodReadinessGate"},{"location":"models/core_v1/#podsecuritycontext","text":"class lightkube.models.core_v1. PodSecurityContext ( fsGroup=None , fsGroupChangePolicy=None , runAsGroup=None , runAsNonRoot=None , runAsUser=None , seLinuxOptions=None , supplementalGroups=None , sysctls=None , windowsOptions=None ) PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext. Field values of container.securityContext take precedence over field values of PodSecurityContext. parameters fsGroup int - (optional) A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume. fsGroupChangePolicy str - (optional) fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified defaults to \"Always\". runAsGroup int - (optional) The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. runAsNonRoot bool - (optional) Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. runAsUser int - (optional) The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. seLinuxOptions SELinuxOptions - (optional) The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. supplementalGroups List[int] - (optional) A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container. sysctls Sysctl - (optional) Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. windowsOptions WindowsSecurityContextOptions - (optional) The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.","title":"PodSecurityContext"},{"location":"models/core_v1/#podspec","text":"class lightkube.models.core_v1. PodSpec ( containers , activeDeadlineSeconds=None , affinity=None , automountServiceAccountToken=None , dnsConfig=None , dnsPolicy=None , enableServiceLinks=None , ephemeralContainers=None , hostAliases=None , hostIPC=None , hostNetwork=None , hostPID=None , hostname=None , imagePullSecrets=None , initContainers=None , nodeName=None , nodeSelector=None , overhead=None , preemptionPolicy=None , priority=None , priorityClassName=None , readinessGates=None , restartPolicy=None , runtimeClassName=None , schedulerName=None , securityContext=None , serviceAccount=None , serviceAccountName=None , shareProcessNamespace=None , subdomain=None , terminationGracePeriodSeconds=None , tolerations=None , topologySpreadConstraints=None , volumes=None ) PodSpec is a description of a pod. parameters containers Container - List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. activeDeadlineSeconds int - (optional) Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer. affinity Affinity - (optional) If specified, the pod's scheduling constraints automountServiceAccountToken bool - (optional) AutomountServiceAccountToken indicates whether a service account token should be automatically mounted. dnsConfig PodDNSConfig - (optional) Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. dnsPolicy str - (optional) Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. enableServiceLinks bool - (optional) EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true. ephemeralContainers EphemeralContainer - (optional) List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature. hostAliases HostAlias - (optional) HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods. hostIPC bool - (optional) Use the host's ipc namespace. Optional: Default to false. hostNetwork bool - (optional) Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false. hostPID bool - (optional) Use the host's pid namespace. Optional: Default to false. hostname str - (optional) Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value. imagePullSecrets LocalObjectReference - (optional) ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info initContainers Container - (optional) List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info nodeName str - (optional) NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements. nodeSelector dict - (optional) NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info overhead dict - (optional) Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature. preemptionPolicy str - (optional) PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature. priority int - (optional) The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. priorityClassName str - (optional) If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. readinessGates PodReadinessGate - (optional) If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info restartPolicy str - (optional) Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info runtimeClassName str - (optional) RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod. If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info This is a beta feature as of Kubernetes v1.14. schedulerName str - (optional) If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler. securityContext PodSecurityContext - (optional) SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty. See type description for default values of each field. serviceAccount str - (optional) DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead. serviceAccountName str - (optional) ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info shareProcessNamespace bool - (optional) Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false. subdomain str - (optional) If specified, the fully qualified Pod hostname will be \" . . .svc. \". If not specified, the pod will not have a domainname at all. terminationGracePeriodSeconds int - (optional) Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds. tolerations Toleration - (optional) If specified, the pod's tolerations. topologySpreadConstraints TopologySpreadConstraint - (optional) TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. This field is only honored by clusters that enable the EvenPodsSpread feature. All topologySpreadConstraints are ANDed. volumes Volume - (optional) List of volumes that can be mounted by containers belonging to the pod. More info","title":"PodSpec"},{"location":"models/core_v1/#podstatus","text":"class lightkube.models.core_v1. PodStatus ( conditions=None , containerStatuses=None , ephemeralContainerStatuses=None , hostIP=None , initContainerStatuses=None , message=None , nominatedNodeName=None , phase=None , podIP=None , podIPs=None , qosClass=None , reason=None , startTime=None ) PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane. parameters conditions PodCondition - (optional) Current service state of pod. More info containerStatuses ContainerStatus - (optional) The list has one entry per container in the manifest. Each entry is currently the output of docker inspect . More info ephemeralContainerStatuses ContainerStatus - (optional) Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature. hostIP str - (optional) IP address of the host to which the pod is assigned. Empty if not yet scheduled. initContainerStatuses ContainerStatus - (optional) The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info message str - (optional) A human readable message indicating details about why the pod is in this condition. nominatedNodeName str - (optional) nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled. phase str - (optional) The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values: Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. More info podIP str - (optional) IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated. podIPs PodIP - (optional) podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet. qosClass str - (optional) The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info reason str - (optional) A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted' startTime meta_v1.Time - (optional) RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.","title":"PodStatus"},{"location":"models/core_v1/#podtemplate","text":"class lightkube.models.core_v1. PodTemplate ( apiVersion=None , kind=None , metadata=None , template=None ) PodTemplate describes a template for creating copies of a predefined pod. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info template PodTemplateSpec - (optional) Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status","title":"PodTemplate"},{"location":"models/core_v1/#podtemplatelist","text":"class lightkube.models.core_v1. PodTemplateList ( items , apiVersion=None , kind=None , metadata=None ) PodTemplateList is a list of PodTemplates. parameters items PodTemplate - List of pod templates apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"PodTemplateList"},{"location":"models/core_v1/#podtemplatespec","text":"class lightkube.models.core_v1. PodTemplateSpec ( metadata=None , spec=None ) PodTemplateSpec describes the data a pod should have when created from a template parameters metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec PodSpec - (optional) Specification of the desired behavior of the pod. More info","title":"PodTemplateSpec"},{"location":"models/core_v1/#portworxvolumesource","text":"class lightkube.models.core_v1. PortworxVolumeSource ( volumeID , fsType=None , readOnly=None ) PortworxVolumeSource represents a Portworx volume resource. parameters volumeID str - VolumeID uniquely identifies a Portworx volume fsType str - (optional) FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified. readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.","title":"PortworxVolumeSource"},{"location":"models/core_v1/#preferredschedulingterm","text":"class lightkube.models.core_v1. PreferredSchedulingTerm ( preference , weight ) An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op). parameters preference NodeSelectorTerm - A node selector term, associated with the corresponding weight. weight int - Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.","title":"PreferredSchedulingTerm"},{"location":"models/core_v1/#probe","text":"class lightkube.models.core_v1. Probe ( exec=None , failureThreshold=None , httpGet=None , initialDelaySeconds=None , periodSeconds=None , successThreshold=None , tcpSocket=None , timeoutSeconds=None ) Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic. parameters exec ExecAction - (optional) One and only one of the following should be specified. Exec specifies the action to take. failureThreshold int - (optional) Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. httpGet HTTPGetAction - (optional) HTTPGet specifies the http request to perform. initialDelaySeconds int - (optional) Number of seconds after the container has started before liveness probes are initiated. More info periodSeconds int - (optional) How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. successThreshold int - (optional) Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1. tcpSocket TCPSocketAction - (optional) TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported timeoutSeconds int - (optional) Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info","title":"Probe"},{"location":"models/core_v1/#projectedvolumesource","text":"class lightkube.models.core_v1. ProjectedVolumeSource ( sources , defaultMode=None ) Represents a projected volume source parameters sources VolumeProjection - list of volume projections defaultMode int - (optional) Mode bits to use on created files by default. Must be a value between 0 and Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.","title":"ProjectedVolumeSource"},{"location":"models/core_v1/#quobytevolumesource","text":"class lightkube.models.core_v1. QuobyteVolumeSource ( registry , volume , group=None , readOnly=None , tenant=None , user=None ) Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling. parameters registry str - Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes volume str - Volume is a string that references an already created Quobyte volume by name. group str - (optional) Group to map volume access to Default is no group readOnly bool - (optional) ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false. tenant str - (optional) Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin user str - (optional) User to map volume access to Defaults to serivceaccount user","title":"QuobyteVolumeSource"},{"location":"models/core_v1/#rbdpersistentvolumesource","text":"class lightkube.models.core_v1. RBDPersistentVolumeSource ( image , monitors , fsType=None , keyring=None , pool=None , readOnly=None , secretRef=None , user=None ) Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling. parameters image str - The rados image name. More info monitors List[str] - A collection of Ceph monitors. More info fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info keyring str - (optional) Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info pool str - (optional) The rados pool name. Default is rbd. More info readOnly bool - (optional) ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info secretRef SecretReference - (optional) SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info user str - (optional) The rados user name. Default is admin. More info","title":"RBDPersistentVolumeSource"},{"location":"models/core_v1/#rbdvolumesource","text":"class lightkube.models.core_v1. RBDVolumeSource ( image , monitors , fsType=None , keyring=None , pool=None , readOnly=None , secretRef=None , user=None ) Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling. parameters image str - The rados image name. More info monitors List[str] - A collection of Ceph monitors. More info fsType str - (optional) Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info keyring str - (optional) Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info pool str - (optional) The rados pool name. Default is rbd. More info readOnly bool - (optional) ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info secretRef LocalObjectReference - (optional) SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info user str - (optional) The rados user name. Default is admin. More info","title":"RBDVolumeSource"},{"location":"models/core_v1/#replicationcontroller","text":"class lightkube.models.core_v1. ReplicationController ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) ReplicationController represents the configuration of a replication controller. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) If the Labels of a ReplicationController are empty, they are defaulted to be the same as the Pod(s) that the replication controller manages. Standard object's metadata. More info spec ReplicationControllerSpec - (optional) Spec defines the specification of the desired behavior of the replication controller. More info status ReplicationControllerStatus - (optional) Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info","title":"ReplicationController"},{"location":"models/core_v1/#replicationcontrollercondition","text":"class lightkube.models.core_v1. ReplicationControllerCondition ( status , type , lastTransitionTime=None , message=None , reason=None ) ReplicationControllerCondition describes the state of a replication controller at a certain point. parameters status str - Status of the condition, one of True, False, Unknown. type str - Type of replication controller condition. lastTransitionTime meta_v1.Time - (optional) The last time the condition transitioned from one status to another. message str - (optional) A human readable message indicating details about the transition. reason str - (optional) The reason for the condition's last transition.","title":"ReplicationControllerCondition"},{"location":"models/core_v1/#replicationcontrollerlist","text":"class lightkube.models.core_v1. ReplicationControllerList ( items , apiVersion=None , kind=None , metadata=None ) ReplicationControllerList is a collection of replication controllers. parameters items ReplicationController - List of replication controllers. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"ReplicationControllerList"},{"location":"models/core_v1/#replicationcontrollerspec","text":"class lightkube.models.core_v1. ReplicationControllerSpec ( minReadySeconds=None , replicas=None , selector=None , template=None ) ReplicationControllerSpec is the specification of a replication controller. parameters minReadySeconds int - (optional) Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) replicas int - (optional) Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info selector dict - (optional) Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info template PodTemplateSpec - (optional) Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info","title":"ReplicationControllerSpec"},{"location":"models/core_v1/#replicationcontrollerstatus","text":"class lightkube.models.core_v1. ReplicationControllerStatus ( replicas , availableReplicas=None , conditions=None , fullyLabeledReplicas=None , observedGeneration=None , readyReplicas=None ) ReplicationControllerStatus represents the current status of a replication controller. parameters replicas int - Replicas is the most recently oberved number of replicas. More info availableReplicas int - (optional) The number of available replicas (ready for at least minReadySeconds) for this replication controller. conditions ReplicationControllerCondition - (optional) Represents the latest available observations of a replication controller's current state. fullyLabeledReplicas int - (optional) The number of pods that have labels matching the labels of the pod template of the replication controller. observedGeneration int - (optional) ObservedGeneration reflects the generation of the most recently observed replication controller. readyReplicas int - (optional) The number of ready replicas for this replication controller.","title":"ReplicationControllerStatus"},{"location":"models/core_v1/#resourcefieldselector","text":"class lightkube.models.core_v1. ResourceFieldSelector ( resource , containerName=None , divisor=None ) ResourceFieldSelector represents container resources (cpu, memory) and their output format parameters resource str - Required: resource to select containerName str - (optional) Container name: required for volumes, optional for env vars divisor resource.Quantity - (optional) Specifies the output format of the exposed resources, defaults to \"1\"","title":"ResourceFieldSelector"},{"location":"models/core_v1/#resourcequota","text":"class lightkube.models.core_v1. ResourceQuota ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) ResourceQuota sets aggregate quota restrictions enforced per namespace parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec ResourceQuotaSpec - (optional) Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status status ResourceQuotaStatus - (optional) Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status","title":"ResourceQuota"},{"location":"models/core_v1/#resourcequotalist","text":"class lightkube.models.core_v1. ResourceQuotaList ( items , apiVersion=None , kind=None , metadata=None ) ResourceQuotaList is a list of ResourceQuota items. parameters items ResourceQuota - Items is a list of ResourceQuota objects. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"ResourceQuotaList"},{"location":"models/core_v1/#resourcequotaspec","text":"class lightkube.models.core_v1. ResourceQuotaSpec ( hard=None , scopeSelector=None , scopes=None ) ResourceQuotaSpec defines the desired hard limits to enforce for Quota. parameters hard dict - (optional) hard is the set of desired hard limits for each named resource. More info scopeSelector ScopeSelector - (optional) scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched. scopes List[str] - (optional) A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.","title":"ResourceQuotaSpec"},{"location":"models/core_v1/#resourcequotastatus","text":"class lightkube.models.core_v1. ResourceQuotaStatus ( hard=None , used=None ) ResourceQuotaStatus defines the enforced hard limits and observed use. parameters hard dict - (optional) Hard is the set of enforced hard limits for each named resource. More info used dict - (optional) Used is the current observed total usage of the resource in the namespace.","title":"ResourceQuotaStatus"},{"location":"models/core_v1/#resourcerequirements","text":"class lightkube.models.core_v1. ResourceRequirements ( limits=None , requests=None ) ResourceRequirements describes the compute resource requirements. parameters limits dict - (optional) Limits describes the maximum amount of compute resources allowed. More info requests dict - (optional) Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info","title":"ResourceRequirements"},{"location":"models/core_v1/#selinuxoptions","text":"class lightkube.models.core_v1. SELinuxOptions ( level=None , role=None , type=None , user=None ) SELinuxOptions are the labels to be applied to the container parameters level str - (optional) Level is SELinux level label that applies to the container. role str - (optional) Role is a SELinux role label that applies to the container. type str - (optional) Type is a SELinux type label that applies to the container. user str - (optional) User is a SELinux user label that applies to the container.","title":"SELinuxOptions"},{"location":"models/core_v1/#scaleiopersistentvolumesource","text":"class lightkube.models.core_v1. ScaleIOPersistentVolumeSource ( gateway , secretRef , system , fsType=None , protectionDomain=None , readOnly=None , sslEnabled=None , storageMode=None , storagePool=None , volumeName=None ) ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume parameters gateway str - The host address of the ScaleIO API Gateway. secretRef SecretReference - SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail. system str - The name of the storage system as configured in ScaleIO. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\" protectionDomain str - (optional) The name of the ScaleIO Protection Domain for the configured storage. readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. sslEnabled bool - (optional) Flag to enable/disable SSL communication with Gateway, default false storageMode str - (optional) Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned. storagePool str - (optional) The ScaleIO Storage Pool associated with the protection domain. volumeName str - (optional) The name of a volume already created in the ScaleIO system that is associated with this volume source.","title":"ScaleIOPersistentVolumeSource"},{"location":"models/core_v1/#scaleiovolumesource","text":"class lightkube.models.core_v1. ScaleIOVolumeSource ( gateway , secretRef , system , fsType=None , protectionDomain=None , readOnly=None , sslEnabled=None , storageMode=None , storagePool=None , volumeName=None ) ScaleIOVolumeSource represents a persistent ScaleIO volume parameters gateway str - The host address of the ScaleIO API Gateway. secretRef LocalObjectReference - SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail. system str - The name of the storage system as configured in ScaleIO. fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\". protectionDomain str - (optional) The name of the ScaleIO Protection Domain for the configured storage. readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. sslEnabled bool - (optional) Flag to enable/disable SSL communication with Gateway, default false storageMode str - (optional) Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned. storagePool str - (optional) The ScaleIO Storage Pool associated with the protection domain. volumeName str - (optional) The name of a volume already created in the ScaleIO system that is associated with this volume source.","title":"ScaleIOVolumeSource"},{"location":"models/core_v1/#scopeselector","text":"class lightkube.models.core_v1. ScopeSelector ( matchExpressions=None ) A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements. parameters matchExpressions ScopedResourceSelectorRequirement - (optional) A list of scope selector requirements by scope of the resources.","title":"ScopeSelector"},{"location":"models/core_v1/#scopedresourceselectorrequirement","text":"class lightkube.models.core_v1. ScopedResourceSelectorRequirement ( operator , scopeName , values=None ) A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values. parameters operator str - Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. scopeName str - The name of the scope that the selector applies to. values List[str] - (optional) An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","title":"ScopedResourceSelectorRequirement"},{"location":"models/core_v1/#secret","text":"class lightkube.models.core_v1. Secret ( apiVersion=None , data=None , immutable=None , kind=None , metadata=None , stringData=None , type=None ) Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info data dict - (optional) Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4 immutable bool - (optional) Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is an alpha field enabled by ImmutableEphemeralVolumes feature gate. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info stringData dict - (optional) stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API. type str - (optional) Used to facilitate programmatic handling of secret data.","title":"Secret"},{"location":"models/core_v1/#secretenvsource","text":"class lightkube.models.core_v1. SecretEnvSource ( name=None , optional=None ) SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables. parameters name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the Secret must be defined","title":"SecretEnvSource"},{"location":"models/core_v1/#secretkeyselector","text":"class lightkube.models.core_v1. SecretKeySelector ( key , name=None , optional=None ) SecretKeySelector selects a key of a Secret. parameters key str - The key of the secret to select from. Must be a valid secret key. name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the Secret or its key must be defined","title":"SecretKeySelector"},{"location":"models/core_v1/#secretlist","text":"class lightkube.models.core_v1. SecretList ( items , apiVersion=None , kind=None , metadata=None ) SecretList is a list of Secret. parameters items Secret - Items is a list of secret objects. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"SecretList"},{"location":"models/core_v1/#secretprojection","text":"class lightkube.models.core_v1. SecretProjection ( items=None , name=None , optional=None ) Adapts a secret into a projected volume. The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode. parameters items KeyToPath - (optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. name str - (optional) Name of the referent. More info optional bool - (optional) Specify whether the Secret or its key must be defined","title":"SecretProjection"},{"location":"models/core_v1/#secretreference","text":"class lightkube.models.core_v1. SecretReference ( name=None , namespace=None ) SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace parameters name str - (optional) Name is unique within a namespace to reference a secret resource. namespace str - (optional) Namespace defines the space within which the secret name must be unique.","title":"SecretReference"},{"location":"models/core_v1/#secretvolumesource","text":"class lightkube.models.core_v1. SecretVolumeSource ( defaultMode=None , items=None , optional=None , secretName=None ) Adapts a Secret into a volume. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling. parameters defaultMode int - (optional) Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. items KeyToPath - (optional) If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'. optional bool - (optional) Specify whether the Secret or its keys must be defined secretName str - (optional) Name of the secret in the pod's namespace to use. More info","title":"SecretVolumeSource"},{"location":"models/core_v1/#securitycontext","text":"class lightkube.models.core_v1. SecurityContext ( allowPrivilegeEscalation=None , capabilities=None , privileged=None , procMount=None , readOnlyRootFilesystem=None , runAsGroup=None , runAsNonRoot=None , runAsUser=None , seLinuxOptions=None , windowsOptions=None ) SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext. When both are set, the values in SecurityContext take precedence. parameters allowPrivilegeEscalation bool - (optional) AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN capabilities Capabilities - (optional) The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. privileged bool - (optional) Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. procMount str - (optional) procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. readOnlyRootFilesystem bool - (optional) Whether this container has a read-only root filesystem. Default is false. runAsGroup int - (optional) The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. runAsNonRoot bool - (optional) Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. runAsUser int - (optional) The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. seLinuxOptions SELinuxOptions - (optional) The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. windowsOptions WindowsSecurityContextOptions - (optional) The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.","title":"SecurityContext"},{"location":"models/core_v1/#service","text":"class lightkube.models.core_v1. Service ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec ServiceSpec - (optional) Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status status ServiceStatus - (optional) Most recently observed status of the service. Populated by the system. Read-only. More info","title":"Service"},{"location":"models/core_v1/#serviceaccount","text":"class lightkube.models.core_v1. ServiceAccount ( apiVersion=None , automountServiceAccountToken=None , imagePullSecrets=None , kind=None , metadata=None , secrets=None ) ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info automountServiceAccountToken bool - (optional) AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level. imagePullSecrets LocalObjectReference - (optional) ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info secrets ObjectReference - (optional) Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info","title":"ServiceAccount"},{"location":"models/core_v1/#serviceaccountlist","text":"class lightkube.models.core_v1. ServiceAccountList ( items , apiVersion=None , kind=None , metadata=None ) ServiceAccountList is a list of ServiceAccount objects parameters items ServiceAccount - List of ServiceAccounts. More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"ServiceAccountList"},{"location":"models/core_v1/#serviceaccounttokenprojection","text":"class lightkube.models.core_v1. ServiceAccountTokenProjection ( path , audience=None , expirationSeconds=None ) ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise). parameters path str - Path is the path relative to the mount point of the file to project the token into. audience str - (optional) Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver. expirationSeconds int - (optional) ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.","title":"ServiceAccountTokenProjection"},{"location":"models/core_v1/#servicelist","text":"class lightkube.models.core_v1. ServiceList ( items , apiVersion=None , kind=None , metadata=None ) ServiceList holds a list of services. parameters items Service - List of services apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"ServiceList"},{"location":"models/core_v1/#serviceport","text":"class lightkube.models.core_v1. ServicePort ( port , appProtocol=None , name=None , nodePort=None , protocol=None , targetPort=None ) ServicePort contains information on service's port. parameters port int - The port that will be exposed by this service. appProtocol str - (optional) The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names ). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate. name str - (optional) The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service. nodePort int - (optional) The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info protocol str - (optional) The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP. targetPort util_intstr.IntOrString - (optional) Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info","title":"ServicePort"},{"location":"models/core_v1/#servicespec","text":"class lightkube.models.core_v1. ServiceSpec ( clusterIP=None , externalIPs=None , externalName=None , externalTrafficPolicy=None , healthCheckNodePort=None , ipFamily=None , loadBalancerIP=None , loadBalancerSourceRanges=None , ports=None , publishNotReadyAddresses=None , selector=None , sessionAffinity=None , sessionAffinityConfig=None , topologyKeys=None , type=None ) ServiceSpec describes the attributes that a user creates on a service. parameters clusterIP str - (optional) clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info externalIPs List[str] - (optional) externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system. externalName str - (optional) externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname ( https://tools.ietf.org/html/rfc1123 ) and requires Type to be ExternalName. externalTrafficPolicy str - (optional) externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading. healthCheckNodePort int - (optional) healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local. ipFamily str - (optional) ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6). If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster. If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family. Endpoints for this Service will be of this family. This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment. loadBalancerIP str - (optional) Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. loadBalancerSourceRanges List[str] - (optional) If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info ports ServicePort - (optional) The list of ports that are exposed by this service. More info publishNotReadyAddresses bool - (optional) publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery. selector dict - (optional) Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info sessionAffinity str - (optional) Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info sessionAffinityConfig SessionAffinityConfig - (optional) sessionAffinityConfig contains the configurations of session affinity. topologyKeys List[str] - (optional) topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. type str - (optional) type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info","title":"ServiceSpec"},{"location":"models/core_v1/#servicestatus","text":"class lightkube.models.core_v1. ServiceStatus ( loadBalancer=None ) ServiceStatus represents the current status of a service. parameters loadBalancer LoadBalancerStatus - (optional) LoadBalancer contains the current status of the load-balancer, if one is present.","title":"ServiceStatus"},{"location":"models/core_v1/#sessionaffinityconfig","text":"class lightkube.models.core_v1. SessionAffinityConfig ( clientIP=None ) SessionAffinityConfig represents the configurations of session affinity. parameters clientIP ClientIPConfig - (optional) clientIP contains the configurations of Client IP based session affinity.","title":"SessionAffinityConfig"},{"location":"models/core_v1/#storageospersistentvolumesource","text":"class lightkube.models.core_v1. StorageOSPersistentVolumeSource ( fsType=None , readOnly=None , secretRef=None , volumeName=None , volumeNamespace=None ) Represents a StorageOS persistent volume resource. parameters fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. secretRef ObjectReference - (optional) SecretRef specifies the secret to use for obtaining the StorageOS API credentials. If not specified, default values will be attempted. volumeName str - (optional) VolumeName is the human-readable name of the StorageOS volume. Volume names are only unique within a namespace. volumeNamespace str - (optional) VolumeNamespace specifies the scope of the volume within StorageOS. If no namespace is specified then the Pod's namespace will be used. This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.","title":"StorageOSPersistentVolumeSource"},{"location":"models/core_v1/#storageosvolumesource","text":"class lightkube.models.core_v1. StorageOSVolumeSource ( fsType=None , readOnly=None , secretRef=None , volumeName=None , volumeNamespace=None ) Represents a StorageOS persistent volume resource. parameters fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. readOnly bool - (optional) Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. secretRef LocalObjectReference - (optional) SecretRef specifies the secret to use for obtaining the StorageOS API credentials. If not specified, default values will be attempted. volumeName str - (optional) VolumeName is the human-readable name of the StorageOS volume. Volume names are only unique within a namespace. volumeNamespace str - (optional) VolumeNamespace specifies the scope of the volume within StorageOS. If no namespace is specified then the Pod's namespace will be used. This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.","title":"StorageOSVolumeSource"},{"location":"models/core_v1/#sysctl","text":"class lightkube.models.core_v1. Sysctl ( name , value ) Sysctl defines a kernel parameter to be set parameters name str - Name of a property to set value str - Value of a property to set","title":"Sysctl"},{"location":"models/core_v1/#tcpsocketaction","text":"class lightkube.models.core_v1. TCPSocketAction ( port , host=None ) TCPSocketAction describes an action based on opening a socket parameters port util_intstr.IntOrString - Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. host str - (optional) Optional: Host name to connect to, defaults to the pod IP.","title":"TCPSocketAction"},{"location":"models/core_v1/#taint","text":"class lightkube.models.core_v1. Taint ( effect , key , timeAdded=None , value=None ) The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint. parameters effect str - Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute. key str - Required. The taint key to be applied to a node. timeAdded meta_v1.Time - (optional) TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints. value str - (optional) The taint value corresponding to the taint key.","title":"Taint"},{"location":"models/core_v1/#toleration","text":"class lightkube.models.core_v1. Toleration ( effect=None , key=None , operator=None , tolerationSeconds=None , value=None ) The pod this Toleration is attached to tolerates any taint that matches the triple using the matching operator . parameters effect str - (optional) Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute. key str - (optional) Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys. operator str - (optional) Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category. tolerationSeconds int - (optional) TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system. value str - (optional) Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.","title":"Toleration"},{"location":"models/core_v1/#topologyselectorlabelrequirement","text":"class lightkube.models.core_v1. TopologySelectorLabelRequirement ( key , values ) A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future. parameters key str - The label key that the selector applies to. values List[str] - An array of string values. One value must match the label to be selected. Each entry in Values is ORed.","title":"TopologySelectorLabelRequirement"},{"location":"models/core_v1/#topologyselectorterm","text":"class lightkube.models.core_v1. TopologySelectorTerm ( matchLabelExpressions=None ) A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future. parameters matchLabelExpressions TopologySelectorLabelRequirement - (optional) A list of topology selector requirements by labels.","title":"TopologySelectorTerm"},{"location":"models/core_v1/#topologyspreadconstraint","text":"class lightkube.models.core_v1. TopologySpreadConstraint ( maxSkew , topologyKey , whenUnsatisfiable , labelSelector=None ) TopologySpreadConstraint specifies how to spread matching pods among the given topology. parameters maxSkew int - MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | | P | P | | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed. topologyKey str - TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field. whenUnsatisfiable str - WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as \"Unsatisfiable\" if and only if placing incoming pod on any topology violates \"MaxSkew\". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P | P | P | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it more imbalanced. It's a required field. labelSelector meta_v1.LabelSelector - (optional) LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.","title":"TopologySpreadConstraint"},{"location":"models/core_v1/#typedlocalobjectreference","text":"class lightkube.models.core_v1. TypedLocalObjectReference ( kind , name , apiGroup=None ) TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace. parameters kind str - Kind is the type of resource being referenced name str - Name is the name of resource being referenced apiGroup str - (optional) APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.","title":"TypedLocalObjectReference"},{"location":"models/core_v1/#volume","text":"class lightkube.models.core_v1. Volume ( name , awsElasticBlockStore=None , azureDisk=None , azureFile=None , cephfs=None , cinder=None , configMap=None , csi=None , downwardAPI=None , emptyDir=None , fc=None , flexVolume=None , flocker=None , gcePersistentDisk=None , gitRepo=None , glusterfs=None , hostPath=None , iscsi=None , nfs=None , persistentVolumeClaim=None , photonPersistentDisk=None , portworxVolume=None , projected=None , quobyte=None , rbd=None , scaleIO=None , secret=None , storageos=None , vsphereVolume=None ) Volume represents a named volume in a pod that may be accessed by any container in the pod. parameters name str - Volume's name. Must be a DNS_LABEL and unique within the pod. More info awsElasticBlockStore AWSElasticBlockStoreVolumeSource - (optional) AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info azureDisk AzureDiskVolumeSource - (optional) AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. azureFile AzureFileVolumeSource - (optional) AzureFile represents an Azure File Service mount on the host and bind mount to the pod. cephfs CephFSVolumeSource - (optional) CephFS represents a Ceph FS mount on the host that shares a pod's lifetime cinder CinderVolumeSource - (optional) Cinder represents a cinder volume attached and mounted on kubelets host machine. More info configMap ConfigMapVolumeSource - (optional) ConfigMap represents a configMap that should populate this volume csi CSIVolumeSource - (optional) CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature). downwardAPI DownwardAPIVolumeSource - (optional) DownwardAPI represents downward API about the pod that should populate this volume emptyDir EmptyDirVolumeSource - (optional) EmptyDir represents a temporary directory that shares a pod's lifetime. More info fc FCVolumeSource - (optional) FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod. flexVolume FlexVolumeSource - (optional) FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. flocker FlockerVolumeSource - (optional) Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running gcePersistentDisk GCEPersistentDiskVolumeSource - (optional) GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info gitRepo GitRepoVolumeSource - (optional) GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container. glusterfs GlusterfsVolumeSource - (optional) Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info hostPath HostPathVolumeSource - (optional) HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info iscsi ISCSIVolumeSource - (optional) ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info nfs NFSVolumeSource - (optional) NFS represents an NFS mount on the host that shares a pod's lifetime More info persistentVolumeClaim PersistentVolumeClaimVolumeSource - (optional) PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info photonPersistentDisk PhotonPersistentDiskVolumeSource - (optional) PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine portworxVolume PortworxVolumeSource - (optional) PortworxVolume represents a portworx volume attached and mounted on kubelets host machine projected ProjectedVolumeSource - (optional) Items for all in one resources secrets, configmaps, and downward API quobyte QuobyteVolumeSource - (optional) Quobyte represents a Quobyte mount on the host that shares a pod's lifetime rbd RBDVolumeSource - (optional) RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info scaleIO ScaleIOVolumeSource - (optional) ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes. secret SecretVolumeSource - (optional) Secret represents a secret that should populate this volume. More info storageos StorageOSVolumeSource - (optional) StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes. vsphereVolume VsphereVirtualDiskVolumeSource - (optional) VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine","title":"Volume"},{"location":"models/core_v1/#volumedevice","text":"class lightkube.models.core_v1. VolumeDevice ( devicePath , name ) volumeDevice describes a mapping of a raw block device within a container. parameters devicePath str - devicePath is the path inside of the container that the device will be mapped to. name str - name must match the name of a persistentVolumeClaim in the pod","title":"VolumeDevice"},{"location":"models/core_v1/#volumemount","text":"class lightkube.models.core_v1. VolumeMount ( mountPath , name , mountPropagation=None , readOnly=None , subPath=None , subPathExpr=None ) VolumeMount describes a mounting of a Volume within a container. parameters mountPath str - Path within the container at which the volume should be mounted. Must not contain ':'. name str - This must match the Name of a Volume. mountPropagation str - (optional) mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. readOnly bool - (optional) Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false. subPath str - (optional) Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root). subPathExpr str - (optional) Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.","title":"VolumeMount"},{"location":"models/core_v1/#volumenodeaffinity","text":"class lightkube.models.core_v1. VolumeNodeAffinity ( required=None ) VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from. parameters required NodeSelector - (optional) Required specifies hard node constraints that must be met.","title":"VolumeNodeAffinity"},{"location":"models/core_v1/#volumeprojection","text":"class lightkube.models.core_v1. VolumeProjection ( configMap=None , downwardAPI=None , secret=None , serviceAccountToken=None ) Projection that may be projected along with other supported volume types parameters configMap ConfigMapProjection - (optional) information about the configMap data to project downwardAPI DownwardAPIProjection - (optional) information about the downwardAPI data to project secret SecretProjection - (optional) information about the secret data to project serviceAccountToken ServiceAccountTokenProjection - (optional) information about the serviceAccountToken data to project","title":"VolumeProjection"},{"location":"models/core_v1/#vspherevirtualdiskvolumesource","text":"class lightkube.models.core_v1. VsphereVirtualDiskVolumeSource ( volumePath , fsType=None , storagePolicyID=None , storagePolicyName=None ) Represents a vSphere volume resource. parameters volumePath str - Path that identifies vSphere volume vmdk fsType str - (optional) Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. storagePolicyID str - (optional) Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName. storagePolicyName str - (optional) Storage Policy Based Management (SPBM) profile name.","title":"VsphereVirtualDiskVolumeSource"},{"location":"models/core_v1/#weightedpodaffinityterm","text":"class lightkube.models.core_v1. WeightedPodAffinityTerm ( podAffinityTerm , weight ) The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s) parameters podAffinityTerm PodAffinityTerm - Required. A pod affinity term, associated with the corresponding weight. weight int - weight associated with matching the corresponding podAffinityTerm, in the range 1-100.","title":"WeightedPodAffinityTerm"},{"location":"models/core_v1/#windowssecuritycontextoptions","text":"class lightkube.models.core_v1. WindowsSecurityContextOptions ( gmsaCredentialSpec=None , gmsaCredentialSpecName=None , runAsUserName=None ) WindowsSecurityContextOptions contain Windows-specific options and credentials. parameters gmsaCredentialSpec str - (optional) GMSACredentialSpec is where the GMSA admission webhook ( https://github.com/kubernetes-sigs/windows-gmsa ) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. gmsaCredentialSpecName str - (optional) GMSACredentialSpecName is the name of the GMSA credential spec to use. runAsUserName str - (optional) The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.","title":"WindowsSecurityContextOptions"},{"location":"models/discovery_v1beta1/","text":"discovery_v1beta1 Endpoint class lightkube.models.discovery_v1beta1. Endpoint ( addresses , conditions=None , hostname=None , targetRef=None , topology=None ) Endpoint represents a single logical \"backend\" implementing a service. parameters addresses List[str] - addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. conditions EndpointConditions - (optional) conditions contains information about the current status of the endpoint. hostname str - (optional) hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must pass DNS Label (RFC 1123) validation. targetRef core_v1.ObjectReference - (optional) targetRef is a reference to a Kubernetes object that represents this endpoint. topology dict - (optional) topology contains arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.io/hostname: the value indicates the hostname of the node where the endpoint is located. This should match the corresponding node label. topology.kubernetes.io/zone: the value indicates the zone where the endpoint is located. This should match the corresponding node label. topology.kubernetes.io/region: the value indicates the region where the endpoint is located. This should match the corresponding node label. EndpointConditions class lightkube.models.discovery_v1beta1. EndpointConditions ( ready=None ) EndpointConditions represents the current condition of an endpoint. parameters ready bool - (optional) ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. EndpointPort class lightkube.models.discovery_v1beta1. EndpointPort ( appProtocol=None , name=None , port=None , protocol=None ) EndpointPort represents a Port used by an EndpointSlice parameters appProtocol str - (optional) The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names ). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. name str - (optional) The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string. port int - (optional) The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer. protocol str - (optional) The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP. EndpointSlice class lightkube.models.discovery_v1beta1. EndpointSlice ( addressType , endpoints , apiVersion=None , kind=None , metadata=None , ports=None ) EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints. parameters addressType str - addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name. endpoints Endpoint - endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. ports EndpointPort - (optional) ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates \"all ports\". Each slice may include a maximum of 100 ports. EndpointSliceList class lightkube.models.discovery_v1beta1. EndpointSliceList ( items , apiVersion=None , kind=None , metadata=None ) EndpointSliceList represents a list of endpoint slices parameters items EndpointSlice - List of endpoint slices apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata.","title":"discovery_v1beta1"},{"location":"models/discovery_v1beta1/#discovery_v1beta1","text":"","title":"discovery_v1beta1"},{"location":"models/discovery_v1beta1/#endpoint","text":"class lightkube.models.discovery_v1beta1. Endpoint ( addresses , conditions=None , hostname=None , targetRef=None , topology=None ) Endpoint represents a single logical \"backend\" implementing a service. parameters addresses List[str] - addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100. conditions EndpointConditions - (optional) conditions contains information about the current status of the endpoint. hostname str - (optional) hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must pass DNS Label (RFC 1123) validation. targetRef core_v1.ObjectReference - (optional) targetRef is a reference to a Kubernetes object that represents this endpoint. topology dict - (optional) topology contains arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.io/hostname: the value indicates the hostname of the node where the endpoint is located. This should match the corresponding node label. topology.kubernetes.io/zone: the value indicates the zone where the endpoint is located. This should match the corresponding node label. topology.kubernetes.io/region: the value indicates the region where the endpoint is located. This should match the corresponding node label.","title":"Endpoint"},{"location":"models/discovery_v1beta1/#endpointconditions","text":"class lightkube.models.discovery_v1beta1. EndpointConditions ( ready=None ) EndpointConditions represents the current condition of an endpoint. parameters ready bool - (optional) ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready.","title":"EndpointConditions"},{"location":"models/discovery_v1beta1/#endpointport","text":"class lightkube.models.discovery_v1beta1. EndpointPort ( appProtocol=None , name=None , port=None , protocol=None ) EndpointPort represents a Port used by an EndpointSlice parameters appProtocol str - (optional) The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names ). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. name str - (optional) The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string. port int - (optional) The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer. protocol str - (optional) The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.","title":"EndpointPort"},{"location":"models/discovery_v1beta1/#endpointslice","text":"class lightkube.models.discovery_v1beta1. EndpointSlice ( addressType , endpoints , apiVersion=None , kind=None , metadata=None , ports=None ) EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints. parameters addressType str - addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name. endpoints Endpoint - endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. ports EndpointPort - (optional) ports specifies the list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates \"all ports\". Each slice may include a maximum of 100 ports.","title":"EndpointSlice"},{"location":"models/discovery_v1beta1/#endpointslicelist","text":"class lightkube.models.discovery_v1beta1. EndpointSliceList ( items , apiVersion=None , kind=None , metadata=None ) EndpointSliceList represents a list of endpoint slices parameters items EndpointSlice - List of endpoint slices apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata.","title":"EndpointSliceList"},{"location":"models/events_v1beta1/","text":"events_v1beta1 Event class lightkube.models.events_v1beta1. Event ( eventTime , action=None , apiVersion=None , deprecatedCount=None , deprecatedFirstTimestamp=None , deprecatedLastTimestamp=None , deprecatedSource=None , kind=None , metadata=None , note=None , reason=None , regarding=None , related=None , reportingController=None , reportingInstance=None , series=None , type=None ) Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. parameters eventTime meta_v1.MicroTime - Required. Time when this Event was first observed. action str - (optional) What action was taken/failed regarding to the regarding object. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info deprecatedCount int - (optional) Deprecated field assuring backward compatibility with core.v1 Event type deprecatedFirstTimestamp meta_v1.Time - (optional) Deprecated field assuring backward compatibility with core.v1 Event type deprecatedLastTimestamp meta_v1.Time - (optional) Deprecated field assuring backward compatibility with core.v1 Event type deprecatedSource core_v1.EventSource - (optional) Deprecated field assuring backward compatibility with core.v1 Event type kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) note str - (optional) Optional. A human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB. reason str - (optional) Why the action was taken. regarding core_v1.ObjectReference - (optional) The object this Event is about. In most cases it's an Object reporting controller implements. E.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object. related core_v1.ObjectReference - (optional) Optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object. reportingController str - (optional) Name of the controller that emitted this Event, e.g. kubernetes.io/kubelet . reportingInstance str - (optional) ID of the controller instance, e.g. kubelet-xyzf . series EventSeries - (optional) Data about the Event series this event represents or nil if it's a singleton Event. type str - (optional) Type of this event (Normal, Warning), new types could be added in the future. EventList class lightkube.models.events_v1beta1. EventList ( items , apiVersion=None , kind=None , metadata=None ) EventList is a list of Event objects. parameters items Event - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info EventSeries class lightkube.models.events_v1beta1. EventSeries ( count , lastObservedTime , state ) EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. parameters count int - Number of occurrences in this series up to the last heartbeat time lastObservedTime meta_v1.MicroTime - Time when last Event from the series was seen before last heartbeat. state str - Information whether this series is ongoing or finished. Deprecated. Planned removal for 1.18","title":"events_v1beta1"},{"location":"models/events_v1beta1/#events_v1beta1","text":"","title":"events_v1beta1"},{"location":"models/events_v1beta1/#event","text":"class lightkube.models.events_v1beta1. Event ( eventTime , action=None , apiVersion=None , deprecatedCount=None , deprecatedFirstTimestamp=None , deprecatedLastTimestamp=None , deprecatedSource=None , kind=None , metadata=None , note=None , reason=None , regarding=None , related=None , reportingController=None , reportingInstance=None , series=None , type=None ) Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. parameters eventTime meta_v1.MicroTime - Required. Time when this Event was first observed. action str - (optional) What action was taken/failed regarding to the regarding object. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info deprecatedCount int - (optional) Deprecated field assuring backward compatibility with core.v1 Event type deprecatedFirstTimestamp meta_v1.Time - (optional) Deprecated field assuring backward compatibility with core.v1 Event type deprecatedLastTimestamp meta_v1.Time - (optional) Deprecated field assuring backward compatibility with core.v1 Event type deprecatedSource core_v1.EventSource - (optional) Deprecated field assuring backward compatibility with core.v1 Event type kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) note str - (optional) Optional. A human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB. reason str - (optional) Why the action was taken. regarding core_v1.ObjectReference - (optional) The object this Event is about. In most cases it's an Object reporting controller implements. E.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object. related core_v1.ObjectReference - (optional) Optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object. reportingController str - (optional) Name of the controller that emitted this Event, e.g. kubernetes.io/kubelet . reportingInstance str - (optional) ID of the controller instance, e.g. kubelet-xyzf . series EventSeries - (optional) Data about the Event series this event represents or nil if it's a singleton Event. type str - (optional) Type of this event (Normal, Warning), new types could be added in the future.","title":"Event"},{"location":"models/events_v1beta1/#eventlist","text":"class lightkube.models.events_v1beta1. EventList ( items , apiVersion=None , kind=None , metadata=None ) EventList is a list of Event objects. parameters items Event - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"EventList"},{"location":"models/events_v1beta1/#eventseries","text":"class lightkube.models.events_v1beta1. EventSeries ( count , lastObservedTime , state ) EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. parameters count int - Number of occurrences in this series up to the last heartbeat time lastObservedTime meta_v1.MicroTime - Time when last Event from the series was seen before last heartbeat. state str - Information whether this series is ongoing or finished. Deprecated. Planned removal for 1.18","title":"EventSeries"},{"location":"models/extensions_v1beta1/","text":"extensions_v1beta1 HTTPIngressPath class lightkube.models.extensions_v1beta1. HTTPIngressPath ( backend , path=None , pathType=None ) HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend. parameters backend IngressBackend - Backend defines the referenced service endpoint to which the traffic will be forwarded to. path str - (optional) Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched. pathType str - (optional) PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is done on a path element by element basis. A path element refers is the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). ImplementationSpecific: Interpretation of the Path matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types. Implementations are required to support all path types. Defaults to ImplementationSpecific. HTTPIngressRuleValue class lightkube.models.extensions_v1beta1. HTTPIngressRuleValue ( paths ) HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http:// / ? -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'. parameters paths HTTPIngressPath - A collection of paths that map requests to backends. Ingress class lightkube.models.extensions_v1beta1. Ingress ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc. DEPRECATED - This group version of Ingress is deprecated by networking.k8s.io/v1beta1 Ingress. See the release notes for more information. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec IngressSpec - (optional) Spec is the desired state of the Ingress. More info status IngressStatus - (optional) Status is the current state of the Ingress. More info IngressBackend class lightkube.models.extensions_v1beta1. IngressBackend ( resource=None , serviceName=None , servicePort=None ) IngressBackend describes all endpoints for a given service and port. parameters resource core_v1.TypedLocalObjectReference - (optional) Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified. serviceName str - (optional) Specifies the name of the referenced service. servicePort util_intstr.IntOrString - (optional) Specifies the port of the referenced service. IngressList class lightkube.models.extensions_v1beta1. IngressList ( items , apiVersion=None , kind=None , metadata=None ) IngressList is a collection of Ingress. parameters items Ingress - Items is the list of Ingress. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. More info IngressRule class lightkube.models.extensions_v1beta1. IngressRule ( host=None , http=None ) IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue. parameters host str - (optional) Host is the fully qualified domain name of a network host, as defined by RFC Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress. The : delimiter is not respected because ports are not allowed. Currently the port of an Ingress is implicitly :80 for http and :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue. Host can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \" .foo.com\"). The wildcard character ' ' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule. http HTTPIngressRuleValue - (optional) IngressSpec class lightkube.models.extensions_v1beta1. IngressSpec ( backend=None , ingressClassName=None , rules=None , tls=None ) IngressSpec describes the Ingress the user wishes to exist. parameters backend IngressBackend - (optional) A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default. ingressClassName str - (optional) IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated kubernetes.io/ingress.class annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation. rules IngressRule - (optional) A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend. tls IngressTLS - (optional) TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI. IngressStatus class lightkube.models.extensions_v1beta1. IngressStatus ( loadBalancer=None ) IngressStatus describe the current state of the Ingress. parameters loadBalancer core_v1.LoadBalancerStatus - (optional) LoadBalancer contains the current status of the load-balancer. IngressTLS class lightkube.models.extensions_v1beta1. IngressTLS ( hosts=None , secretName=None ) IngressTLS describes the transport layer security associated with an Ingress. parameters hosts List[str] - (optional) Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified. secretName str - (optional) SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.","title":"extensions_v1beta1"},{"location":"models/extensions_v1beta1/#extensions_v1beta1","text":"","title":"extensions_v1beta1"},{"location":"models/extensions_v1beta1/#httpingresspath","text":"class lightkube.models.extensions_v1beta1. HTTPIngressPath ( backend , path=None , pathType=None ) HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend. parameters backend IngressBackend - Backend defines the referenced service endpoint to which the traffic will be forwarded to. path str - (optional) Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched. pathType str - (optional) PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is done on a path element by element basis. A path element refers is the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). ImplementationSpecific: Interpretation of the Path matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types. Implementations are required to support all path types. Defaults to ImplementationSpecific.","title":"HTTPIngressPath"},{"location":"models/extensions_v1beta1/#httpingressrulevalue","text":"class lightkube.models.extensions_v1beta1. HTTPIngressRuleValue ( paths ) HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http:// / ? -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'. parameters paths HTTPIngressPath - A collection of paths that map requests to backends.","title":"HTTPIngressRuleValue"},{"location":"models/extensions_v1beta1/#ingress","text":"class lightkube.models.extensions_v1beta1. Ingress ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc. DEPRECATED - This group version of Ingress is deprecated by networking.k8s.io/v1beta1 Ingress. See the release notes for more information. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec IngressSpec - (optional) Spec is the desired state of the Ingress. More info status IngressStatus - (optional) Status is the current state of the Ingress. More info","title":"Ingress"},{"location":"models/extensions_v1beta1/#ingressbackend","text":"class lightkube.models.extensions_v1beta1. IngressBackend ( resource=None , serviceName=None , servicePort=None ) IngressBackend describes all endpoints for a given service and port. parameters resource core_v1.TypedLocalObjectReference - (optional) Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified. serviceName str - (optional) Specifies the name of the referenced service. servicePort util_intstr.IntOrString - (optional) Specifies the port of the referenced service.","title":"IngressBackend"},{"location":"models/extensions_v1beta1/#ingresslist","text":"class lightkube.models.extensions_v1beta1. IngressList ( items , apiVersion=None , kind=None , metadata=None ) IngressList is a collection of Ingress. parameters items Ingress - Items is the list of Ingress. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. More info","title":"IngressList"},{"location":"models/extensions_v1beta1/#ingressrule","text":"class lightkube.models.extensions_v1beta1. IngressRule ( host=None , http=None ) IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue. parameters host str - (optional) Host is the fully qualified domain name of a network host, as defined by RFC Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress. The : delimiter is not respected because ports are not allowed. Currently the port of an Ingress is implicitly :80 for http and :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue. Host can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \" .foo.com\"). The wildcard character ' ' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule. http HTTPIngressRuleValue - (optional)","title":"IngressRule"},{"location":"models/extensions_v1beta1/#ingressspec","text":"class lightkube.models.extensions_v1beta1. IngressSpec ( backend=None , ingressClassName=None , rules=None , tls=None ) IngressSpec describes the Ingress the user wishes to exist. parameters backend IngressBackend - (optional) A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default. ingressClassName str - (optional) IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated kubernetes.io/ingress.class annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation. rules IngressRule - (optional) A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend. tls IngressTLS - (optional) TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.","title":"IngressSpec"},{"location":"models/extensions_v1beta1/#ingressstatus","text":"class lightkube.models.extensions_v1beta1. IngressStatus ( loadBalancer=None ) IngressStatus describe the current state of the Ingress. parameters loadBalancer core_v1.LoadBalancerStatus - (optional) LoadBalancer contains the current status of the load-balancer.","title":"IngressStatus"},{"location":"models/extensions_v1beta1/#ingresstls","text":"class lightkube.models.extensions_v1beta1. IngressTLS ( hosts=None , secretName=None ) IngressTLS describes the transport layer security associated with an Ingress. parameters hosts List[str] - (optional) Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified. secretName str - (optional) SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.","title":"IngressTLS"},{"location":"models/flowcontrol_v1alpha1/","text":"flowcontrol_v1alpha1 FlowDistinguisherMethod class lightkube.models.flowcontrol_v1alpha1. FlowDistinguisherMethod ( type ) FlowDistinguisherMethod specifies the method of a flow distinguisher. parameters type str - type is the type of flow distinguisher method The supported types are \"ByUser\" and \"ByNamespace\". Required. FlowSchema class lightkube.models.flowcontrol_v1alpha1. FlowSchema ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a \"flow distinguisher\". parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata is the standard object's metadata. More info spec FlowSchemaSpec - (optional) spec is the specification of the desired behavior of a FlowSchema. More info status FlowSchemaStatus - (optional) status is the current status of a FlowSchema. More info FlowSchemaCondition class lightkube.models.flowcontrol_v1alpha1. FlowSchemaCondition ( lastTransitionTime=None , message=None , reason=None , status=None , type=None ) FlowSchemaCondition describes conditions for a FlowSchema. parameters lastTransitionTime meta_v1.Time - (optional) lastTransitionTime is the last time the condition transitioned from one status to another. message str - (optional) message is a human-readable message indicating details about last transition. reason str - (optional) reason is a unique, one-word, CamelCase reason for the condition's last transition. status str - (optional) status is the status of the condition. Can be True, False, Unknown. Required. type str - (optional) type is the type of the condition. Required. FlowSchemaList class lightkube.models.flowcontrol_v1alpha1. FlowSchemaList ( items , apiVersion=None , kind=None , metadata=None ) FlowSchemaList is a list of FlowSchema objects. parameters items FlowSchema - items is a list of FlowSchemas. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) metadata is the standard list metadata. More info FlowSchemaSpec class lightkube.models.flowcontrol_v1alpha1. FlowSchemaSpec ( priorityLevelConfiguration , distinguisherMethod=None , matchingPrecedence=None , rules=None ) FlowSchemaSpec describes how the FlowSchema's specification looks like. parameters priorityLevelConfiguration PriorityLevelConfigurationReference - priorityLevelConfiguration should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required. distinguisherMethod FlowDistinguisherMethod - (optional) distinguisherMethod defines how to compute the flow distinguisher for requests that match this schema. nil specifies that the distinguisher is disabled and thus will always be the empty string. matchingPrecedence int - (optional) matchingPrecedence is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence. Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default. rules PolicyRulesWithSubjects - (optional) rules describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema. FlowSchemaStatus class lightkube.models.flowcontrol_v1alpha1. FlowSchemaStatus ( conditions=None ) FlowSchemaStatus represents the current state of a FlowSchema. parameters conditions FlowSchemaCondition - (optional) conditions is a list of the current states of FlowSchema. GroupSubject class lightkube.models.flowcontrol_v1alpha1. GroupSubject ( name ) GroupSubject holds detailed information for group-kind subject. parameters name str - name is the user group that matches, or \"*\" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required. LimitResponse class lightkube.models.flowcontrol_v1alpha1. LimitResponse ( type , queuing=None ) LimitResponse defines how to handle requests that can not be executed right now. parameters type str - type is \"Queue\" or \"Reject\". \"Queue\" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \"Reject\" means that requests that can not be executed upon arrival are rejected. Required. queuing QueuingConfiguration - (optional) queuing holds the configuration parameters for queuing. This field may be non-empty only if type is \"Queue\" . LimitedPriorityLevelConfiguration class lightkube.models.flowcontrol_v1alpha1. LimitedPriorityLevelConfiguration ( assuredConcurrencyShares=None , limitResponse=None ) LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues: * How are requests for this priority level limited? * What should be done with requests that exceed the limit? parameters assuredConcurrencyShares int - (optional) assuredConcurrencyShares (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time. ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level: ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) ) bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30. limitResponse LimitResponse - (optional) limitResponse indicates what to do with requests that can not be executed right now NonResourcePolicyRule class lightkube.models.flowcontrol_v1alpha1. NonResourcePolicyRule ( nonResourceURLs , verbs ) NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request. parameters nonResourceURLs List[str] - nonResourceURLs is a set of url prefixes that a user should have access to and may not be empty. For example: \"/healthz\" is legal \"/hea \" is illegal \"/hea\" is legal but matches nothing \"/hea/ \" also matches nothing \"/healthz/ \" matches all per-component health checks. \" \" matches all non-resource urls. if it is present, it must be the only entry. Required. verbs List[str] - verbs is a list of matching verbs and may not be empty. \"*\" matches all verbs. If it is present, it must be the only entry. Required. PolicyRulesWithSubjects class lightkube.models.flowcontrol_v1alpha1. PolicyRulesWithSubjects ( subjects , nonResourceRules=None , resourceRules=None ) PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request. parameters subjects Subject - subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required. nonResourceRules NonResourcePolicyRule - (optional) nonResourceRules is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL. resourceRules ResourcePolicyRule - (optional) resourceRules is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of resourceRules and nonResourceRules has to be non-empty. PriorityLevelConfiguration class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfiguration ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) PriorityLevelConfiguration represents the configuration of a priority level. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata is the standard object's metadata. More info spec PriorityLevelConfigurationSpec - (optional) spec is the specification of the desired behavior of a \"request-priority\". More info status PriorityLevelConfigurationStatus - (optional) status is the current status of a \"request-priority\". More info PriorityLevelConfigurationCondition class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfigurationCondition ( lastTransitionTime=None , message=None , reason=None , status=None , type=None ) PriorityLevelConfigurationCondition defines the condition of priority level. parameters lastTransitionTime meta_v1.Time - (optional) lastTransitionTime is the last time the condition transitioned from one status to another. message str - (optional) message is a human-readable message indicating details about last transition. reason str - (optional) reason is a unique, one-word, CamelCase reason for the condition's last transition. status str - (optional) status is the status of the condition. Can be True, False, Unknown. Required. type str - (optional) type is the type of the condition. Required. PriorityLevelConfigurationList class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfigurationList ( items , apiVersion=None , kind=None , metadata=None ) PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects. parameters items PriorityLevelConfiguration - items is a list of request-priorities. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) metadata is the standard object's metadata. More info PriorityLevelConfigurationReference class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfigurationReference ( name ) PriorityLevelConfigurationReference contains information that points to the \"request-priority\" being used. parameters name str - name is the name of the priority level configuration being referenced Required. PriorityLevelConfigurationSpec class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfigurationSpec ( type , limited=None ) PriorityLevelConfigurationSpec specifies the configuration of a priority level. parameters type str - type indicates whether this priority level is subject to limitation on request execution. A value of \"Exempt\" means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels. A value of \"Limited\" means that (a) requests of this priority level are subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required. limited LimitedPriorityLevelConfiguration - (optional) limited specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if type is \"Limited\" . PriorityLevelConfigurationStatus class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfigurationStatus ( conditions=None ) PriorityLevelConfigurationStatus represents the current state of a \"request-priority\". parameters conditions PriorityLevelConfigurationCondition - (optional) conditions is the current state of \"request-priority\". QueuingConfiguration class lightkube.models.flowcontrol_v1alpha1. QueuingConfiguration ( handSize=None , queueLengthLimit=None , queues=None ) QueuingConfiguration holds the configuration parameters for queuing parameters handSize int - (optional) handSize is a small positive number that configures the shuffle sharding of requests into queues. When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here. The request is put into one of the shortest queues in that hand. handSize must be no larger than queues , and should be significantly smaller (so that a few heavy flows do not saturate most of the queues). See the user-facing documentation for more extensive guidance on setting this field. This field has a default value of 8. queueLengthLimit int - (optional) queueLengthLimit is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected. This value must be positive. If not specified, it will be defaulted to 50. queues int - (optional) queues is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive. Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant. This field has a default value of 64. ResourcePolicyRule class lightkube.models.flowcontrol_v1alpha1. ResourcePolicyRule ( apiGroups , resources , verbs , clusterScope=None , namespaces=None ) ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request. parameters apiGroups List[str] - apiGroups is a list of matching API groups and may not be empty. \" \" matches all API groups and, if present, must be the only entry. Required. resources List[str] - resources is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource. For example, [ \"services\", \"nodes/status\" ]. This list may not be empty. \" \" matches all resources and, if present, must be the only entry. Required. verbs List[str] - verbs is a list of matching verbs and may not be empty. \"*\" matches all verbs and, if present, must be the only entry. Required. clusterScope bool - (optional) clusterScope indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the namespaces field must contain a non-empty list. namespaces List[str] - (optional) namespaces is a list of target namespaces that restricts matches. A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains \" \". Note that \" \" matches any specified namespace but does not match a request that does not specify a namespace (see the clusterScope field for that). This list may be empty, but only if clusterScope is true. ServiceAccountSubject class lightkube.models.flowcontrol_v1alpha1. ServiceAccountSubject ( name , namespace ) ServiceAccountSubject holds detailed information for service-account-kind subject. parameters name str - name is the name of matching ServiceAccount objects, or \"*\" to match regardless of name. Required. namespace str - namespace is the namespace of matching ServiceAccount objects. Required. Subject class lightkube.models.flowcontrol_v1alpha1. Subject ( kind , group=None , serviceAccount=None , user=None ) Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account. parameters kind str - Required group GroupSubject - (optional) serviceAccount ServiceAccountSubject - (optional) user UserSubject - (optional) UserSubject class lightkube.models.flowcontrol_v1alpha1. UserSubject ( name ) UserSubject holds detailed information for user-kind subject. parameters name str - name is the username that matches, or \"*\" to match all usernames. Required.","title":"flowcontrol_v1alpha1"},{"location":"models/flowcontrol_v1alpha1/#flowcontrol_v1alpha1","text":"","title":"flowcontrol_v1alpha1"},{"location":"models/flowcontrol_v1alpha1/#flowdistinguishermethod","text":"class lightkube.models.flowcontrol_v1alpha1. FlowDistinguisherMethod ( type ) FlowDistinguisherMethod specifies the method of a flow distinguisher. parameters type str - type is the type of flow distinguisher method The supported types are \"ByUser\" and \"ByNamespace\". Required.","title":"FlowDistinguisherMethod"},{"location":"models/flowcontrol_v1alpha1/#flowschema","text":"class lightkube.models.flowcontrol_v1alpha1. FlowSchema ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a \"flow distinguisher\". parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata is the standard object's metadata. More info spec FlowSchemaSpec - (optional) spec is the specification of the desired behavior of a FlowSchema. More info status FlowSchemaStatus - (optional) status is the current status of a FlowSchema. More info","title":"FlowSchema"},{"location":"models/flowcontrol_v1alpha1/#flowschemacondition","text":"class lightkube.models.flowcontrol_v1alpha1. FlowSchemaCondition ( lastTransitionTime=None , message=None , reason=None , status=None , type=None ) FlowSchemaCondition describes conditions for a FlowSchema. parameters lastTransitionTime meta_v1.Time - (optional) lastTransitionTime is the last time the condition transitioned from one status to another. message str - (optional) message is a human-readable message indicating details about last transition. reason str - (optional) reason is a unique, one-word, CamelCase reason for the condition's last transition. status str - (optional) status is the status of the condition. Can be True, False, Unknown. Required. type str - (optional) type is the type of the condition. Required.","title":"FlowSchemaCondition"},{"location":"models/flowcontrol_v1alpha1/#flowschemalist","text":"class lightkube.models.flowcontrol_v1alpha1. FlowSchemaList ( items , apiVersion=None , kind=None , metadata=None ) FlowSchemaList is a list of FlowSchema objects. parameters items FlowSchema - items is a list of FlowSchemas. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) metadata is the standard list metadata. More info","title":"FlowSchemaList"},{"location":"models/flowcontrol_v1alpha1/#flowschemaspec","text":"class lightkube.models.flowcontrol_v1alpha1. FlowSchemaSpec ( priorityLevelConfiguration , distinguisherMethod=None , matchingPrecedence=None , rules=None ) FlowSchemaSpec describes how the FlowSchema's specification looks like. parameters priorityLevelConfiguration PriorityLevelConfigurationReference - priorityLevelConfiguration should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required. distinguisherMethod FlowDistinguisherMethod - (optional) distinguisherMethod defines how to compute the flow distinguisher for requests that match this schema. nil specifies that the distinguisher is disabled and thus will always be the empty string. matchingPrecedence int - (optional) matchingPrecedence is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence. Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default. rules PolicyRulesWithSubjects - (optional) rules describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.","title":"FlowSchemaSpec"},{"location":"models/flowcontrol_v1alpha1/#flowschemastatus","text":"class lightkube.models.flowcontrol_v1alpha1. FlowSchemaStatus ( conditions=None ) FlowSchemaStatus represents the current state of a FlowSchema. parameters conditions FlowSchemaCondition - (optional) conditions is a list of the current states of FlowSchema.","title":"FlowSchemaStatus"},{"location":"models/flowcontrol_v1alpha1/#groupsubject","text":"class lightkube.models.flowcontrol_v1alpha1. GroupSubject ( name ) GroupSubject holds detailed information for group-kind subject. parameters name str - name is the user group that matches, or \"*\" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.","title":"GroupSubject"},{"location":"models/flowcontrol_v1alpha1/#limitresponse","text":"class lightkube.models.flowcontrol_v1alpha1. LimitResponse ( type , queuing=None ) LimitResponse defines how to handle requests that can not be executed right now. parameters type str - type is \"Queue\" or \"Reject\". \"Queue\" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \"Reject\" means that requests that can not be executed upon arrival are rejected. Required. queuing QueuingConfiguration - (optional) queuing holds the configuration parameters for queuing. This field may be non-empty only if type is \"Queue\" .","title":"LimitResponse"},{"location":"models/flowcontrol_v1alpha1/#limitedprioritylevelconfiguration","text":"class lightkube.models.flowcontrol_v1alpha1. LimitedPriorityLevelConfiguration ( assuredConcurrencyShares=None , limitResponse=None ) LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues: * How are requests for this priority level limited? * What should be done with requests that exceed the limit? parameters assuredConcurrencyShares int - (optional) assuredConcurrencyShares (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time. ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level: ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) ) bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30. limitResponse LimitResponse - (optional) limitResponse indicates what to do with requests that can not be executed right now","title":"LimitedPriorityLevelConfiguration"},{"location":"models/flowcontrol_v1alpha1/#nonresourcepolicyrule","text":"class lightkube.models.flowcontrol_v1alpha1. NonResourcePolicyRule ( nonResourceURLs , verbs ) NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request. parameters nonResourceURLs List[str] - nonResourceURLs is a set of url prefixes that a user should have access to and may not be empty. For example: \"/healthz\" is legal \"/hea \" is illegal \"/hea\" is legal but matches nothing \"/hea/ \" also matches nothing \"/healthz/ \" matches all per-component health checks. \" \" matches all non-resource urls. if it is present, it must be the only entry. Required. verbs List[str] - verbs is a list of matching verbs and may not be empty. \"*\" matches all verbs. If it is present, it must be the only entry. Required.","title":"NonResourcePolicyRule"},{"location":"models/flowcontrol_v1alpha1/#policyruleswithsubjects","text":"class lightkube.models.flowcontrol_v1alpha1. PolicyRulesWithSubjects ( subjects , nonResourceRules=None , resourceRules=None ) PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request. parameters subjects Subject - subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required. nonResourceRules NonResourcePolicyRule - (optional) nonResourceRules is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL. resourceRules ResourcePolicyRule - (optional) resourceRules is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of resourceRules and nonResourceRules has to be non-empty.","title":"PolicyRulesWithSubjects"},{"location":"models/flowcontrol_v1alpha1/#prioritylevelconfiguration","text":"class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfiguration ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) PriorityLevelConfiguration represents the configuration of a priority level. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata is the standard object's metadata. More info spec PriorityLevelConfigurationSpec - (optional) spec is the specification of the desired behavior of a \"request-priority\". More info status PriorityLevelConfigurationStatus - (optional) status is the current status of a \"request-priority\". More info","title":"PriorityLevelConfiguration"},{"location":"models/flowcontrol_v1alpha1/#prioritylevelconfigurationcondition","text":"class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfigurationCondition ( lastTransitionTime=None , message=None , reason=None , status=None , type=None ) PriorityLevelConfigurationCondition defines the condition of priority level. parameters lastTransitionTime meta_v1.Time - (optional) lastTransitionTime is the last time the condition transitioned from one status to another. message str - (optional) message is a human-readable message indicating details about last transition. reason str - (optional) reason is a unique, one-word, CamelCase reason for the condition's last transition. status str - (optional) status is the status of the condition. Can be True, False, Unknown. Required. type str - (optional) type is the type of the condition. Required.","title":"PriorityLevelConfigurationCondition"},{"location":"models/flowcontrol_v1alpha1/#prioritylevelconfigurationlist","text":"class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfigurationList ( items , apiVersion=None , kind=None , metadata=None ) PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects. parameters items PriorityLevelConfiguration - items is a list of request-priorities. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) metadata is the standard object's metadata. More info","title":"PriorityLevelConfigurationList"},{"location":"models/flowcontrol_v1alpha1/#prioritylevelconfigurationreference","text":"class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfigurationReference ( name ) PriorityLevelConfigurationReference contains information that points to the \"request-priority\" being used. parameters name str - name is the name of the priority level configuration being referenced Required.","title":"PriorityLevelConfigurationReference"},{"location":"models/flowcontrol_v1alpha1/#prioritylevelconfigurationspec","text":"class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfigurationSpec ( type , limited=None ) PriorityLevelConfigurationSpec specifies the configuration of a priority level. parameters type str - type indicates whether this priority level is subject to limitation on request execution. A value of \"Exempt\" means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels. A value of \"Limited\" means that (a) requests of this priority level are subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required. limited LimitedPriorityLevelConfiguration - (optional) limited specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if type is \"Limited\" .","title":"PriorityLevelConfigurationSpec"},{"location":"models/flowcontrol_v1alpha1/#prioritylevelconfigurationstatus","text":"class lightkube.models.flowcontrol_v1alpha1. PriorityLevelConfigurationStatus ( conditions=None ) PriorityLevelConfigurationStatus represents the current state of a \"request-priority\". parameters conditions PriorityLevelConfigurationCondition - (optional) conditions is the current state of \"request-priority\".","title":"PriorityLevelConfigurationStatus"},{"location":"models/flowcontrol_v1alpha1/#queuingconfiguration","text":"class lightkube.models.flowcontrol_v1alpha1. QueuingConfiguration ( handSize=None , queueLengthLimit=None , queues=None ) QueuingConfiguration holds the configuration parameters for queuing parameters handSize int - (optional) handSize is a small positive number that configures the shuffle sharding of requests into queues. When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here. The request is put into one of the shortest queues in that hand. handSize must be no larger than queues , and should be significantly smaller (so that a few heavy flows do not saturate most of the queues). See the user-facing documentation for more extensive guidance on setting this field. This field has a default value of 8. queueLengthLimit int - (optional) queueLengthLimit is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected. This value must be positive. If not specified, it will be defaulted to 50. queues int - (optional) queues is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive. Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant. This field has a default value of 64.","title":"QueuingConfiguration"},{"location":"models/flowcontrol_v1alpha1/#resourcepolicyrule","text":"class lightkube.models.flowcontrol_v1alpha1. ResourcePolicyRule ( apiGroups , resources , verbs , clusterScope=None , namespaces=None ) ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request. parameters apiGroups List[str] - apiGroups is a list of matching API groups and may not be empty. \" \" matches all API groups and, if present, must be the only entry. Required. resources List[str] - resources is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource. For example, [ \"services\", \"nodes/status\" ]. This list may not be empty. \" \" matches all resources and, if present, must be the only entry. Required. verbs List[str] - verbs is a list of matching verbs and may not be empty. \"*\" matches all verbs and, if present, must be the only entry. Required. clusterScope bool - (optional) clusterScope indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the namespaces field must contain a non-empty list. namespaces List[str] - (optional) namespaces is a list of target namespaces that restricts matches. A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains \" \". Note that \" \" matches any specified namespace but does not match a request that does not specify a namespace (see the clusterScope field for that). This list may be empty, but only if clusterScope is true.","title":"ResourcePolicyRule"},{"location":"models/flowcontrol_v1alpha1/#serviceaccountsubject","text":"class lightkube.models.flowcontrol_v1alpha1. ServiceAccountSubject ( name , namespace ) ServiceAccountSubject holds detailed information for service-account-kind subject. parameters name str - name is the name of matching ServiceAccount objects, or \"*\" to match regardless of name. Required. namespace str - namespace is the namespace of matching ServiceAccount objects. Required.","title":"ServiceAccountSubject"},{"location":"models/flowcontrol_v1alpha1/#subject","text":"class lightkube.models.flowcontrol_v1alpha1. Subject ( kind , group=None , serviceAccount=None , user=None ) Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account. parameters kind str - Required group GroupSubject - (optional) serviceAccount ServiceAccountSubject - (optional) user UserSubject - (optional)","title":"Subject"},{"location":"models/flowcontrol_v1alpha1/#usersubject","text":"class lightkube.models.flowcontrol_v1alpha1. UserSubject ( name ) UserSubject holds detailed information for user-kind subject. parameters name str - name is the username that matches, or \"*\" to match all usernames. Required.","title":"UserSubject"},{"location":"models/meta_v1/","text":"meta_v1 APIGroup class lightkube.models.meta_v1. APIGroup ( name , versions , apiVersion=None , kind=None , preferredVersion=None , serverAddressByClientCIDRs=None ) APIGroup contains the name, the supported versions, and the preferred version of a group. parameters name str - name is the name of the group. versions GroupVersionForDiscovery - versions are the versions supported in this group. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info preferredVersion GroupVersionForDiscovery - (optional) preferredVersion is the version preferred by the API server, which probably is the storage version. serverAddressByClientCIDRs ServerAddressByClientCIDR - (optional) a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP. APIGroupList class lightkube.models.meta_v1. APIGroupList ( groups , apiVersion=None , kind=None ) APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis. parameters groups APIGroup - groups is a list of APIGroup. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info APIResource class lightkube.models.meta_v1. APIResource ( kind , name , namespaced , singularName , verbs , categories=None , group=None , shortNames=None , storageVersionHash=None , version=None ) APIResource specifies the name of a resource and whether it is namespaced. parameters kind str - kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo') name str - name is the plural name of the resource. namespaced bool - namespaced indicates if a resource is namespaced or not. singularName str - singularName is the singular name of the resource. This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface. verbs List[str] - verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy) categories List[str] - (optional) categories is a list of the grouped resources this resource belongs to (e.g. 'all') group str - (optional) group is the preferred group of the resource. Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\". shortNames List[str] - (optional) shortNames is a list of suggested short names of the resource. storageVersionHash str - (optional) The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates. version str - (optional) version is the preferred version of the resource. Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\". APIResourceList class lightkube.models.meta_v1. APIResourceList ( groupVersion , resources , apiVersion=None , kind=None ) APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced. parameters groupVersion str - groupVersion is the group and version this APIResourceList is for. resources APIResource - resources contains the name of the resources and if they are namespaced. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info APIVersions class lightkube.models.meta_v1. APIVersions ( serverAddressByClientCIDRs , versions , apiVersion=None , kind=None ) APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API. parameters serverAddressByClientCIDRs ServerAddressByClientCIDR - a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP. versions List[str] - versions are the api versions that are available. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info DeleteOptions class lightkube.models.meta_v1. DeleteOptions ( apiVersion=None , dryRun=None , gracePeriodSeconds=None , kind=None , orphanDependents=None , preconditions=None , propagationPolicy=None ) DeleteOptions may be provided when deleting an API object. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info dryRun List[str] - (optional) When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed gracePeriodSeconds int - (optional) The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info orphanDependents bool - (optional) Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both. preconditions Preconditions - (optional) Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned. propagationPolicy str - (optional) Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground. FieldsV1 GroupVersionForDiscovery class lightkube.models.meta_v1. GroupVersionForDiscovery ( groupVersion , version ) GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility. parameters groupVersion str - groupVersion specifies the API group and version in the form \"group/version\" version str - version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion. LabelSelector class lightkube.models.meta_v1. LabelSelector ( matchExpressions=None , matchLabels=None ) A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects. parameters matchExpressions LabelSelectorRequirement - (optional) matchExpressions is a list of label selector requirements. The requirements are ANDed. matchLabels dict - (optional) matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. LabelSelectorRequirement class lightkube.models.meta_v1. LabelSelectorRequirement ( key , operator , values=None ) A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values. parameters key str - key is the label key that the selector applies to. operator str - operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. values List[str] - (optional) values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. ListMeta class lightkube.models.meta_v1. ListMeta ( continue_=None , remainingItemCount=None , resourceVersion=None , selfLink=None ) ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}. parameters continue_ str - (optional) continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message. remainingItemCount int - (optional) remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is estimating the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact. resourceVersion str - (optional) String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info selfLink str - (optional) selfLink is a URL representing this object. Populated by the system. Read-only. DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release. ManagedFieldsEntry class lightkube.models.meta_v1. ManagedFieldsEntry ( apiVersion=None , fieldsType=None , fieldsV1=None , manager=None , operation=None , time=None ) ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to. parameters apiVersion str - (optional) APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted. fieldsType str - (optional) FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\" fieldsV1 FieldsV1 - (optional) FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type. manager str - (optional) Manager is an identifier of the workflow managing these fields. operation str - (optional) Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'. time Time - (optional) Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply' MicroTime ObjectMeta class lightkube.models.meta_v1. ObjectMeta ( annotations=None , clusterName=None , creationTimestamp=None , deletionGracePeriodSeconds=None , deletionTimestamp=None , finalizers=None , generateName=None , generation=None , labels=None , managedFields=None , name=None , namespace=None , ownerReferences=None , resourceVersion=None , selfLink=None , uid=None ) ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. parameters annotations dict - (optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info clusterName str - (optional) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request. creationTimestamp Time - (optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info deletionGracePeriodSeconds int - (optional) Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only. deletionTimestamp Time - (optional) DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info finalizers List[str] - (optional) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order. Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list. generateName str - (optional) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info generation int - (optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only. labels dict - (optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info managedFields ManagedFieldsEntry - (optional) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object. name str - (optional) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info namespace str - (optional) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info ownerReferences OwnerReference - (optional) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. resourceVersion str - (optional) An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info selfLink str - (optional) SelfLink is a URL representing this object. Populated by the system. Read-only. DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release. uid str - (optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info OwnerReference class lightkube.models.meta_v1. OwnerReference ( apiVersion , kind , name , uid , blockOwnerDeletion=None , controller=None ) OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field. parameters apiVersion str - API version of the referent. kind str - Kind of the referent. More info name str - Name of the referent. More info uid str - UID of the referent. More info blockOwnerDeletion bool - (optional) If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. controller bool - (optional) If true, this reference points to the managing controller. Patch Preconditions class lightkube.models.meta_v1. Preconditions ( resourceVersion=None , uid=None ) Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out. parameters resourceVersion str - (optional) Specifies the target ResourceVersion uid str - (optional) Specifies the target UID. ServerAddressByClientCIDR class lightkube.models.meta_v1. ServerAddressByClientCIDR ( clientCIDR , serverAddress ) ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match. parameters clientCIDR str - The CIDR with which clients can match their IP to figure out the server address that they should use. serverAddress str - Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port. Status class lightkube.models.meta_v1. Status ( apiVersion=None , code=None , details=None , kind=None , message=None , metadata=None , reason=None , status=None ) Status is a return value for calls that don't return other objects. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info code int - (optional) Suggested HTTP return code for this status, 0 if not set. details StatusDetails - (optional) Extended data associated with the reason. Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info message str - (optional) A human-readable description of the status of this operation. metadata ListMeta - (optional) Standard list metadata. More info reason str - (optional) A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it. status str - (optional) Status of the operation. One of: \"Success\" or \"Failure\". More info StatusCause class lightkube.models.meta_v1. StatusCause ( field=None , message=None , reason=None ) StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered. parameters field str - (optional) The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed. Fields may appear more than once in an array of causes due to fields having multiple errors. Optional. Examples: \"name\" - the field \"name\" on the current resource \"items[0].name\" - the field \"name\" on the first array entry in \"items\" message str - (optional) A human-readable description of the cause of the error. This field may be presented as-is to a reader. reason str - (optional) A machine-readable description of the cause of the error. If this value is empty there is no information available. StatusDetails class lightkube.models.meta_v1. StatusDetails ( causes=None , group=None , kind=None , name=None , retryAfterSeconds=None , uid=None ) StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined. parameters causes StatusCause - (optional) The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes. group str - (optional) The group attribute of the resource associated with the status StatusReason. kind str - (optional) The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info name str - (optional) The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described). retryAfterSeconds int - (optional) If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action. uid str - (optional) UID of the resource. (when there is a single resource which can be described). More info Time WatchEvent class lightkube.models.meta_v1. WatchEvent ( object , type ) Event represents a single event to a watched resource. parameters object runtime.RawExtension - Object is: If Type is Added or Modified: the new state of the object. If Type is Deleted: the state of the object immediately before deletion. If Type is Error: *Status is recommended; other types may make sense depending on context. type str -","title":"meta_v1"},{"location":"models/meta_v1/#meta_v1","text":"","title":"meta_v1"},{"location":"models/meta_v1/#apigroup","text":"class lightkube.models.meta_v1. APIGroup ( name , versions , apiVersion=None , kind=None , preferredVersion=None , serverAddressByClientCIDRs=None ) APIGroup contains the name, the supported versions, and the preferred version of a group. parameters name str - name is the name of the group. versions GroupVersionForDiscovery - versions are the versions supported in this group. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info preferredVersion GroupVersionForDiscovery - (optional) preferredVersion is the version preferred by the API server, which probably is the storage version. serverAddressByClientCIDRs ServerAddressByClientCIDR - (optional) a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.","title":"APIGroup"},{"location":"models/meta_v1/#apigrouplist","text":"class lightkube.models.meta_v1. APIGroupList ( groups , apiVersion=None , kind=None ) APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis. parameters groups APIGroup - groups is a list of APIGroup. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info","title":"APIGroupList"},{"location":"models/meta_v1/#apiresource","text":"class lightkube.models.meta_v1. APIResource ( kind , name , namespaced , singularName , verbs , categories=None , group=None , shortNames=None , storageVersionHash=None , version=None ) APIResource specifies the name of a resource and whether it is namespaced. parameters kind str - kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo') name str - name is the plural name of the resource. namespaced bool - namespaced indicates if a resource is namespaced or not. singularName str - singularName is the singular name of the resource. This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface. verbs List[str] - verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy) categories List[str] - (optional) categories is a list of the grouped resources this resource belongs to (e.g. 'all') group str - (optional) group is the preferred group of the resource. Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\". shortNames List[str] - (optional) shortNames is a list of suggested short names of the resource. storageVersionHash str - (optional) The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates. version str - (optional) version is the preferred version of the resource. Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".","title":"APIResource"},{"location":"models/meta_v1/#apiresourcelist","text":"class lightkube.models.meta_v1. APIResourceList ( groupVersion , resources , apiVersion=None , kind=None ) APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced. parameters groupVersion str - groupVersion is the group and version this APIResourceList is for. resources APIResource - resources contains the name of the resources and if they are namespaced. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info","title":"APIResourceList"},{"location":"models/meta_v1/#apiversions","text":"class lightkube.models.meta_v1. APIVersions ( serverAddressByClientCIDRs , versions , apiVersion=None , kind=None ) APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API. parameters serverAddressByClientCIDRs ServerAddressByClientCIDR - a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP. versions List[str] - versions are the api versions that are available. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info","title":"APIVersions"},{"location":"models/meta_v1/#deleteoptions","text":"class lightkube.models.meta_v1. DeleteOptions ( apiVersion=None , dryRun=None , gracePeriodSeconds=None , kind=None , orphanDependents=None , preconditions=None , propagationPolicy=None ) DeleteOptions may be provided when deleting an API object. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info dryRun List[str] - (optional) When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed gracePeriodSeconds int - (optional) The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info orphanDependents bool - (optional) Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both. preconditions Preconditions - (optional) Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned. propagationPolicy str - (optional) Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.","title":"DeleteOptions"},{"location":"models/meta_v1/#fieldsv1","text":"","title":"FieldsV1"},{"location":"models/meta_v1/#groupversionfordiscovery","text":"class lightkube.models.meta_v1. GroupVersionForDiscovery ( groupVersion , version ) GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility. parameters groupVersion str - groupVersion specifies the API group and version in the form \"group/version\" version str - version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.","title":"GroupVersionForDiscovery"},{"location":"models/meta_v1/#labelselector","text":"class lightkube.models.meta_v1. LabelSelector ( matchExpressions=None , matchLabels=None ) A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects. parameters matchExpressions LabelSelectorRequirement - (optional) matchExpressions is a list of label selector requirements. The requirements are ANDed. matchLabels dict - (optional) matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.","title":"LabelSelector"},{"location":"models/meta_v1/#labelselectorrequirement","text":"class lightkube.models.meta_v1. LabelSelectorRequirement ( key , operator , values=None ) A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values. parameters key str - key is the label key that the selector applies to. operator str - operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist. values List[str] - (optional) values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.","title":"LabelSelectorRequirement"},{"location":"models/meta_v1/#listmeta","text":"class lightkube.models.meta_v1. ListMeta ( continue_=None , remainingItemCount=None , resourceVersion=None , selfLink=None ) ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}. parameters continue_ str - (optional) continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message. remainingItemCount int - (optional) remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is estimating the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact. resourceVersion str - (optional) String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info selfLink str - (optional) selfLink is a URL representing this object. Populated by the system. Read-only. DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.","title":"ListMeta"},{"location":"models/meta_v1/#managedfieldsentry","text":"class lightkube.models.meta_v1. ManagedFieldsEntry ( apiVersion=None , fieldsType=None , fieldsV1=None , manager=None , operation=None , time=None ) ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to. parameters apiVersion str - (optional) APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted. fieldsType str - (optional) FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\" fieldsV1 FieldsV1 - (optional) FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type. manager str - (optional) Manager is an identifier of the workflow managing these fields. operation str - (optional) Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'. time Time - (optional) Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'","title":"ManagedFieldsEntry"},{"location":"models/meta_v1/#microtime","text":"","title":"MicroTime"},{"location":"models/meta_v1/#objectmeta","text":"class lightkube.models.meta_v1. ObjectMeta ( annotations=None , clusterName=None , creationTimestamp=None , deletionGracePeriodSeconds=None , deletionTimestamp=None , finalizers=None , generateName=None , generation=None , labels=None , managedFields=None , name=None , namespace=None , ownerReferences=None , resourceVersion=None , selfLink=None , uid=None ) ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create. parameters annotations dict - (optional) Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info clusterName str - (optional) The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request. creationTimestamp Time - (optional) CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists. More info deletionGracePeriodSeconds int - (optional) Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only. deletionTimestamp Time - (optional) DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only. More info finalizers List[str] - (optional) Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order. Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list. generateName str - (optional) GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header). Applied only if Name is not specified. More info generation int - (optional) A sequence number representing a specific generation of the desired state. Populated by the system. Read-only. labels dict - (optional) Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info managedFields ManagedFieldsEntry - (optional) ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object. name str - (optional) Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info namespace str - (optional) Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated. More info ownerReferences OwnerReference - (optional) List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller. resourceVersion str - (optional) An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only. Value must be treated as opaque by clients and . More info selfLink str - (optional) SelfLink is a URL representing this object. Populated by the system. Read-only. DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release. uid str - (optional) UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. More info","title":"ObjectMeta"},{"location":"models/meta_v1/#ownerreference","text":"class lightkube.models.meta_v1. OwnerReference ( apiVersion , kind , name , uid , blockOwnerDeletion=None , controller=None ) OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field. parameters apiVersion str - API version of the referent. kind str - Kind of the referent. More info name str - Name of the referent. More info uid str - UID of the referent. More info blockOwnerDeletion bool - (optional) If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. controller bool - (optional) If true, this reference points to the managing controller.","title":"OwnerReference"},{"location":"models/meta_v1/#patch","text":"","title":"Patch"},{"location":"models/meta_v1/#preconditions","text":"class lightkube.models.meta_v1. Preconditions ( resourceVersion=None , uid=None ) Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out. parameters resourceVersion str - (optional) Specifies the target ResourceVersion uid str - (optional) Specifies the target UID.","title":"Preconditions"},{"location":"models/meta_v1/#serveraddressbyclientcidr","text":"class lightkube.models.meta_v1. ServerAddressByClientCIDR ( clientCIDR , serverAddress ) ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match. parameters clientCIDR str - The CIDR with which clients can match their IP to figure out the server address that they should use. serverAddress str - Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.","title":"ServerAddressByClientCIDR"},{"location":"models/meta_v1/#status","text":"class lightkube.models.meta_v1. Status ( apiVersion=None , code=None , details=None , kind=None , message=None , metadata=None , reason=None , status=None ) Status is a return value for calls that don't return other objects. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info code int - (optional) Suggested HTTP return code for this status, 0 if not set. details StatusDetails - (optional) Extended data associated with the reason. Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info message str - (optional) A human-readable description of the status of this operation. metadata ListMeta - (optional) Standard list metadata. More info reason str - (optional) A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it. status str - (optional) Status of the operation. One of: \"Success\" or \"Failure\". More info","title":"Status"},{"location":"models/meta_v1/#statuscause","text":"class lightkube.models.meta_v1. StatusCause ( field=None , message=None , reason=None ) StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered. parameters field str - (optional) The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed. Fields may appear more than once in an array of causes due to fields having multiple errors. Optional. Examples: \"name\" - the field \"name\" on the current resource \"items[0].name\" - the field \"name\" on the first array entry in \"items\" message str - (optional) A human-readable description of the cause of the error. This field may be presented as-is to a reader. reason str - (optional) A machine-readable description of the cause of the error. If this value is empty there is no information available.","title":"StatusCause"},{"location":"models/meta_v1/#statusdetails","text":"class lightkube.models.meta_v1. StatusDetails ( causes=None , group=None , kind=None , name=None , retryAfterSeconds=None , uid=None ) StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined. parameters causes StatusCause - (optional) The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes. group str - (optional) The group attribute of the resource associated with the status StatusReason. kind str - (optional) The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info name str - (optional) The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described). retryAfterSeconds int - (optional) If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action. uid str - (optional) UID of the resource. (when there is a single resource which can be described). More info","title":"StatusDetails"},{"location":"models/meta_v1/#time","text":"","title":"Time"},{"location":"models/meta_v1/#watchevent","text":"class lightkube.models.meta_v1. WatchEvent ( object , type ) Event represents a single event to a watched resource. parameters object runtime.RawExtension - Object is: If Type is Added or Modified: the new state of the object. If Type is Deleted: the state of the object immediately before deletion. If Type is Error: *Status is recommended; other types may make sense depending on context. type str -","title":"WatchEvent"},{"location":"models/networking_v1/","text":"networking_v1 IPBlock class lightkube.models.networking_v1. IPBlock ( cidr , except_=None ) IPBlock describes a particular CIDR (Ex. \"192.168.1.1/24\",\"2001:db9::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule. parameters cidr str - CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\" except_ List[str] - (optional) Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\" Except values will be rejected if they are outside the CIDR range NetworkPolicy class lightkube.models.networking_v1. NetworkPolicy ( apiVersion=None , kind=None , metadata=None , spec=None ) NetworkPolicy describes what network traffic is allowed for a set of Pods parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec NetworkPolicySpec - (optional) Specification of the desired behavior for this NetworkPolicy. NetworkPolicyEgressRule class lightkube.models.networking_v1. NetworkPolicyEgressRule ( ports=None , to=None ) NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8 parameters ports NetworkPolicyPort - (optional) List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list. to NetworkPolicyPeer - (optional) List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list. NetworkPolicyIngressRule class lightkube.models.networking_v1. NetworkPolicyIngressRule ( from_=None , ports=None ) NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from. parameters from_ NetworkPolicyPeer - (optional) List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list. ports NetworkPolicyPort - (optional) List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list. NetworkPolicyList class lightkube.models.networking_v1. NetworkPolicyList ( items , apiVersion=None , kind=None , metadata=None ) NetworkPolicyList is a list of NetworkPolicy objects. parameters items NetworkPolicy - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info NetworkPolicyPeer class lightkube.models.networking_v1. NetworkPolicyPeer ( ipBlock=None , namespaceSelector=None , podSelector=None ) NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed parameters ipBlock IPBlock - (optional) IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be. namespaceSelector meta_v1.LabelSelector - (optional) Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces. If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector. podSelector meta_v1.LabelSelector - (optional) This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods. If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace. NetworkPolicyPort class lightkube.models.networking_v1. NetworkPolicyPort ( port=None , protocol=None ) NetworkPolicyPort describes a port to allow traffic on parameters port util_intstr.IntOrString - (optional) The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. protocol str - (optional) The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP. NetworkPolicySpec class lightkube.models.networking_v1. NetworkPolicySpec ( podSelector , egress=None , ingress=None , policyTypes=None ) NetworkPolicySpec provides the specification of a NetworkPolicy parameters podSelector meta_v1.LabelSelector - Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace. egress NetworkPolicyEgressRule - (optional) List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8 ingress NetworkPolicyIngressRule - (optional) List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default) policyTypes List[str] - (optional) List of rule types that the NetworkPolicy relates to. Valid options are \"Ingress\", \"Egress\", or \"Ingress,Egress\". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8","title":"networking_v1"},{"location":"models/networking_v1/#networking_v1","text":"","title":"networking_v1"},{"location":"models/networking_v1/#ipblock","text":"class lightkube.models.networking_v1. IPBlock ( cidr , except_=None ) IPBlock describes a particular CIDR (Ex. \"192.168.1.1/24\",\"2001:db9::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule. parameters cidr str - CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\" except_ List[str] - (optional) Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\" Except values will be rejected if they are outside the CIDR range","title":"IPBlock"},{"location":"models/networking_v1/#networkpolicy","text":"class lightkube.models.networking_v1. NetworkPolicy ( apiVersion=None , kind=None , metadata=None , spec=None ) NetworkPolicy describes what network traffic is allowed for a set of Pods parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec NetworkPolicySpec - (optional) Specification of the desired behavior for this NetworkPolicy.","title":"NetworkPolicy"},{"location":"models/networking_v1/#networkpolicyegressrule","text":"class lightkube.models.networking_v1. NetworkPolicyEgressRule ( ports=None , to=None ) NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8 parameters ports NetworkPolicyPort - (optional) List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list. to NetworkPolicyPeer - (optional) List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.","title":"NetworkPolicyEgressRule"},{"location":"models/networking_v1/#networkpolicyingressrule","text":"class lightkube.models.networking_v1. NetworkPolicyIngressRule ( from_=None , ports=None ) NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from. parameters from_ NetworkPolicyPeer - (optional) List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list. ports NetworkPolicyPort - (optional) List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.","title":"NetworkPolicyIngressRule"},{"location":"models/networking_v1/#networkpolicylist","text":"class lightkube.models.networking_v1. NetworkPolicyList ( items , apiVersion=None , kind=None , metadata=None ) NetworkPolicyList is a list of NetworkPolicy objects. parameters items NetworkPolicy - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"NetworkPolicyList"},{"location":"models/networking_v1/#networkpolicypeer","text":"class lightkube.models.networking_v1. NetworkPolicyPeer ( ipBlock=None , namespaceSelector=None , podSelector=None ) NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed parameters ipBlock IPBlock - (optional) IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be. namespaceSelector meta_v1.LabelSelector - (optional) Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces. If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector. podSelector meta_v1.LabelSelector - (optional) This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods. If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.","title":"NetworkPolicyPeer"},{"location":"models/networking_v1/#networkpolicyport","text":"class lightkube.models.networking_v1. NetworkPolicyPort ( port=None , protocol=None ) NetworkPolicyPort describes a port to allow traffic on parameters port util_intstr.IntOrString - (optional) The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. protocol str - (optional) The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.","title":"NetworkPolicyPort"},{"location":"models/networking_v1/#networkpolicyspec","text":"class lightkube.models.networking_v1. NetworkPolicySpec ( podSelector , egress=None , ingress=None , policyTypes=None ) NetworkPolicySpec provides the specification of a NetworkPolicy parameters podSelector meta_v1.LabelSelector - Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace. egress NetworkPolicyEgressRule - (optional) List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8 ingress NetworkPolicyIngressRule - (optional) List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default) policyTypes List[str] - (optional) List of rule types that the NetworkPolicy relates to. Valid options are \"Ingress\", \"Egress\", or \"Ingress,Egress\". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ \"Egress\" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include \"Egress\" (since such a policy would not include an Egress section and would otherwise default to just [ \"Ingress\" ]). This field is beta-level in 1.8","title":"NetworkPolicySpec"},{"location":"models/networking_v1beta1/","text":"networking_v1beta1 HTTPIngressPath class lightkube.models.networking_v1beta1. HTTPIngressPath ( backend , path=None , pathType=None ) HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend. parameters backend IngressBackend - Backend defines the referenced service endpoint to which the traffic will be forwarded to. path str - (optional) Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched. pathType str - (optional) PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is done on a path element by element basis. A path element refers is the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). ImplementationSpecific: Interpretation of the Path matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types. Implementations are required to support all path types. Defaults to ImplementationSpecific. HTTPIngressRuleValue class lightkube.models.networking_v1beta1. HTTPIngressRuleValue ( paths ) HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http:// / ? -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'. parameters paths HTTPIngressPath - A collection of paths that map requests to backends. Ingress class lightkube.models.networking_v1beta1. Ingress ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec IngressSpec - (optional) Spec is the desired state of the Ingress. More info status IngressStatus - (optional) Status is the current state of the Ingress. More info IngressBackend class lightkube.models.networking_v1beta1. IngressBackend ( resource=None , serviceName=None , servicePort=None ) IngressBackend describes all endpoints for a given service and port. parameters resource core_v1.TypedLocalObjectReference - (optional) Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified. serviceName str - (optional) Specifies the name of the referenced service. servicePort util_intstr.IntOrString - (optional) Specifies the port of the referenced service. IngressClass class lightkube.models.networking_v1beta1. IngressClass ( apiVersion=None , kind=None , metadata=None , spec=None ) IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The ingressclass.kubernetes.io/is-default-class annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec IngressClassSpec - (optional) Spec is the desired state of the IngressClass. More info IngressClassList class lightkube.models.networking_v1beta1. IngressClassList ( items , apiVersion=None , kind=None , metadata=None ) IngressClassList is a collection of IngressClasses. parameters items IngressClass - Items is the list of IngressClasses. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. IngressClassSpec class lightkube.models.networking_v1beta1. IngressClassSpec ( controller=None , parameters=None ) IngressClassSpec provides information about the class of an Ingress. parameters controller str - (optional) Controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable. parameters core_v1.TypedLocalObjectReference - (optional) Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters. IngressList class lightkube.models.networking_v1beta1. IngressList ( items , apiVersion=None , kind=None , metadata=None ) IngressList is a collection of Ingress. parameters items Ingress - Items is the list of Ingress. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. More info IngressRule class lightkube.models.networking_v1beta1. IngressRule ( host=None , http=None ) IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue. parameters host str - (optional) Host is the fully qualified domain name of a network host, as defined by RFC Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress. The : delimiter is not respected because ports are not allowed. Currently the port of an Ingress is implicitly :80 for http and :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue. Host can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \" .foo.com\"). The wildcard character ' ' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule. http HTTPIngressRuleValue - (optional) IngressSpec class lightkube.models.networking_v1beta1. IngressSpec ( backend=None , ingressClassName=None , rules=None , tls=None ) IngressSpec describes the Ingress the user wishes to exist. parameters backend IngressBackend - (optional) A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default. ingressClassName str - (optional) IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated kubernetes.io/ingress.class annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation. rules IngressRule - (optional) A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend. tls IngressTLS - (optional) TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI. IngressStatus class lightkube.models.networking_v1beta1. IngressStatus ( loadBalancer=None ) IngressStatus describe the current state of the Ingress. parameters loadBalancer core_v1.LoadBalancerStatus - (optional) LoadBalancer contains the current status of the load-balancer. IngressTLS class lightkube.models.networking_v1beta1. IngressTLS ( hosts=None , secretName=None ) IngressTLS describes the transport layer security associated with an Ingress. parameters hosts List[str] - (optional) Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified. secretName str - (optional) SecretName is the name of the secret used to terminate TLS traffic on port Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.","title":"networking_v1beta1"},{"location":"models/networking_v1beta1/#networking_v1beta1","text":"","title":"networking_v1beta1"},{"location":"models/networking_v1beta1/#httpingresspath","text":"class lightkube.models.networking_v1beta1. HTTPIngressPath ( backend , path=None , pathType=None ) HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend. parameters backend IngressBackend - Backend defines the referenced service endpoint to which the traffic will be forwarded to. path str - (optional) Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched. pathType str - (optional) PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is done on a path element by element basis. A path element refers is the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). ImplementationSpecific: Interpretation of the Path matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types. Implementations are required to support all path types. Defaults to ImplementationSpecific.","title":"HTTPIngressPath"},{"location":"models/networking_v1beta1/#httpingressrulevalue","text":"class lightkube.models.networking_v1beta1. HTTPIngressRuleValue ( paths ) HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http:// / ? -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'. parameters paths HTTPIngressPath - A collection of paths that map requests to backends.","title":"HTTPIngressRuleValue"},{"location":"models/networking_v1beta1/#ingress","text":"class lightkube.models.networking_v1beta1. Ingress ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec IngressSpec - (optional) Spec is the desired state of the Ingress. More info status IngressStatus - (optional) Status is the current state of the Ingress. More info","title":"Ingress"},{"location":"models/networking_v1beta1/#ingressbackend","text":"class lightkube.models.networking_v1beta1. IngressBackend ( resource=None , serviceName=None , servicePort=None ) IngressBackend describes all endpoints for a given service and port. parameters resource core_v1.TypedLocalObjectReference - (optional) Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified. serviceName str - (optional) Specifies the name of the referenced service. servicePort util_intstr.IntOrString - (optional) Specifies the port of the referenced service.","title":"IngressBackend"},{"location":"models/networking_v1beta1/#ingressclass","text":"class lightkube.models.networking_v1beta1. IngressClass ( apiVersion=None , kind=None , metadata=None , spec=None ) IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The ingressclass.kubernetes.io/is-default-class annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec IngressClassSpec - (optional) Spec is the desired state of the IngressClass. More info","title":"IngressClass"},{"location":"models/networking_v1beta1/#ingressclasslist","text":"class lightkube.models.networking_v1beta1. IngressClassList ( items , apiVersion=None , kind=None , metadata=None ) IngressClassList is a collection of IngressClasses. parameters items IngressClass - Items is the list of IngressClasses. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata.","title":"IngressClassList"},{"location":"models/networking_v1beta1/#ingressclassspec","text":"class lightkube.models.networking_v1beta1. IngressClassSpec ( controller=None , parameters=None ) IngressClassSpec provides information about the class of an Ingress. parameters controller str - (optional) Controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable. parameters core_v1.TypedLocalObjectReference - (optional) Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.","title":"IngressClassSpec"},{"location":"models/networking_v1beta1/#ingresslist","text":"class lightkube.models.networking_v1beta1. IngressList ( items , apiVersion=None , kind=None , metadata=None ) IngressList is a collection of Ingress. parameters items Ingress - Items is the list of Ingress. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. More info","title":"IngressList"},{"location":"models/networking_v1beta1/#ingressrule","text":"class lightkube.models.networking_v1beta1. IngressRule ( host=None , http=None ) IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue. parameters host str - (optional) Host is the fully qualified domain name of a network host, as defined by RFC Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress. The : delimiter is not respected because ports are not allowed. Currently the port of an Ingress is implicitly :80 for http and :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue. Host can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \" .foo.com\"). The wildcard character ' ' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule. http HTTPIngressRuleValue - (optional)","title":"IngressRule"},{"location":"models/networking_v1beta1/#ingressspec","text":"class lightkube.models.networking_v1beta1. IngressSpec ( backend=None , ingressClassName=None , rules=None , tls=None ) IngressSpec describes the Ingress the user wishes to exist. parameters backend IngressBackend - (optional) A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default. ingressClassName str - (optional) IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated kubernetes.io/ingress.class annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation. rules IngressRule - (optional) A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend. tls IngressTLS - (optional) TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.","title":"IngressSpec"},{"location":"models/networking_v1beta1/#ingressstatus","text":"class lightkube.models.networking_v1beta1. IngressStatus ( loadBalancer=None ) IngressStatus describe the current state of the Ingress. parameters loadBalancer core_v1.LoadBalancerStatus - (optional) LoadBalancer contains the current status of the load-balancer.","title":"IngressStatus"},{"location":"models/networking_v1beta1/#ingresstls","text":"class lightkube.models.networking_v1beta1. IngressTLS ( hosts=None , secretName=None ) IngressTLS describes the transport layer security associated with an Ingress. parameters hosts List[str] - (optional) Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified. secretName str - (optional) SecretName is the name of the secret used to terminate TLS traffic on port Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.","title":"IngressTLS"},{"location":"models/node_v1alpha1/","text":"node_v1alpha1 Overhead class lightkube.models.node_v1alpha1. Overhead ( podFixed=None ) Overhead structure represents the resource overhead associated with running a pod. parameters podFixed dict - (optional) PodFixed represents the fixed resource overhead associated with running a pod. RuntimeClass class lightkube.models.node_v1alpha1. RuntimeClass ( spec , apiVersion=None , kind=None , metadata=None ) RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod. For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md parameters spec RuntimeClassSpec - Specification of the RuntimeClass More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) More info RuntimeClassList class lightkube.models.node_v1alpha1. RuntimeClassList ( items , apiVersion=None , kind=None , metadata=None ) RuntimeClassList is a list of RuntimeClass objects. parameters items RuntimeClass - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info RuntimeClassSpec class lightkube.models.node_v1alpha1. RuntimeClassSpec ( runtimeHandler , overhead=None , scheduling=None ) RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are required to describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as any other components that need to understand how the pod will be run. The RuntimeClassSpec is immutable. parameters runtimeHandler str - RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration. It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable. overhead Overhead - (optional) Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature. scheduling Scheduling - (optional) Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes. Scheduling class lightkube.models.node_v1alpha1. Scheduling ( nodeSelector=None , tolerations=None ) Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass. parameters nodeSelector dict - (optional) nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission. tolerations core_v1.Toleration - (optional) tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.","title":"node_v1alpha1"},{"location":"models/node_v1alpha1/#node_v1alpha1","text":"","title":"node_v1alpha1"},{"location":"models/node_v1alpha1/#overhead","text":"class lightkube.models.node_v1alpha1. Overhead ( podFixed=None ) Overhead structure represents the resource overhead associated with running a pod. parameters podFixed dict - (optional) PodFixed represents the fixed resource overhead associated with running a pod.","title":"Overhead"},{"location":"models/node_v1alpha1/#runtimeclass","text":"class lightkube.models.node_v1alpha1. RuntimeClass ( spec , apiVersion=None , kind=None , metadata=None ) RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod. For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md parameters spec RuntimeClassSpec - Specification of the RuntimeClass More info apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) More info","title":"RuntimeClass"},{"location":"models/node_v1alpha1/#runtimeclasslist","text":"class lightkube.models.node_v1alpha1. RuntimeClassList ( items , apiVersion=None , kind=None , metadata=None ) RuntimeClassList is a list of RuntimeClass objects. parameters items RuntimeClass - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"RuntimeClassList"},{"location":"models/node_v1alpha1/#runtimeclassspec","text":"class lightkube.models.node_v1alpha1. RuntimeClassSpec ( runtimeHandler , overhead=None , scheduling=None ) RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are required to describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as any other components that need to understand how the pod will be run. The RuntimeClassSpec is immutable. parameters runtimeHandler str - RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration. It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable. overhead Overhead - (optional) Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature. scheduling Scheduling - (optional) Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.","title":"RuntimeClassSpec"},{"location":"models/node_v1alpha1/#scheduling","text":"class lightkube.models.node_v1alpha1. Scheduling ( nodeSelector=None , tolerations=None ) Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass. parameters nodeSelector dict - (optional) nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission. tolerations core_v1.Toleration - (optional) tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.","title":"Scheduling"},{"location":"models/node_v1beta1/","text":"node_v1beta1 Overhead class lightkube.models.node_v1beta1. Overhead ( podFixed=None ) Overhead structure represents the resource overhead associated with running a pod. parameters podFixed dict - (optional) PodFixed represents the fixed resource overhead associated with running a pod. RuntimeClass class lightkube.models.node_v1beta1. RuntimeClass ( handler , apiVersion=None , kind=None , metadata=None , overhead=None , scheduling=None ) RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod. For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md parameters handler str - Handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration. It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must conform to the DNS Label (RFC 1123) requirements, and is immutable. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) More info overhead Overhead - (optional) Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature. scheduling Scheduling - (optional) Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes. RuntimeClassList class lightkube.models.node_v1beta1. RuntimeClassList ( items , apiVersion=None , kind=None , metadata=None ) RuntimeClassList is a list of RuntimeClass objects. parameters items RuntimeClass - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info Scheduling class lightkube.models.node_v1beta1. Scheduling ( nodeSelector=None , tolerations=None ) Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass. parameters nodeSelector dict - (optional) nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission. tolerations core_v1.Toleration - (optional) tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.","title":"node_v1beta1"},{"location":"models/node_v1beta1/#node_v1beta1","text":"","title":"node_v1beta1"},{"location":"models/node_v1beta1/#overhead","text":"class lightkube.models.node_v1beta1. Overhead ( podFixed=None ) Overhead structure represents the resource overhead associated with running a pod. parameters podFixed dict - (optional) PodFixed represents the fixed resource overhead associated with running a pod.","title":"Overhead"},{"location":"models/node_v1beta1/#runtimeclass","text":"class lightkube.models.node_v1beta1. RuntimeClass ( handler , apiVersion=None , kind=None , metadata=None , overhead=None , scheduling=None ) RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod. For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md parameters handler str - Handler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration. It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The Handler must conform to the DNS Label (RFC 1123) requirements, and is immutable. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) More info overhead Overhead - (optional) Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature. scheduling Scheduling - (optional) Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.","title":"RuntimeClass"},{"location":"models/node_v1beta1/#runtimeclasslist","text":"class lightkube.models.node_v1beta1. RuntimeClassList ( items , apiVersion=None , kind=None , metadata=None ) RuntimeClassList is a list of RuntimeClass objects. parameters items RuntimeClass - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"RuntimeClassList"},{"location":"models/node_v1beta1/#scheduling","text":"class lightkube.models.node_v1beta1. Scheduling ( nodeSelector=None , tolerations=None ) Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass. parameters nodeSelector dict - (optional) nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission. tolerations core_v1.Toleration - (optional) tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.","title":"Scheduling"},{"location":"models/policy_v1beta1/","text":"policy_v1beta1 AllowedCSIDriver class lightkube.models.policy_v1beta1. AllowedCSIDriver ( name ) AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used. parameters name str - Name is the registered name of the CSI driver AllowedFlexVolume class lightkube.models.policy_v1beta1. AllowedFlexVolume ( driver ) AllowedFlexVolume represents a single Flexvolume that is allowed to be used. parameters driver str - driver is the name of the Flexvolume driver. AllowedHostPath class lightkube.models.policy_v1beta1. AllowedHostPath ( pathPrefix=None , readOnly=None ) AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined. parameters pathPrefix str - (optional) pathPrefix is the path prefix that the host volume must match. It does not support * . Trailing slashes are trimmed when validating the path prefix with a host path. Examples: /foo would allow /foo , /foo/ and /foo/bar /foo would not allow /food or /etc/foo readOnly bool - (optional) when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly. Eviction class lightkube.models.policy_v1beta1. Eviction ( apiVersion=None , deleteOptions=None , kind=None , metadata=None ) Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod. A request to cause such an eviction is created by POSTing to .../pods/ /evictions. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info deleteOptions meta_v1.DeleteOptions - (optional) DeleteOptions may be provided kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) ObjectMeta describes the pod that is being evicted. FSGroupStrategyOptions class lightkube.models.policy_v1beta1. FSGroupStrategyOptions ( ranges=None , rule=None ) FSGroupStrategyOptions defines the strategy type and options used to create the strategy. parameters ranges IDRange - (optional) ranges are the allowed ranges of fs groups. If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs. rule str - (optional) rule is the strategy that will dictate what FSGroup is used in the SecurityContext. HostPortRange class lightkube.models.policy_v1beta1. HostPortRange ( max , min ) HostPortRange defines a range of host ports that will be enabled by a policy for pods to use. It requires both the start and end to be defined. parameters max int - max is the end of the range, inclusive. min int - min is the start of the range, inclusive. IDRange class lightkube.models.policy_v1beta1. IDRange ( max , min ) IDRange provides a min/max of an allowed range of IDs. parameters max int - max is the end of the range, inclusive. min int - min is the start of the range, inclusive. PodDisruptionBudget class lightkube.models.policy_v1beta1. PodDisruptionBudget ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec PodDisruptionBudgetSpec - (optional) Specification of the desired behavior of the PodDisruptionBudget. status PodDisruptionBudgetStatus - (optional) Most recently observed status of the PodDisruptionBudget. PodDisruptionBudgetList class lightkube.models.policy_v1beta1. PodDisruptionBudgetList ( items , apiVersion=None , kind=None , metadata=None ) PodDisruptionBudgetList is a collection of PodDisruptionBudgets. parameters items PodDisruptionBudget - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) PodDisruptionBudgetSpec class lightkube.models.policy_v1beta1. PodDisruptionBudgetSpec ( maxUnavailable=None , minAvailable=None , selector=None ) PodDisruptionBudgetSpec is a description of a PodDisruptionBudget. parameters maxUnavailable util_intstr.IntOrString - (optional) An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\". minAvailable util_intstr.IntOrString - (optional) An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod. So for example you can prevent all voluntary evictions by specifying \"100%\". selector meta_v1.LabelSelector - (optional) Label query over pods whose evictions are managed by the disruption budget. PodDisruptionBudgetStatus class lightkube.models.policy_v1beta1. PodDisruptionBudgetStatus ( currentHealthy , desiredHealthy , disruptionsAllowed , expectedPods , disruptedPods=None , observedGeneration=None ) PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system. parameters currentHealthy int - current number of healthy pods desiredHealthy int - minimum desired number of healthy pods disruptionsAllowed int - Number of pod disruptions that are currently allowed. expectedPods int - total number of pods counted by this disruption budget disruptedPods dict - (optional) DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions. observedGeneration int - (optional) Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation. PodSecurityPolicy class lightkube.models.policy_v1beta1. PodSecurityPolicy ( apiVersion=None , kind=None , metadata=None , spec=None ) PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec PodSecurityPolicySpec - (optional) spec defines the policy enforced. PodSecurityPolicyList class lightkube.models.policy_v1beta1. PodSecurityPolicyList ( items , apiVersion=None , kind=None , metadata=None ) PodSecurityPolicyList is a list of PodSecurityPolicy objects. parameters items PodSecurityPolicy - items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info PodSecurityPolicySpec class lightkube.models.policy_v1beta1. PodSecurityPolicySpec ( fsGroup , runAsUser , seLinux , supplementalGroups , allowPrivilegeEscalation=None , allowedCSIDrivers=None , allowedCapabilities=None , allowedFlexVolumes=None , allowedHostPaths=None , allowedProcMountTypes=None , allowedUnsafeSysctls=None , defaultAddCapabilities=None , defaultAllowPrivilegeEscalation=None , forbiddenSysctls=None , hostIPC=None , hostNetwork=None , hostPID=None , hostPorts=None , privileged=None , readOnlyRootFilesystem=None , requiredDropCapabilities=None , runAsGroup=None , runtimeClass=None , volumes=None ) PodSecurityPolicySpec defines the policy enforced. parameters fsGroup FSGroupStrategyOptions - fsGroup is the strategy that will dictate what fs group is used by the SecurityContext. runAsUser RunAsUserStrategyOptions - runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set. seLinux SELinuxStrategyOptions - seLinux is the strategy that will dictate the allowable labels that may be set. supplementalGroups SupplementalGroupsStrategyOptions - supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext. allowPrivilegeEscalation bool - (optional) allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true. allowedCSIDrivers AllowedCSIDriver - (optional) AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate. allowedCapabilities List[str] - (optional) allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities. allowedFlexVolumes AllowedFlexVolume - (optional) allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This parameter is effective only when the usage of the Flexvolumes is allowed in the \"volumes\" field. allowedHostPaths AllowedHostPath - (optional) allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used. allowedProcMountTypes List[str] - (optional) AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled. allowedUnsafeSysctls List[str] - (optional) allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \" \" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection. Examples: e.g. \"foo/ \" allows \"foo/bar\", \"foo/baz\", etc. e.g. \"foo. \" allows \"foo.bar\", \"foo.baz\", etc. defaultAddCapabilities List[str] - (optional) defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability. You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list. defaultAllowPrivilegeEscalation bool - (optional) defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process. forbiddenSysctls List[str] - (optional) forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \" \" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden. Examples: e.g. \"foo/ \" forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo. \" forbids \"foo.bar\", \"foo.baz\", etc. hostIPC bool - (optional) hostIPC determines if the policy allows the use of HostIPC in the pod spec. hostNetwork bool - (optional) hostNetwork determines if the policy allows the use of HostNetwork in the pod spec. hostPID bool - (optional) hostPID determines if the policy allows the use of HostPID in the pod spec. hostPorts HostPortRange - (optional) hostPorts determines which host port ranges are allowed to be exposed. privileged bool - (optional) privileged determines if a pod can request to be run as privileged. readOnlyRootFilesystem bool - (optional) readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to. requiredDropCapabilities List[str] - (optional) requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped and cannot be added. runAsGroup RunAsGroupStrategyOptions - (optional) RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled. runtimeClass RuntimeClassStrategyOptions - (optional) runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled. volumes List[str] - (optional) volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'. RunAsGroupStrategyOptions class lightkube.models.policy_v1beta1. RunAsGroupStrategyOptions ( rule , ranges=None ) RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy. parameters rule str - rule is the strategy that will dictate the allowable RunAsGroup values that may be set. ranges IDRange - (optional) ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs. RunAsUserStrategyOptions class lightkube.models.policy_v1beta1. RunAsUserStrategyOptions ( rule , ranges=None ) RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy. parameters rule str - rule is the strategy that will dictate the allowable RunAsUser values that may be set. ranges IDRange - (optional) ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs. RuntimeClassStrategyOptions class lightkube.models.policy_v1beta1. RuntimeClassStrategyOptions ( allowedRuntimeClassNames , defaultRuntimeClassName=None ) RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod. parameters allowedRuntimeClassNames List[str] - allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of \"*\" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset. defaultRuntimeClassName str - (optional) defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod. SELinuxStrategyOptions class lightkube.models.policy_v1beta1. SELinuxStrategyOptions ( rule , seLinuxOptions=None ) SELinuxStrategyOptions defines the strategy type and any options used to create the strategy. parameters rule str - rule is the strategy that will dictate the allowable labels that may be set. seLinuxOptions core_v1.SELinuxOptions - (optional) seLinuxOptions required to run as; required for MustRunAs More info SupplementalGroupsStrategyOptions class lightkube.models.policy_v1beta1. SupplementalGroupsStrategyOptions ( ranges=None , rule=None ) SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy. parameters ranges IDRange - (optional) ranges are the allowed ranges of supplemental groups. If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs. rule str - (optional) rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.","title":"policy_v1beta1"},{"location":"models/policy_v1beta1/#policy_v1beta1","text":"","title":"policy_v1beta1"},{"location":"models/policy_v1beta1/#allowedcsidriver","text":"class lightkube.models.policy_v1beta1. AllowedCSIDriver ( name ) AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used. parameters name str - Name is the registered name of the CSI driver","title":"AllowedCSIDriver"},{"location":"models/policy_v1beta1/#allowedflexvolume","text":"class lightkube.models.policy_v1beta1. AllowedFlexVolume ( driver ) AllowedFlexVolume represents a single Flexvolume that is allowed to be used. parameters driver str - driver is the name of the Flexvolume driver.","title":"AllowedFlexVolume"},{"location":"models/policy_v1beta1/#allowedhostpath","text":"class lightkube.models.policy_v1beta1. AllowedHostPath ( pathPrefix=None , readOnly=None ) AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined. parameters pathPrefix str - (optional) pathPrefix is the path prefix that the host volume must match. It does not support * . Trailing slashes are trimmed when validating the path prefix with a host path. Examples: /foo would allow /foo , /foo/ and /foo/bar /foo would not allow /food or /etc/foo readOnly bool - (optional) when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.","title":"AllowedHostPath"},{"location":"models/policy_v1beta1/#eviction","text":"class lightkube.models.policy_v1beta1. Eviction ( apiVersion=None , deleteOptions=None , kind=None , metadata=None ) Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod. A request to cause such an eviction is created by POSTing to .../pods/ /evictions. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info deleteOptions meta_v1.DeleteOptions - (optional) DeleteOptions may be provided kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) ObjectMeta describes the pod that is being evicted.","title":"Eviction"},{"location":"models/policy_v1beta1/#fsgroupstrategyoptions","text":"class lightkube.models.policy_v1beta1. FSGroupStrategyOptions ( ranges=None , rule=None ) FSGroupStrategyOptions defines the strategy type and options used to create the strategy. parameters ranges IDRange - (optional) ranges are the allowed ranges of fs groups. If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs. rule str - (optional) rule is the strategy that will dictate what FSGroup is used in the SecurityContext.","title":"FSGroupStrategyOptions"},{"location":"models/policy_v1beta1/#hostportrange","text":"class lightkube.models.policy_v1beta1. HostPortRange ( max , min ) HostPortRange defines a range of host ports that will be enabled by a policy for pods to use. It requires both the start and end to be defined. parameters max int - max is the end of the range, inclusive. min int - min is the start of the range, inclusive.","title":"HostPortRange"},{"location":"models/policy_v1beta1/#idrange","text":"class lightkube.models.policy_v1beta1. IDRange ( max , min ) IDRange provides a min/max of an allowed range of IDs. parameters max int - max is the end of the range, inclusive. min int - min is the start of the range, inclusive.","title":"IDRange"},{"location":"models/policy_v1beta1/#poddisruptionbudget","text":"class lightkube.models.policy_v1beta1. PodDisruptionBudget ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec PodDisruptionBudgetSpec - (optional) Specification of the desired behavior of the PodDisruptionBudget. status PodDisruptionBudgetStatus - (optional) Most recently observed status of the PodDisruptionBudget.","title":"PodDisruptionBudget"},{"location":"models/policy_v1beta1/#poddisruptionbudgetlist","text":"class lightkube.models.policy_v1beta1. PodDisruptionBudgetList ( items , apiVersion=None , kind=None , metadata=None ) PodDisruptionBudgetList is a collection of PodDisruptionBudgets. parameters items PodDisruptionBudget - apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional)","title":"PodDisruptionBudgetList"},{"location":"models/policy_v1beta1/#poddisruptionbudgetspec","text":"class lightkube.models.policy_v1beta1. PodDisruptionBudgetSpec ( maxUnavailable=None , minAvailable=None , selector=None ) PodDisruptionBudgetSpec is a description of a PodDisruptionBudget. parameters maxUnavailable util_intstr.IntOrString - (optional) An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\". minAvailable util_intstr.IntOrString - (optional) An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod. So for example you can prevent all voluntary evictions by specifying \"100%\". selector meta_v1.LabelSelector - (optional) Label query over pods whose evictions are managed by the disruption budget.","title":"PodDisruptionBudgetSpec"},{"location":"models/policy_v1beta1/#poddisruptionbudgetstatus","text":"class lightkube.models.policy_v1beta1. PodDisruptionBudgetStatus ( currentHealthy , desiredHealthy , disruptionsAllowed , expectedPods , disruptedPods=None , observedGeneration=None ) PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system. parameters currentHealthy int - current number of healthy pods desiredHealthy int - minimum desired number of healthy pods disruptionsAllowed int - Number of pod disruptions that are currently allowed. expectedPods int - total number of pods counted by this disruption budget disruptedPods dict - (optional) DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions. observedGeneration int - (optional) Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.","title":"PodDisruptionBudgetStatus"},{"location":"models/policy_v1beta1/#podsecuritypolicy","text":"class lightkube.models.policy_v1beta1. PodSecurityPolicy ( apiVersion=None , kind=None , metadata=None , spec=None ) PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info spec PodSecurityPolicySpec - (optional) spec defines the policy enforced.","title":"PodSecurityPolicy"},{"location":"models/policy_v1beta1/#podsecuritypolicylist","text":"class lightkube.models.policy_v1beta1. PodSecurityPolicyList ( items , apiVersion=None , kind=None , metadata=None ) PodSecurityPolicyList is a list of PodSecurityPolicy objects. parameters items PodSecurityPolicy - items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"PodSecurityPolicyList"},{"location":"models/policy_v1beta1/#podsecuritypolicyspec","text":"class lightkube.models.policy_v1beta1. PodSecurityPolicySpec ( fsGroup , runAsUser , seLinux , supplementalGroups , allowPrivilegeEscalation=None , allowedCSIDrivers=None , allowedCapabilities=None , allowedFlexVolumes=None , allowedHostPaths=None , allowedProcMountTypes=None , allowedUnsafeSysctls=None , defaultAddCapabilities=None , defaultAllowPrivilegeEscalation=None , forbiddenSysctls=None , hostIPC=None , hostNetwork=None , hostPID=None , hostPorts=None , privileged=None , readOnlyRootFilesystem=None , requiredDropCapabilities=None , runAsGroup=None , runtimeClass=None , volumes=None ) PodSecurityPolicySpec defines the policy enforced. parameters fsGroup FSGroupStrategyOptions - fsGroup is the strategy that will dictate what fs group is used by the SecurityContext. runAsUser RunAsUserStrategyOptions - runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set. seLinux SELinuxStrategyOptions - seLinux is the strategy that will dictate the allowable labels that may be set. supplementalGroups SupplementalGroupsStrategyOptions - supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext. allowPrivilegeEscalation bool - (optional) allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true. allowedCSIDrivers AllowedCSIDriver - (optional) AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate. allowedCapabilities List[str] - (optional) allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities. allowedFlexVolumes AllowedFlexVolume - (optional) allowedFlexVolumes is a whitelist of allowed Flexvolumes. Empty or nil indicates that all Flexvolumes may be used. This parameter is effective only when the usage of the Flexvolumes is allowed in the \"volumes\" field. allowedHostPaths AllowedHostPath - (optional) allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used. allowedProcMountTypes List[str] - (optional) AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled. allowedUnsafeSysctls List[str] - (optional) allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \" \" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection. Examples: e.g. \"foo/ \" allows \"foo/bar\", \"foo/baz\", etc. e.g. \"foo. \" allows \"foo.bar\", \"foo.baz\", etc. defaultAddCapabilities List[str] - (optional) defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability. You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list. defaultAllowPrivilegeEscalation bool - (optional) defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process. forbiddenSysctls List[str] - (optional) forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \" \" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden. Examples: e.g. \"foo/ \" forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo. \" forbids \"foo.bar\", \"foo.baz\", etc. hostIPC bool - (optional) hostIPC determines if the policy allows the use of HostIPC in the pod spec. hostNetwork bool - (optional) hostNetwork determines if the policy allows the use of HostNetwork in the pod spec. hostPID bool - (optional) hostPID determines if the policy allows the use of HostPID in the pod spec. hostPorts HostPortRange - (optional) hostPorts determines which host port ranges are allowed to be exposed. privileged bool - (optional) privileged determines if a pod can request to be run as privileged. readOnlyRootFilesystem bool - (optional) readOnlyRootFilesystem when set to true will force containers to run with a read only root file system. If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to. requiredDropCapabilities List[str] - (optional) requiredDropCapabilities are the capabilities that will be dropped from the container. These are required to be dropped and cannot be added. runAsGroup RunAsGroupStrategyOptions - (optional) RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled. runtimeClass RuntimeClassStrategyOptions - (optional) runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled. volumes List[str] - (optional) volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.","title":"PodSecurityPolicySpec"},{"location":"models/policy_v1beta1/#runasgroupstrategyoptions","text":"class lightkube.models.policy_v1beta1. RunAsGroupStrategyOptions ( rule , ranges=None ) RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy. parameters rule str - rule is the strategy that will dictate the allowable RunAsGroup values that may be set. ranges IDRange - (optional) ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.","title":"RunAsGroupStrategyOptions"},{"location":"models/policy_v1beta1/#runasuserstrategyoptions","text":"class lightkube.models.policy_v1beta1. RunAsUserStrategyOptions ( rule , ranges=None ) RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy. parameters rule str - rule is the strategy that will dictate the allowable RunAsUser values that may be set. ranges IDRange - (optional) ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.","title":"RunAsUserStrategyOptions"},{"location":"models/policy_v1beta1/#runtimeclassstrategyoptions","text":"class lightkube.models.policy_v1beta1. RuntimeClassStrategyOptions ( allowedRuntimeClassNames , defaultRuntimeClassName=None ) RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod. parameters allowedRuntimeClassNames List[str] - allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of \"*\" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset. defaultRuntimeClassName str - (optional) defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.","title":"RuntimeClassStrategyOptions"},{"location":"models/policy_v1beta1/#selinuxstrategyoptions","text":"class lightkube.models.policy_v1beta1. SELinuxStrategyOptions ( rule , seLinuxOptions=None ) SELinuxStrategyOptions defines the strategy type and any options used to create the strategy. parameters rule str - rule is the strategy that will dictate the allowable labels that may be set. seLinuxOptions core_v1.SELinuxOptions - (optional) seLinuxOptions required to run as; required for MustRunAs More info","title":"SELinuxStrategyOptions"},{"location":"models/policy_v1beta1/#supplementalgroupsstrategyoptions","text":"class lightkube.models.policy_v1beta1. SupplementalGroupsStrategyOptions ( ranges=None , rule=None ) SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy. parameters ranges IDRange - (optional) ranges are the allowed ranges of supplemental groups. If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs. rule str - (optional) rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.","title":"SupplementalGroupsStrategyOptions"},{"location":"models/rbac_v1/","text":"rbac_v1 AggregationRule class lightkube.models.rbac_v1. AggregationRule ( clusterRoleSelectors=None ) AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole parameters clusterRoleSelectors meta_v1.LabelSelector - (optional) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added ClusterRole class lightkube.models.rbac_v1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. parameters aggregationRule AggregationRule - (optional) AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this ClusterRole ClusterRoleBinding class lightkube.models.rbac_v1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) ClusterRoleBinding references a ClusterRole, but not contain it. It can reference a ClusterRole in the global namespace, and adds who information via Subject. parameters roleRef RoleRef - RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to. ClusterRoleBindingList class lightkube.models.rbac_v1. ClusterRoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleBindingList is a collection of ClusterRoleBindings parameters items ClusterRoleBinding - Items is a list of ClusterRoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. ClusterRoleList class lightkube.models.rbac_v1. ClusterRoleList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleList is a collection of ClusterRoles parameters items ClusterRole - Items is a list of ClusterRoles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. PolicyRule class lightkube.models.rbac_v1. PolicyRule ( verbs , apiGroups=None , nonResourceURLs=None , resourceNames=None , resources=None ) PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to. parameters verbs List[str] - Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds. apiGroups List[str] - (optional) APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. nonResourceURLs List[str] - (optional) NonResourceURLs is a set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"), but not both. resourceNames List[str] - (optional) ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed. resources List[str] - (optional) Resources is a list of resources this rule applies to. ResourceAll represents all resources. Role class lightkube.models.rbac_v1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this Role RoleBinding class lightkube.models.rbac_v1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) RoleBinding references a role, but does not contain it. It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. parameters roleRef RoleRef - RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to. RoleBindingList class lightkube.models.rbac_v1. RoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) RoleBindingList is a collection of RoleBindings parameters items RoleBinding - Items is a list of RoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. RoleList class lightkube.models.rbac_v1. RoleList ( items , apiVersion=None , kind=None , metadata=None ) RoleList is a collection of Roles parameters items Role - Items is a list of Roles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. RoleRef class lightkube.models.rbac_v1. RoleRef ( apiGroup , kind , name ) RoleRef contains information that points to the role being used parameters apiGroup str - APIGroup is the group for the resource being referenced kind str - Kind is the type of resource being referenced name str - Name is the name of resource being referenced Subject class lightkube.models.rbac_v1. Subject ( kind , name , apiGroup=None , namespace=None ) Subject contains a reference to the object or user identities a role binding applies to. This can either hold a direct API object reference, or a value for non-objects such as user and group names. parameters kind str - Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error. name str - Name of the object being referenced. apiGroup str - (optional) APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects. namespace str - (optional) Namespace of the referenced object. If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.","title":"rbac_v1"},{"location":"models/rbac_v1/#rbac_v1","text":"","title":"rbac_v1"},{"location":"models/rbac_v1/#aggregationrule","text":"class lightkube.models.rbac_v1. AggregationRule ( clusterRoleSelectors=None ) AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole parameters clusterRoleSelectors meta_v1.LabelSelector - (optional) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added","title":"AggregationRule"},{"location":"models/rbac_v1/#clusterrole","text":"class lightkube.models.rbac_v1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. parameters aggregationRule AggregationRule - (optional) AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this ClusterRole","title":"ClusterRole"},{"location":"models/rbac_v1/#clusterrolebinding","text":"class lightkube.models.rbac_v1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) ClusterRoleBinding references a ClusterRole, but not contain it. It can reference a ClusterRole in the global namespace, and adds who information via Subject. parameters roleRef RoleRef - RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to.","title":"ClusterRoleBinding"},{"location":"models/rbac_v1/#clusterrolebindinglist","text":"class lightkube.models.rbac_v1. ClusterRoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleBindingList is a collection of ClusterRoleBindings parameters items ClusterRoleBinding - Items is a list of ClusterRoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"ClusterRoleBindingList"},{"location":"models/rbac_v1/#clusterrolelist","text":"class lightkube.models.rbac_v1. ClusterRoleList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleList is a collection of ClusterRoles parameters items ClusterRole - Items is a list of ClusterRoles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"ClusterRoleList"},{"location":"models/rbac_v1/#policyrule","text":"class lightkube.models.rbac_v1. PolicyRule ( verbs , apiGroups=None , nonResourceURLs=None , resourceNames=None , resources=None ) PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to. parameters verbs List[str] - Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds. apiGroups List[str] - (optional) APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. nonResourceURLs List[str] - (optional) NonResourceURLs is a set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"), but not both. resourceNames List[str] - (optional) ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed. resources List[str] - (optional) Resources is a list of resources this rule applies to. ResourceAll represents all resources.","title":"PolicyRule"},{"location":"models/rbac_v1/#role","text":"class lightkube.models.rbac_v1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this Role","title":"Role"},{"location":"models/rbac_v1/#rolebinding","text":"class lightkube.models.rbac_v1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) RoleBinding references a role, but does not contain it. It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. parameters roleRef RoleRef - RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to.","title":"RoleBinding"},{"location":"models/rbac_v1/#rolebindinglist","text":"class lightkube.models.rbac_v1. RoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) RoleBindingList is a collection of RoleBindings parameters items RoleBinding - Items is a list of RoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"RoleBindingList"},{"location":"models/rbac_v1/#rolelist","text":"class lightkube.models.rbac_v1. RoleList ( items , apiVersion=None , kind=None , metadata=None ) RoleList is a collection of Roles parameters items Role - Items is a list of Roles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"RoleList"},{"location":"models/rbac_v1/#roleref","text":"class lightkube.models.rbac_v1. RoleRef ( apiGroup , kind , name ) RoleRef contains information that points to the role being used parameters apiGroup str - APIGroup is the group for the resource being referenced kind str - Kind is the type of resource being referenced name str - Name is the name of resource being referenced","title":"RoleRef"},{"location":"models/rbac_v1/#subject","text":"class lightkube.models.rbac_v1. Subject ( kind , name , apiGroup=None , namespace=None ) Subject contains a reference to the object or user identities a role binding applies to. This can either hold a direct API object reference, or a value for non-objects such as user and group names. parameters kind str - Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error. name str - Name of the object being referenced. apiGroup str - (optional) APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects. namespace str - (optional) Namespace of the referenced object. If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.","title":"Subject"},{"location":"models/rbac_v1alpha1/","text":"rbac_v1alpha1 AggregationRule class lightkube.models.rbac_v1alpha1. AggregationRule ( clusterRoleSelectors=None ) AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole parameters clusterRoleSelectors meta_v1.LabelSelector - (optional) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added ClusterRole class lightkube.models.rbac_v1alpha1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.20. parameters aggregationRule AggregationRule - (optional) AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this ClusterRole ClusterRoleBinding class lightkube.models.rbac_v1alpha1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) ClusterRoleBinding references a ClusterRole, but not contain it. It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.20. parameters roleRef RoleRef - RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to. ClusterRoleBindingList class lightkube.models.rbac_v1alpha1. ClusterRoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindings, and will no longer be served in v1.20. parameters items ClusterRoleBinding - Items is a list of ClusterRoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. ClusterRoleList class lightkube.models.rbac_v1alpha1. ClusterRoleList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.20. parameters items ClusterRole - Items is a list of ClusterRoles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. PolicyRule class lightkube.models.rbac_v1alpha1. PolicyRule ( verbs , apiGroups=None , nonResourceURLs=None , resourceNames=None , resources=None ) PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to. parameters verbs List[str] - Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds. apiGroups List[str] - (optional) APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. nonResourceURLs List[str] - (optional) NonResourceURLs is a set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"), but not both. resourceNames List[str] - (optional) ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed. resources List[str] - (optional) Resources is a list of resources this rule applies to. ResourceAll represents all resources. Role class lightkube.models.rbac_v1alpha1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.20. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this Role RoleBinding class lightkube.models.rbac_v1alpha1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) RoleBinding references a role, but does not contain it. It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.20. parameters roleRef RoleRef - RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to. RoleBindingList class lightkube.models.rbac_v1alpha1. RoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.20. parameters items RoleBinding - Items is a list of RoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. RoleList class lightkube.models.rbac_v1alpha1. RoleList ( items , apiVersion=None , kind=None , metadata=None ) RoleList is a collection of Roles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.20. parameters items Role - Items is a list of Roles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. RoleRef class lightkube.models.rbac_v1alpha1. RoleRef ( apiGroup , kind , name ) RoleRef contains information that points to the role being used parameters apiGroup str - APIGroup is the group for the resource being referenced kind str - Kind is the type of resource being referenced name str - Name is the name of resource being referenced Subject class lightkube.models.rbac_v1alpha1. Subject ( kind , name , apiVersion=None , namespace=None ) Subject contains a reference to the object or user identities a role binding applies to. This can either hold a direct API object reference, or a value for non-objects such as user and group names. parameters kind str - Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error. name str - Name of the object being referenced. apiVersion str - (optional) APIVersion holds the API group and version of the referenced subject. Defaults to \"v1\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io/v1alpha1\" for User and Group subjects. namespace str - (optional) Namespace of the referenced object. If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.","title":"rbac_v1alpha1"},{"location":"models/rbac_v1alpha1/#rbac_v1alpha1","text":"","title":"rbac_v1alpha1"},{"location":"models/rbac_v1alpha1/#aggregationrule","text":"class lightkube.models.rbac_v1alpha1. AggregationRule ( clusterRoleSelectors=None ) AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole parameters clusterRoleSelectors meta_v1.LabelSelector - (optional) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added","title":"AggregationRule"},{"location":"models/rbac_v1alpha1/#clusterrole","text":"class lightkube.models.rbac_v1alpha1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.20. parameters aggregationRule AggregationRule - (optional) AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this ClusterRole","title":"ClusterRole"},{"location":"models/rbac_v1alpha1/#clusterrolebinding","text":"class lightkube.models.rbac_v1alpha1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) ClusterRoleBinding references a ClusterRole, but not contain it. It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.20. parameters roleRef RoleRef - RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to.","title":"ClusterRoleBinding"},{"location":"models/rbac_v1alpha1/#clusterrolebindinglist","text":"class lightkube.models.rbac_v1alpha1. ClusterRoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindings, and will no longer be served in v1.20. parameters items ClusterRoleBinding - Items is a list of ClusterRoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"ClusterRoleBindingList"},{"location":"models/rbac_v1alpha1/#clusterrolelist","text":"class lightkube.models.rbac_v1alpha1. ClusterRoleList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.20. parameters items ClusterRole - Items is a list of ClusterRoles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"ClusterRoleList"},{"location":"models/rbac_v1alpha1/#policyrule","text":"class lightkube.models.rbac_v1alpha1. PolicyRule ( verbs , apiGroups=None , nonResourceURLs=None , resourceNames=None , resources=None ) PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to. parameters verbs List[str] - Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds. apiGroups List[str] - (optional) APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. nonResourceURLs List[str] - (optional) NonResourceURLs is a set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"), but not both. resourceNames List[str] - (optional) ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed. resources List[str] - (optional) Resources is a list of resources this rule applies to. ResourceAll represents all resources.","title":"PolicyRule"},{"location":"models/rbac_v1alpha1/#role","text":"class lightkube.models.rbac_v1alpha1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.20. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this Role","title":"Role"},{"location":"models/rbac_v1alpha1/#rolebinding","text":"class lightkube.models.rbac_v1alpha1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) RoleBinding references a role, but does not contain it. It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.20. parameters roleRef RoleRef - RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to.","title":"RoleBinding"},{"location":"models/rbac_v1alpha1/#rolebindinglist","text":"class lightkube.models.rbac_v1alpha1. RoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.20. parameters items RoleBinding - Items is a list of RoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"RoleBindingList"},{"location":"models/rbac_v1alpha1/#rolelist","text":"class lightkube.models.rbac_v1alpha1. RoleList ( items , apiVersion=None , kind=None , metadata=None ) RoleList is a collection of Roles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.20. parameters items Role - Items is a list of Roles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"RoleList"},{"location":"models/rbac_v1alpha1/#roleref","text":"class lightkube.models.rbac_v1alpha1. RoleRef ( apiGroup , kind , name ) RoleRef contains information that points to the role being used parameters apiGroup str - APIGroup is the group for the resource being referenced kind str - Kind is the type of resource being referenced name str - Name is the name of resource being referenced","title":"RoleRef"},{"location":"models/rbac_v1alpha1/#subject","text":"class lightkube.models.rbac_v1alpha1. Subject ( kind , name , apiVersion=None , namespace=None ) Subject contains a reference to the object or user identities a role binding applies to. This can either hold a direct API object reference, or a value for non-objects such as user and group names. parameters kind str - Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error. name str - Name of the object being referenced. apiVersion str - (optional) APIVersion holds the API group and version of the referenced subject. Defaults to \"v1\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io/v1alpha1\" for User and Group subjects. namespace str - (optional) Namespace of the referenced object. If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.","title":"Subject"},{"location":"models/rbac_v1beta1/","text":"rbac_v1beta1 AggregationRule class lightkube.models.rbac_v1beta1. AggregationRule ( clusterRoleSelectors=None ) AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole parameters clusterRoleSelectors meta_v1.LabelSelector - (optional) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added ClusterRole class lightkube.models.rbac_v1beta1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.20. parameters aggregationRule AggregationRule - (optional) AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this ClusterRole ClusterRoleBinding class lightkube.models.rbac_v1beta1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) ClusterRoleBinding references a ClusterRole, but not contain it. It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.20. parameters roleRef RoleRef - RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to. ClusterRoleBindingList class lightkube.models.rbac_v1beta1. ClusterRoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be served in v1.20. parameters items ClusterRoleBinding - Items is a list of ClusterRoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. ClusterRoleList class lightkube.models.rbac_v1beta1. ClusterRoleList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.20. parameters items ClusterRole - Items is a list of ClusterRoles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. PolicyRule class lightkube.models.rbac_v1beta1. PolicyRule ( verbs , apiGroups=None , nonResourceURLs=None , resourceNames=None , resources=None ) PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to. parameters verbs List[str] - Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds. apiGroups List[str] - (optional) APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. nonResourceURLs List[str] - (optional) NonResourceURLs is a set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"), but not both. resourceNames List[str] - (optional) ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed. resources List[str] - (optional) Resources is a list of resources this rule applies to. ' ' represents all resources in the specified apiGroups. ' /foo' represents the subresource 'foo' for all resources in the specified apiGroups. Role class lightkube.models.rbac_v1beta1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.20. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this Role RoleBinding class lightkube.models.rbac_v1beta1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) RoleBinding references a role, but does not contain it. It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.20. parameters roleRef RoleRef - RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to. RoleBindingList class lightkube.models.rbac_v1beta1. RoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.20. parameters items RoleBinding - Items is a list of RoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. RoleList class lightkube.models.rbac_v1beta1. RoleList ( items , apiVersion=None , kind=None , metadata=None ) RoleList is a collection of Roles Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.20. parameters items Role - Items is a list of Roles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata. RoleRef class lightkube.models.rbac_v1beta1. RoleRef ( apiGroup , kind , name ) RoleRef contains information that points to the role being used parameters apiGroup str - APIGroup is the group for the resource being referenced kind str - Kind is the type of resource being referenced name str - Name is the name of resource being referenced Subject class lightkube.models.rbac_v1beta1. Subject ( kind , name , apiGroup=None , namespace=None ) Subject contains a reference to the object or user identities a role binding applies to. This can either hold a direct API object reference, or a value for non-objects such as user and group names. parameters kind str - Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error. name str - Name of the object being referenced. apiGroup str - (optional) APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects. namespace str - (optional) Namespace of the referenced object. If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.","title":"rbac_v1beta1"},{"location":"models/rbac_v1beta1/#rbac_v1beta1","text":"","title":"rbac_v1beta1"},{"location":"models/rbac_v1beta1/#aggregationrule","text":"class lightkube.models.rbac_v1beta1. AggregationRule ( clusterRoleSelectors=None ) AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole parameters clusterRoleSelectors meta_v1.LabelSelector - (optional) ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added","title":"AggregationRule"},{"location":"models/rbac_v1beta1/#clusterrole","text":"class lightkube.models.rbac_v1beta1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.20. parameters aggregationRule AggregationRule - (optional) AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this ClusterRole","title":"ClusterRole"},{"location":"models/rbac_v1beta1/#clusterrolebinding","text":"class lightkube.models.rbac_v1beta1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) ClusterRoleBinding references a ClusterRole, but not contain it. It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.20. parameters roleRef RoleRef - RoleRef can only reference a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to.","title":"ClusterRoleBinding"},{"location":"models/rbac_v1beta1/#clusterrolebindinglist","text":"class lightkube.models.rbac_v1beta1. ClusterRoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be served in v1.20. parameters items ClusterRoleBinding - Items is a list of ClusterRoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"ClusterRoleBindingList"},{"location":"models/rbac_v1beta1/#clusterrolelist","text":"class lightkube.models.rbac_v1beta1. ClusterRoleList ( items , apiVersion=None , kind=None , metadata=None ) ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.20. parameters items ClusterRole - Items is a list of ClusterRoles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"ClusterRoleList"},{"location":"models/rbac_v1beta1/#policyrule","text":"class lightkube.models.rbac_v1beta1. PolicyRule ( verbs , apiGroups=None , nonResourceURLs=None , resourceNames=None , resources=None ) PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to. parameters verbs List[str] - Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds. apiGroups List[str] - (optional) APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. nonResourceURLs List[str] - (optional) NonResourceURLs is a set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"), but not both. resourceNames List[str] - (optional) ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed. resources List[str] - (optional) Resources is a list of resources this rule applies to. ' ' represents all resources in the specified apiGroups. ' /foo' represents the subresource 'foo' for all resources in the specified apiGroups.","title":"PolicyRule"},{"location":"models/rbac_v1beta1/#role","text":"class lightkube.models.rbac_v1beta1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.20. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. rules PolicyRule - (optional) Rules holds all the PolicyRules for this Role","title":"Role"},{"location":"models/rbac_v1beta1/#rolebinding","text":"class lightkube.models.rbac_v1beta1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) RoleBinding references a role, but does not contain it. It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.20. parameters roleRef RoleRef - RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace. If the RoleRef cannot be resolved, the Authorizer must return an error. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. subjects Subject - (optional) Subjects holds references to the objects the role applies to.","title":"RoleBinding"},{"location":"models/rbac_v1beta1/#rolebindinglist","text":"class lightkube.models.rbac_v1beta1. RoleBindingList ( items , apiVersion=None , kind=None , metadata=None ) RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.20. parameters items RoleBinding - Items is a list of RoleBindings apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"RoleBindingList"},{"location":"models/rbac_v1beta1/#rolelist","text":"class lightkube.models.rbac_v1beta1. RoleList ( items , apiVersion=None , kind=None , metadata=None ) RoleList is a collection of Roles Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.20. parameters items Role - Items is a list of Roles apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard object's metadata.","title":"RoleList"},{"location":"models/rbac_v1beta1/#roleref","text":"class lightkube.models.rbac_v1beta1. RoleRef ( apiGroup , kind , name ) RoleRef contains information that points to the role being used parameters apiGroup str - APIGroup is the group for the resource being referenced kind str - Kind is the type of resource being referenced name str - Name is the name of resource being referenced","title":"RoleRef"},{"location":"models/rbac_v1beta1/#subject","text":"class lightkube.models.rbac_v1beta1. Subject ( kind , name , apiGroup=None , namespace=None ) Subject contains a reference to the object or user identities a role binding applies to. This can either hold a direct API object reference, or a value for non-objects such as user and group names. parameters kind str - Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error. name str - Name of the object being referenced. apiGroup str - (optional) APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects. namespace str - (optional) Namespace of the referenced object. If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.","title":"Subject"},{"location":"models/resource/","text":"resource Quantity","title":"resource"},{"location":"models/resource/#resource","text":"","title":"resource"},{"location":"models/resource/#quantity","text":"","title":"Quantity"},{"location":"models/runtime/","text":"runtime RawExtension","title":"runtime"},{"location":"models/runtime/#runtime","text":"","title":"runtime"},{"location":"models/runtime/#rawextension","text":"","title":"RawExtension"},{"location":"models/scheduling_v1/","text":"scheduling_v1 PriorityClass class lightkube.models.scheduling_v1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. parameters value int - The value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info description str - (optional) description is an arbitrary string that usually provides guidelines on when this priority class should be used. globalDefault bool - (optional) globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as globalDefault . However, if more than one PriorityClasses exists with their globalDefault field set to true, the smallest value of such global default PriorityClasses will be used as the default priority. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info preemptionPolicy str - (optional) PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature. PriorityClassList class lightkube.models.scheduling_v1. PriorityClassList ( items , apiVersion=None , kind=None , metadata=None ) PriorityClassList is a collection of priority classes. parameters items PriorityClass - items is the list of PriorityClasses apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"scheduling_v1"},{"location":"models/scheduling_v1/#scheduling_v1","text":"","title":"scheduling_v1"},{"location":"models/scheduling_v1/#priorityclass","text":"class lightkube.models.scheduling_v1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. parameters value int - The value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info description str - (optional) description is an arbitrary string that usually provides guidelines on when this priority class should be used. globalDefault bool - (optional) globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as globalDefault . However, if more than one PriorityClasses exists with their globalDefault field set to true, the smallest value of such global default PriorityClasses will be used as the default priority. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info preemptionPolicy str - (optional) PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.","title":"PriorityClass"},{"location":"models/scheduling_v1/#priorityclasslist","text":"class lightkube.models.scheduling_v1. PriorityClassList ( items , apiVersion=None , kind=None , metadata=None ) PriorityClassList is a collection of priority classes. parameters items PriorityClass - items is the list of PriorityClasses apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"PriorityClassList"},{"location":"models/scheduling_v1alpha1/","text":"scheduling_v1alpha1 PriorityClass class lightkube.models.scheduling_v1alpha1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) DEPRECATED - This group version of PriorityClass is deprecated by scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. parameters value int - The value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info description str - (optional) description is an arbitrary string that usually provides guidelines on when this priority class should be used. globalDefault bool - (optional) globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as globalDefault . However, if more than one PriorityClasses exists with their globalDefault field set to true, the smallest value of such global default PriorityClasses will be used as the default priority. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info preemptionPolicy str - (optional) PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature. PriorityClassList class lightkube.models.scheduling_v1alpha1. PriorityClassList ( items , apiVersion=None , kind=None , metadata=None ) PriorityClassList is a collection of priority classes. parameters items PriorityClass - items is the list of PriorityClasses apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"scheduling_v1alpha1"},{"location":"models/scheduling_v1alpha1/#scheduling_v1alpha1","text":"","title":"scheduling_v1alpha1"},{"location":"models/scheduling_v1alpha1/#priorityclass","text":"class lightkube.models.scheduling_v1alpha1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) DEPRECATED - This group version of PriorityClass is deprecated by scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. parameters value int - The value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info description str - (optional) description is an arbitrary string that usually provides guidelines on when this priority class should be used. globalDefault bool - (optional) globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as globalDefault . However, if more than one PriorityClasses exists with their globalDefault field set to true, the smallest value of such global default PriorityClasses will be used as the default priority. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info preemptionPolicy str - (optional) PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.","title":"PriorityClass"},{"location":"models/scheduling_v1alpha1/#priorityclasslist","text":"class lightkube.models.scheduling_v1alpha1. PriorityClassList ( items , apiVersion=None , kind=None , metadata=None ) PriorityClassList is a collection of priority classes. parameters items PriorityClass - items is the list of PriorityClasses apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"PriorityClassList"},{"location":"models/scheduling_v1beta1/","text":"scheduling_v1beta1 PriorityClass class lightkube.models.scheduling_v1beta1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) DEPRECATED - This group version of PriorityClass is deprecated by scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. parameters value int - The value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info description str - (optional) description is an arbitrary string that usually provides guidelines on when this priority class should be used. globalDefault bool - (optional) globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as globalDefault . However, if more than one PriorityClasses exists with their globalDefault field set to true, the smallest value of such global default PriorityClasses will be used as the default priority. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info preemptionPolicy str - (optional) PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature. PriorityClassList class lightkube.models.scheduling_v1beta1. PriorityClassList ( items , apiVersion=None , kind=None , metadata=None ) PriorityClassList is a collection of priority classes. parameters items PriorityClass - items is the list of PriorityClasses apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"scheduling_v1beta1"},{"location":"models/scheduling_v1beta1/#scheduling_v1beta1","text":"","title":"scheduling_v1beta1"},{"location":"models/scheduling_v1beta1/#priorityclass","text":"class lightkube.models.scheduling_v1beta1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) DEPRECATED - This group version of PriorityClass is deprecated by scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. parameters value int - The value of this priority class. This is the actual priority that pods receive when they have the name of this class in their pod spec. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info description str - (optional) description is an arbitrary string that usually provides guidelines on when this priority class should be used. globalDefault bool - (optional) globalDefault specifies whether this PriorityClass should be considered as the default priority for pods that do not have any priority class. Only one PriorityClass can be marked as globalDefault . However, if more than one PriorityClasses exists with their globalDefault field set to true, the smallest value of such global default PriorityClasses will be used as the default priority. kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info preemptionPolicy str - (optional) PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.","title":"PriorityClass"},{"location":"models/scheduling_v1beta1/#priorityclasslist","text":"class lightkube.models.scheduling_v1beta1. PriorityClassList ( items , apiVersion=None , kind=None , metadata=None ) PriorityClassList is a collection of priority classes. parameters items PriorityClass - items is the list of PriorityClasses apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"PriorityClassList"},{"location":"models/settings_v1alpha1/","text":"settings_v1alpha1 PodPreset class lightkube.models.settings_v1alpha1. PodPreset ( apiVersion=None , kind=None , metadata=None , spec=None ) PodPreset is a policy resource that defines additional runtime requirements for a Pod. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec PodPresetSpec - (optional) PodPresetList class lightkube.models.settings_v1alpha1. PodPresetList ( items , apiVersion=None , kind=None , metadata=None ) PodPresetList is a list of PodPreset objects. parameters items PodPreset - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info PodPresetSpec class lightkube.models.settings_v1alpha1. PodPresetSpec ( env=None , envFrom=None , selector=None , volumeMounts=None , volumes=None ) PodPresetSpec is a description of a pod preset. parameters env core_v1.EnvVar - (optional) Env defines the collection of EnvVar to inject into containers. envFrom core_v1.EnvFromSource - (optional) EnvFrom defines the collection of EnvFromSource to inject into containers. selector meta_v1.LabelSelector - (optional) Selector is a label query over a set of resources, in this case pods. Required. volumeMounts core_v1.VolumeMount - (optional) VolumeMounts defines the collection of VolumeMount to inject into containers. volumes core_v1.Volume - (optional) Volumes defines the collection of Volume to inject into the pod.","title":"settings_v1alpha1"},{"location":"models/settings_v1alpha1/#settings_v1alpha1","text":"","title":"settings_v1alpha1"},{"location":"models/settings_v1alpha1/#podpreset","text":"class lightkube.models.settings_v1alpha1. PodPreset ( apiVersion=None , kind=None , metadata=None , spec=None ) PodPreset is a policy resource that defines additional runtime requirements for a Pod. parameters apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) spec PodPresetSpec - (optional)","title":"PodPreset"},{"location":"models/settings_v1alpha1/#podpresetlist","text":"class lightkube.models.settings_v1alpha1. PodPresetList ( items , apiVersion=None , kind=None , metadata=None ) PodPresetList is a list of PodPreset objects. parameters items PodPreset - Items is a list of schema objects. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata. More info","title":"PodPresetList"},{"location":"models/settings_v1alpha1/#podpresetspec","text":"class lightkube.models.settings_v1alpha1. PodPresetSpec ( env=None , envFrom=None , selector=None , volumeMounts=None , volumes=None ) PodPresetSpec is a description of a pod preset. parameters env core_v1.EnvVar - (optional) Env defines the collection of EnvVar to inject into containers. envFrom core_v1.EnvFromSource - (optional) EnvFrom defines the collection of EnvFromSource to inject into containers. selector meta_v1.LabelSelector - (optional) Selector is a label query over a set of resources, in this case pods. Required. volumeMounts core_v1.VolumeMount - (optional) VolumeMounts defines the collection of VolumeMount to inject into containers. volumes core_v1.Volume - (optional) Volumes defines the collection of Volume to inject into the pod.","title":"PodPresetSpec"},{"location":"models/storage_v1/","text":"storage_v1 CSIDriver class lightkube.models.storage_v1. CSIDriver ( spec , apiVersion=None , kind=None , metadata=None ) CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced. parameters spec CSIDriverSpec - Specification of the CSI Driver. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info CSIDriverList class lightkube.models.storage_v1. CSIDriverList ( items , apiVersion=None , kind=None , metadata=None ) CSIDriverList is a collection of CSIDriver objects. parameters items CSIDriver - items is the list of CSIDriver apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info CSIDriverSpec class lightkube.models.storage_v1. CSIDriverSpec ( attachRequired=None , podInfoOnMount=None , volumeLifecycleModes=None ) CSIDriverSpec is the specification of a CSIDriver. parameters attachRequired bool - (optional) attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called. podInfoOnMount bool - (optional) If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" iff the volume is an ephemeral inline volume defined by a CSIVolumeSource, otherwise \"false\" \"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver. volumeLifecycleModes List[str] - (optional) volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future. This field is beta. CSINode class lightkube.models.storage_v1. CSINode ( spec , apiVersion=None , kind=None , metadata=None ) CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object. parameters spec CSINodeSpec - spec is the specification of CSINode apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata.name must be the Kubernetes node name. CSINodeDriver class lightkube.models.storage_v1. CSINodeDriver ( name , nodeID , allocatable=None , topologyKeys=None ) CSINodeDriver holds information about the specification of one CSI driver installed on a node parameters name str - This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver. nodeID str - nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required. allocatable VolumeNodeResources - (optional) allocatable represents the volume resources of a node that are available for scheduling. This field is beta. topologyKeys List[str] - (optional) topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology. CSINodeList class lightkube.models.storage_v1. CSINodeList ( items , apiVersion=None , kind=None , metadata=None ) CSINodeList is a collection of CSINode objects. parameters items CSINode - items is the list of CSINode apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info CSINodeSpec class lightkube.models.storage_v1. CSINodeSpec ( drivers ) CSINodeSpec holds information about the specification of all CSI drivers installed on a node parameters drivers CSINodeDriver - drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty. StorageClass class lightkube.models.storage_v1. StorageClass ( provisioner , allowVolumeExpansion=None , allowedTopologies=None , apiVersion=None , kind=None , metadata=None , mountOptions=None , parameters=None , reclaimPolicy=None , volumeBindingMode=None ) StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned. StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name. parameters provisioner str - Provisioner indicates the type of the provisioner. allowVolumeExpansion bool - (optional) AllowVolumeExpansion shows whether the storage class allow volume expand allowedTopologies core_v1.TopologySelectorTerm - (optional) Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info mountOptions List[str] - (optional) Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid. parameters dict - (optional) Parameters holds the parameters for the provisioner that should create volumes of this storage class. reclaimPolicy str - (optional) Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete. volumeBindingMode str - (optional) VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound. When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature. StorageClassList class lightkube.models.storage_v1. StorageClassList ( items , apiVersion=None , kind=None , metadata=None ) StorageClassList is a collection of storage classes. parameters items StorageClass - Items is the list of StorageClasses apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info VolumeAttachment class lightkube.models.storage_v1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node. VolumeAttachment objects are non-namespaced. parameters spec VolumeAttachmentSpec - Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. More info status VolumeAttachmentStatus - (optional) Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher. VolumeAttachmentList class lightkube.models.storage_v1. VolumeAttachmentList ( items , apiVersion=None , kind=None , metadata=None ) VolumeAttachmentList is a collection of VolumeAttachment objects. parameters items VolumeAttachment - Items is the list of VolumeAttachments apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info VolumeAttachmentSource class lightkube.models.storage_v1. VolumeAttachmentSource ( inlineVolumeSpec=None , persistentVolumeName=None ) VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set. parameters inlineVolumeSpec core_v1.PersistentVolumeSpec - (optional) inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature. persistentVolumeName str - (optional) Name of the persistent volume to attach. VolumeAttachmentSpec class lightkube.models.storage_v1. VolumeAttachmentSpec ( attacher , nodeName , source ) VolumeAttachmentSpec is the specification of a VolumeAttachment request. parameters attacher str - Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName(). nodeName str - The node that the volume should be attached to. source VolumeAttachmentSource - Source represents the volume that should be attached. VolumeAttachmentStatus class lightkube.models.storage_v1. VolumeAttachmentStatus ( attached , attachError=None , attachmentMetadata=None , detachError=None ) VolumeAttachmentStatus is the status of a VolumeAttachment request. parameters attached bool - Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachError VolumeError - (optional) The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachmentMetadata dict - (optional) Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. detachError VolumeError - (optional) The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher. VolumeError class lightkube.models.storage_v1. VolumeError ( message=None , time=None ) VolumeError captures an error encountered during a volume operation. parameters message str - (optional) String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information. time meta_v1.Time - (optional) Time the error was encountered. VolumeNodeResources class lightkube.models.storage_v1. VolumeNodeResources ( count=None ) VolumeNodeResources is a set of resource limits for scheduling of volumes. parameters count int - (optional) Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.","title":"storage_v1"},{"location":"models/storage_v1/#storage_v1","text":"","title":"storage_v1"},{"location":"models/storage_v1/#csidriver","text":"class lightkube.models.storage_v1. CSIDriver ( spec , apiVersion=None , kind=None , metadata=None ) CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced. parameters spec CSIDriverSpec - Specification of the CSI Driver. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info","title":"CSIDriver"},{"location":"models/storage_v1/#csidriverlist","text":"class lightkube.models.storage_v1. CSIDriverList ( items , apiVersion=None , kind=None , metadata=None ) CSIDriverList is a collection of CSIDriver objects. parameters items CSIDriver - items is the list of CSIDriver apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"CSIDriverList"},{"location":"models/storage_v1/#csidriverspec","text":"class lightkube.models.storage_v1. CSIDriverSpec ( attachRequired=None , podInfoOnMount=None , volumeLifecycleModes=None ) CSIDriverSpec is the specification of a CSIDriver. parameters attachRequired bool - (optional) attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called. podInfoOnMount bool - (optional) If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" iff the volume is an ephemeral inline volume defined by a CSIVolumeSource, otherwise \"false\" \"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver. volumeLifecycleModes List[str] - (optional) volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future. This field is beta.","title":"CSIDriverSpec"},{"location":"models/storage_v1/#csinode","text":"class lightkube.models.storage_v1. CSINode ( spec , apiVersion=None , kind=None , metadata=None ) CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object. parameters spec CSINodeSpec - spec is the specification of CSINode apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata.name must be the Kubernetes node name.","title":"CSINode"},{"location":"models/storage_v1/#csinodedriver","text":"class lightkube.models.storage_v1. CSINodeDriver ( name , nodeID , allocatable=None , topologyKeys=None ) CSINodeDriver holds information about the specification of one CSI driver installed on a node parameters name str - This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver. nodeID str - nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required. allocatable VolumeNodeResources - (optional) allocatable represents the volume resources of a node that are available for scheduling. This field is beta. topologyKeys List[str] - (optional) topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.","title":"CSINodeDriver"},{"location":"models/storage_v1/#csinodelist","text":"class lightkube.models.storage_v1. CSINodeList ( items , apiVersion=None , kind=None , metadata=None ) CSINodeList is a collection of CSINode objects. parameters items CSINode - items is the list of CSINode apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"CSINodeList"},{"location":"models/storage_v1/#csinodespec","text":"class lightkube.models.storage_v1. CSINodeSpec ( drivers ) CSINodeSpec holds information about the specification of all CSI drivers installed on a node parameters drivers CSINodeDriver - drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.","title":"CSINodeSpec"},{"location":"models/storage_v1/#storageclass","text":"class lightkube.models.storage_v1. StorageClass ( provisioner , allowVolumeExpansion=None , allowedTopologies=None , apiVersion=None , kind=None , metadata=None , mountOptions=None , parameters=None , reclaimPolicy=None , volumeBindingMode=None ) StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned. StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name. parameters provisioner str - Provisioner indicates the type of the provisioner. allowVolumeExpansion bool - (optional) AllowVolumeExpansion shows whether the storage class allow volume expand allowedTopologies core_v1.TopologySelectorTerm - (optional) Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info mountOptions List[str] - (optional) Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid. parameters dict - (optional) Parameters holds the parameters for the provisioner that should create volumes of this storage class. reclaimPolicy str - (optional) Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete. volumeBindingMode str - (optional) VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound. When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.","title":"StorageClass"},{"location":"models/storage_v1/#storageclasslist","text":"class lightkube.models.storage_v1. StorageClassList ( items , apiVersion=None , kind=None , metadata=None ) StorageClassList is a collection of storage classes. parameters items StorageClass - Items is the list of StorageClasses apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"StorageClassList"},{"location":"models/storage_v1/#volumeattachment","text":"class lightkube.models.storage_v1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node. VolumeAttachment objects are non-namespaced. parameters spec VolumeAttachmentSpec - Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. More info status VolumeAttachmentStatus - (optional) Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.","title":"VolumeAttachment"},{"location":"models/storage_v1/#volumeattachmentlist","text":"class lightkube.models.storage_v1. VolumeAttachmentList ( items , apiVersion=None , kind=None , metadata=None ) VolumeAttachmentList is a collection of VolumeAttachment objects. parameters items VolumeAttachment - Items is the list of VolumeAttachments apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"VolumeAttachmentList"},{"location":"models/storage_v1/#volumeattachmentsource","text":"class lightkube.models.storage_v1. VolumeAttachmentSource ( inlineVolumeSpec=None , persistentVolumeName=None ) VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set. parameters inlineVolumeSpec core_v1.PersistentVolumeSpec - (optional) inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature. persistentVolumeName str - (optional) Name of the persistent volume to attach.","title":"VolumeAttachmentSource"},{"location":"models/storage_v1/#volumeattachmentspec","text":"class lightkube.models.storage_v1. VolumeAttachmentSpec ( attacher , nodeName , source ) VolumeAttachmentSpec is the specification of a VolumeAttachment request. parameters attacher str - Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName(). nodeName str - The node that the volume should be attached to. source VolumeAttachmentSource - Source represents the volume that should be attached.","title":"VolumeAttachmentSpec"},{"location":"models/storage_v1/#volumeattachmentstatus","text":"class lightkube.models.storage_v1. VolumeAttachmentStatus ( attached , attachError=None , attachmentMetadata=None , detachError=None ) VolumeAttachmentStatus is the status of a VolumeAttachment request. parameters attached bool - Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachError VolumeError - (optional) The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachmentMetadata dict - (optional) Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. detachError VolumeError - (optional) The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.","title":"VolumeAttachmentStatus"},{"location":"models/storage_v1/#volumeerror","text":"class lightkube.models.storage_v1. VolumeError ( message=None , time=None ) VolumeError captures an error encountered during a volume operation. parameters message str - (optional) String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information. time meta_v1.Time - (optional) Time the error was encountered.","title":"VolumeError"},{"location":"models/storage_v1/#volumenoderesources","text":"class lightkube.models.storage_v1. VolumeNodeResources ( count=None ) VolumeNodeResources is a set of resource limits for scheduling of volumes. parameters count int - (optional) Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.","title":"VolumeNodeResources"},{"location":"models/storage_v1alpha1/","text":"storage_v1alpha1 VolumeAttachment class lightkube.models.storage_v1alpha1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node. VolumeAttachment objects are non-namespaced. parameters spec VolumeAttachmentSpec - Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. More info status VolumeAttachmentStatus - (optional) Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher. VolumeAttachmentList class lightkube.models.storage_v1alpha1. VolumeAttachmentList ( items , apiVersion=None , kind=None , metadata=None ) VolumeAttachmentList is a collection of VolumeAttachment objects. parameters items VolumeAttachment - Items is the list of VolumeAttachments apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info VolumeAttachmentSource class lightkube.models.storage_v1alpha1. VolumeAttachmentSource ( inlineVolumeSpec=None , persistentVolumeName=None ) VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set. parameters inlineVolumeSpec core_v1.PersistentVolumeSpec - (optional) inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature. persistentVolumeName str - (optional) Name of the persistent volume to attach. VolumeAttachmentSpec class lightkube.models.storage_v1alpha1. VolumeAttachmentSpec ( attacher , nodeName , source ) VolumeAttachmentSpec is the specification of a VolumeAttachment request. parameters attacher str - Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName(). nodeName str - The node that the volume should be attached to. source VolumeAttachmentSource - Source represents the volume that should be attached. VolumeAttachmentStatus class lightkube.models.storage_v1alpha1. VolumeAttachmentStatus ( attached , attachError=None , attachmentMetadata=None , detachError=None ) VolumeAttachmentStatus is the status of a VolumeAttachment request. parameters attached bool - Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachError VolumeError - (optional) The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachmentMetadata dict - (optional) Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. detachError VolumeError - (optional) The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher. VolumeError class lightkube.models.storage_v1alpha1. VolumeError ( message=None , time=None ) VolumeError captures an error encountered during a volume operation. parameters message str - (optional) String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information. time meta_v1.Time - (optional) Time the error was encountered.","title":"storage_v1alpha1"},{"location":"models/storage_v1alpha1/#storage_v1alpha1","text":"","title":"storage_v1alpha1"},{"location":"models/storage_v1alpha1/#volumeattachment","text":"class lightkube.models.storage_v1alpha1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node. VolumeAttachment objects are non-namespaced. parameters spec VolumeAttachmentSpec - Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. More info status VolumeAttachmentStatus - (optional) Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.","title":"VolumeAttachment"},{"location":"models/storage_v1alpha1/#volumeattachmentlist","text":"class lightkube.models.storage_v1alpha1. VolumeAttachmentList ( items , apiVersion=None , kind=None , metadata=None ) VolumeAttachmentList is a collection of VolumeAttachment objects. parameters items VolumeAttachment - Items is the list of VolumeAttachments apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"VolumeAttachmentList"},{"location":"models/storage_v1alpha1/#volumeattachmentsource","text":"class lightkube.models.storage_v1alpha1. VolumeAttachmentSource ( inlineVolumeSpec=None , persistentVolumeName=None ) VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set. parameters inlineVolumeSpec core_v1.PersistentVolumeSpec - (optional) inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature. persistentVolumeName str - (optional) Name of the persistent volume to attach.","title":"VolumeAttachmentSource"},{"location":"models/storage_v1alpha1/#volumeattachmentspec","text":"class lightkube.models.storage_v1alpha1. VolumeAttachmentSpec ( attacher , nodeName , source ) VolumeAttachmentSpec is the specification of a VolumeAttachment request. parameters attacher str - Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName(). nodeName str - The node that the volume should be attached to. source VolumeAttachmentSource - Source represents the volume that should be attached.","title":"VolumeAttachmentSpec"},{"location":"models/storage_v1alpha1/#volumeattachmentstatus","text":"class lightkube.models.storage_v1alpha1. VolumeAttachmentStatus ( attached , attachError=None , attachmentMetadata=None , detachError=None ) VolumeAttachmentStatus is the status of a VolumeAttachment request. parameters attached bool - Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachError VolumeError - (optional) The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachmentMetadata dict - (optional) Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. detachError VolumeError - (optional) The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.","title":"VolumeAttachmentStatus"},{"location":"models/storage_v1alpha1/#volumeerror","text":"class lightkube.models.storage_v1alpha1. VolumeError ( message=None , time=None ) VolumeError captures an error encountered during a volume operation. parameters message str - (optional) String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information. time meta_v1.Time - (optional) Time the error was encountered.","title":"VolumeError"},{"location":"models/storage_v1beta1/","text":"storage_v1beta1 CSIDriver class lightkube.models.storage_v1beta1. CSIDriver ( spec , apiVersion=None , kind=None , metadata=None ) CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced. parameters spec CSIDriverSpec - Specification of the CSI Driver. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info CSIDriverList class lightkube.models.storage_v1beta1. CSIDriverList ( items , apiVersion=None , kind=None , metadata=None ) CSIDriverList is a collection of CSIDriver objects. parameters items CSIDriver - items is the list of CSIDriver apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info CSIDriverSpec class lightkube.models.storage_v1beta1. CSIDriverSpec ( attachRequired=None , podInfoOnMount=None , volumeLifecycleModes=None ) CSIDriverSpec is the specification of a CSIDriver. parameters attachRequired bool - (optional) attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called. podInfoOnMount bool - (optional) If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" iff the volume is an ephemeral inline volume defined by a CSIVolumeSource, otherwise \"false\" \"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver. volumeLifecycleModes List[str] - (optional) VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future. CSINode class lightkube.models.storage_v1beta1. CSINode ( spec , apiVersion=None , kind=None , metadata=None ) DEPRECATED - This group version of CSINode is deprecated by storage/v1/CSINode. See the release notes for more information. CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object. parameters spec CSINodeSpec - spec is the specification of CSINode apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata.name must be the Kubernetes node name. CSINodeDriver class lightkube.models.storage_v1beta1. CSINodeDriver ( name , nodeID , allocatable=None , topologyKeys=None ) CSINodeDriver holds information about the specification of one CSI driver installed on a node parameters name str - This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver. nodeID str - nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required. allocatable VolumeNodeResources - (optional) allocatable represents the volume resources of a node that are available for scheduling. topologyKeys List[str] - (optional) topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology. CSINodeList class lightkube.models.storage_v1beta1. CSINodeList ( items , apiVersion=None , kind=None , metadata=None ) CSINodeList is a collection of CSINode objects. parameters items CSINode - items is the list of CSINode apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info CSINodeSpec class lightkube.models.storage_v1beta1. CSINodeSpec ( drivers ) CSINodeSpec holds information about the specification of all CSI drivers installed on a node parameters drivers CSINodeDriver - drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty. StorageClass class lightkube.models.storage_v1beta1. StorageClass ( provisioner , allowVolumeExpansion=None , allowedTopologies=None , apiVersion=None , kind=None , metadata=None , mountOptions=None , parameters=None , reclaimPolicy=None , volumeBindingMode=None ) StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned. StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name. parameters provisioner str - Provisioner indicates the type of the provisioner. allowVolumeExpansion bool - (optional) AllowVolumeExpansion shows whether the storage class allow volume expand allowedTopologies core_v1.TopologySelectorTerm - (optional) Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info mountOptions List[str] - (optional) Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid. parameters dict - (optional) Parameters holds the parameters for the provisioner that should create volumes of this storage class. reclaimPolicy str - (optional) Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete. volumeBindingMode str - (optional) VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound. When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature. StorageClassList class lightkube.models.storage_v1beta1. StorageClassList ( items , apiVersion=None , kind=None , metadata=None ) StorageClassList is a collection of storage classes. parameters items StorageClass - Items is the list of StorageClasses apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info VolumeAttachment class lightkube.models.storage_v1beta1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node. VolumeAttachment objects are non-namespaced. parameters spec VolumeAttachmentSpec - Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. More info status VolumeAttachmentStatus - (optional) Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher. VolumeAttachmentList class lightkube.models.storage_v1beta1. VolumeAttachmentList ( items , apiVersion=None , kind=None , metadata=None ) VolumeAttachmentList is a collection of VolumeAttachment objects. parameters items VolumeAttachment - Items is the list of VolumeAttachments apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info VolumeAttachmentSource class lightkube.models.storage_v1beta1. VolumeAttachmentSource ( inlineVolumeSpec=None , persistentVolumeName=None ) VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set. parameters inlineVolumeSpec core_v1.PersistentVolumeSpec - (optional) inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature. persistentVolumeName str - (optional) Name of the persistent volume to attach. VolumeAttachmentSpec class lightkube.models.storage_v1beta1. VolumeAttachmentSpec ( attacher , nodeName , source ) VolumeAttachmentSpec is the specification of a VolumeAttachment request. parameters attacher str - Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName(). nodeName str - The node that the volume should be attached to. source VolumeAttachmentSource - Source represents the volume that should be attached. VolumeAttachmentStatus class lightkube.models.storage_v1beta1. VolumeAttachmentStatus ( attached , attachError=None , attachmentMetadata=None , detachError=None ) VolumeAttachmentStatus is the status of a VolumeAttachment request. parameters attached bool - Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachError VolumeError - (optional) The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachmentMetadata dict - (optional) Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. detachError VolumeError - (optional) The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher. VolumeError class lightkube.models.storage_v1beta1. VolumeError ( message=None , time=None ) VolumeError captures an error encountered during a volume operation. parameters message str - (optional) String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information. time meta_v1.Time - (optional) Time the error was encountered. VolumeNodeResources class lightkube.models.storage_v1beta1. VolumeNodeResources ( count=None ) VolumeNodeResources is a set of resource limits for scheduling of volumes. parameters count int - (optional) Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is nil, then the supported number of volumes on this node is unbounded.","title":"storage_v1beta1"},{"location":"models/storage_v1beta1/#storage_v1beta1","text":"","title":"storage_v1beta1"},{"location":"models/storage_v1beta1/#csidriver","text":"class lightkube.models.storage_v1beta1. CSIDriver ( spec , apiVersion=None , kind=None , metadata=None ) CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced. parameters spec CSIDriverSpec - Specification of the CSI Driver. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. metadata.Name indicates the name of the CSI driver that this object refers to; it MUST be the same name returned by the CSI GetPluginName() call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character ([a-z0-9A-Z]) with dashes (-), dots (.), and alphanumerics between. More info","title":"CSIDriver"},{"location":"models/storage_v1beta1/#csidriverlist","text":"class lightkube.models.storage_v1beta1. CSIDriverList ( items , apiVersion=None , kind=None , metadata=None ) CSIDriverList is a collection of CSIDriver objects. parameters items CSIDriver - items is the list of CSIDriver apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"CSIDriverList"},{"location":"models/storage_v1beta1/#csidriverspec","text":"class lightkube.models.storage_v1beta1. CSIDriverSpec ( attachRequired=None , podInfoOnMount=None , volumeLifecycleModes=None ) CSIDriverSpec is the specification of a CSIDriver. parameters attachRequired bool - (optional) attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called. podInfoOnMount bool - (optional) If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. \"csi.storage.k8s.io/pod.name\": pod.Name \"csi.storage.k8s.io/pod.namespace\": pod.Namespace \"csi.storage.k8s.io/pod.uid\": string(pod.UID) \"csi.storage.k8s.io/ephemeral\": \"true\" iff the volume is an ephemeral inline volume defined by a CSIVolumeSource, otherwise \"false\" \"csi.storage.k8s.io/ephemeral\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the \"Persistent\" and \"Ephemeral\" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver. volumeLifecycleModes List[str] - (optional) VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is \"Persistent\", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is \"Ephemeral\". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.","title":"CSIDriverSpec"},{"location":"models/storage_v1beta1/#csinode","text":"class lightkube.models.storage_v1beta1. CSINode ( spec , apiVersion=None , kind=None , metadata=None ) DEPRECATED - This group version of CSINode is deprecated by storage/v1/CSINode. See the release notes for more information. CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object. parameters spec CSINodeSpec - spec is the specification of CSINode apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) metadata.name must be the Kubernetes node name.","title":"CSINode"},{"location":"models/storage_v1beta1/#csinodedriver","text":"class lightkube.models.storage_v1beta1. CSINodeDriver ( name , nodeID , allocatable=None , topologyKeys=None ) CSINodeDriver holds information about the specification of one CSI driver installed on a node parameters name str - This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver. nodeID str - nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as \"node1\", but the storage system may refer to the same node as \"nodeA\". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. \"nodeA\" instead of \"node1\". This field is required. allocatable VolumeNodeResources - (optional) allocatable represents the volume resources of a node that are available for scheduling. topologyKeys List[str] - (optional) topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. \"company.com/zone\", \"company.com/region\"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.","title":"CSINodeDriver"},{"location":"models/storage_v1beta1/#csinodelist","text":"class lightkube.models.storage_v1beta1. CSINodeList ( items , apiVersion=None , kind=None , metadata=None ) CSINodeList is a collection of CSINode objects. parameters items CSINode - items is the list of CSINode apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"CSINodeList"},{"location":"models/storage_v1beta1/#csinodespec","text":"class lightkube.models.storage_v1beta1. CSINodeSpec ( drivers ) CSINodeSpec holds information about the specification of all CSI drivers installed on a node parameters drivers CSINodeDriver - drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.","title":"CSINodeSpec"},{"location":"models/storage_v1beta1/#storageclass","text":"class lightkube.models.storage_v1beta1. StorageClass ( provisioner , allowVolumeExpansion=None , allowedTopologies=None , apiVersion=None , kind=None , metadata=None , mountOptions=None , parameters=None , reclaimPolicy=None , volumeBindingMode=None ) StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned. StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name. parameters provisioner str - Provisioner indicates the type of the provisioner. allowVolumeExpansion bool - (optional) AllowVolumeExpansion shows whether the storage class allow volume expand allowedTopologies core_v1.TopologySelectorTerm - (optional) Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object's metadata. More info mountOptions List[str] - (optional) Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid. parameters dict - (optional) Parameters holds the parameters for the provisioner that should create volumes of this storage class. reclaimPolicy str - (optional) Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete. volumeBindingMode str - (optional) VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound. When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.","title":"StorageClass"},{"location":"models/storage_v1beta1/#storageclasslist","text":"class lightkube.models.storage_v1beta1. StorageClassList ( items , apiVersion=None , kind=None , metadata=None ) StorageClassList is a collection of storage classes. parameters items StorageClass - Items is the list of StorageClasses apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"StorageClassList"},{"location":"models/storage_v1beta1/#volumeattachment","text":"class lightkube.models.storage_v1beta1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node. VolumeAttachment objects are non-namespaced. parameters spec VolumeAttachmentSpec - Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ObjectMeta - (optional) Standard object metadata. More info status VolumeAttachmentStatus - (optional) Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.","title":"VolumeAttachment"},{"location":"models/storage_v1beta1/#volumeattachmentlist","text":"class lightkube.models.storage_v1beta1. VolumeAttachmentList ( items , apiVersion=None , kind=None , metadata=None ) VolumeAttachmentList is a collection of VolumeAttachment objects. parameters items VolumeAttachment - Items is the list of VolumeAttachments apiVersion str - (optional) APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info kind str - (optional) Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info metadata meta_v1.ListMeta - (optional) Standard list metadata More info","title":"VolumeAttachmentList"},{"location":"models/storage_v1beta1/#volumeattachmentsource","text":"class lightkube.models.storage_v1beta1. VolumeAttachmentSource ( inlineVolumeSpec=None , persistentVolumeName=None ) VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set. parameters inlineVolumeSpec core_v1.PersistentVolumeSpec - (optional) inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature. persistentVolumeName str - (optional) Name of the persistent volume to attach.","title":"VolumeAttachmentSource"},{"location":"models/storage_v1beta1/#volumeattachmentspec","text":"class lightkube.models.storage_v1beta1. VolumeAttachmentSpec ( attacher , nodeName , source ) VolumeAttachmentSpec is the specification of a VolumeAttachment request. parameters attacher str - Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName(). nodeName str - The node that the volume should be attached to. source VolumeAttachmentSource - Source represents the volume that should be attached.","title":"VolumeAttachmentSpec"},{"location":"models/storage_v1beta1/#volumeattachmentstatus","text":"class lightkube.models.storage_v1beta1. VolumeAttachmentStatus ( attached , attachError=None , attachmentMetadata=None , detachError=None ) VolumeAttachmentStatus is the status of a VolumeAttachment request. parameters attached bool - Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachError VolumeError - (optional) The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. attachmentMetadata dict - (optional) Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. detachError VolumeError - (optional) The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.","title":"VolumeAttachmentStatus"},{"location":"models/storage_v1beta1/#volumeerror","text":"class lightkube.models.storage_v1beta1. VolumeError ( message=None , time=None ) VolumeError captures an error encountered during a volume operation. parameters message str - (optional) String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information. time meta_v1.Time - (optional) Time the error was encountered.","title":"VolumeError"},{"location":"models/storage_v1beta1/#volumenoderesources","text":"class lightkube.models.storage_v1beta1. VolumeNodeResources ( count=None ) VolumeNodeResources is a set of resource limits for scheduling of volumes. parameters count int - (optional) Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is nil, then the supported number of volumes on this node is unbounded.","title":"VolumeNodeResources"},{"location":"models/util_intstr/","text":"util_intstr IntOrString","title":"util_intstr"},{"location":"models/util_intstr/#util_intstr","text":"","title":"util_intstr"},{"location":"models/util_intstr/#intorstring","text":"","title":"IntOrString"},{"location":"models/version/","text":"version Info class lightkube.models.version. Info ( buildDate , compiler , gitCommit , gitTreeState , gitVersion , goVersion , major , minor , platform ) Info contains versioning information. how we'll want to distribute that information. parameters buildDate str - compiler str - gitCommit str - gitTreeState str - gitVersion str - goVersion str - major str - minor str - platform str -","title":"version"},{"location":"models/version/#version","text":"","title":"version"},{"location":"models/version/#info","text":"class lightkube.models.version. Info ( buildDate , compiler , gitCommit , gitTreeState , gitVersion , goVersion , major , minor , platform ) Info contains versioning information. how we'll want to distribute that information. parameters buildDate str - compiler str - gitCommit str - gitTreeState str - gitVersion str - goVersion str - major str - minor str - platform str -","title":"Info"},{"location":"resources/","text":"All resources Resource name Available versions APIService apiregistration_v1 , apiregistration_v1beta1 AuditSink auditregistration_v1alpha1 Binding core_v1 CSIDriver storage_v1 , storage_v1beta1 CSINode storage_v1 , storage_v1beta1 CertificateSigningRequest certificates_v1beta1 ClusterRole rbac_authorization_v1 , rbac_authorization_v1beta1 , rbac_authorization_v1alpha1 ClusterRoleBinding rbac_authorization_v1 , rbac_authorization_v1beta1 , rbac_authorization_v1alpha1 ComponentStatus core_v1 ConfigMap core_v1 ControllerRevision apps_v1 CronJob batch_v2alpha1 , batch_v1beta1 CustomResourceDefinition apiextensions_v1 , apiextensions_v1beta1 DaemonSet apps_v1 Deployment apps_v1 EndpointSlice discovery_v1beta1 Endpoints core_v1 Event core_v1 , events_v1beta1 FlowSchema flowcontrol_apiserver_v1alpha1 HorizontalPodAutoscaler autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 Ingress extensions_v1beta1 , networking_v1beta1 IngressClass networking_v1beta1 Job batch_v1 Lease coordination_v1 , coordination_v1beta1 LimitRange core_v1 LocalSubjectAccessReview authorization_v1 , authorization_v1beta1 MutatingWebhookConfiguration admissionregistration_v1 , admissionregistration_v1beta1 Namespace core_v1 NetworkPolicy networking_v1 Node core_v1 PersistentVolume core_v1 PersistentVolumeClaim core_v1 Pod core_v1 PodDisruptionBudget policy_v1beta1 PodPreset settings_v1alpha1 PodSecurityPolicy policy_v1beta1 PodTemplate core_v1 PriorityClass scheduling_v1 , scheduling_v1beta1 , scheduling_v1alpha1 PriorityLevelConfiguration flowcontrol_apiserver_v1alpha1 ReplicaSet apps_v1 ReplicationController core_v1 ResourceQuota core_v1 Role rbac_authorization_v1 , rbac_authorization_v1beta1 , rbac_authorization_v1alpha1 RoleBinding rbac_authorization_v1 , rbac_authorization_v1beta1 , rbac_authorization_v1alpha1 RuntimeClass node_v1beta1 , node_v1alpha1 Secret core_v1 SelfSubjectAccessReview authorization_v1 , authorization_v1beta1 SelfSubjectRulesReview authorization_v1 , authorization_v1beta1 Service core_v1 ServiceAccount core_v1 StatefulSet apps_v1 StorageClass storage_v1 , storage_v1beta1 SubjectAccessReview authorization_v1 , authorization_v1beta1 TokenReview authentication_v1 , authentication_v1beta1 ValidatingWebhookConfiguration admissionregistration_v1 , admissionregistration_v1beta1 VolumeAttachment storage_v1 , storage_v1beta1 , storage_v1alpha1","title":"All resources"},{"location":"resources/#all-resources","text":"Resource name Available versions APIService apiregistration_v1 , apiregistration_v1beta1 AuditSink auditregistration_v1alpha1 Binding core_v1 CSIDriver storage_v1 , storage_v1beta1 CSINode storage_v1 , storage_v1beta1 CertificateSigningRequest certificates_v1beta1 ClusterRole rbac_authorization_v1 , rbac_authorization_v1beta1 , rbac_authorization_v1alpha1 ClusterRoleBinding rbac_authorization_v1 , rbac_authorization_v1beta1 , rbac_authorization_v1alpha1 ComponentStatus core_v1 ConfigMap core_v1 ControllerRevision apps_v1 CronJob batch_v2alpha1 , batch_v1beta1 CustomResourceDefinition apiextensions_v1 , apiextensions_v1beta1 DaemonSet apps_v1 Deployment apps_v1 EndpointSlice discovery_v1beta1 Endpoints core_v1 Event core_v1 , events_v1beta1 FlowSchema flowcontrol_apiserver_v1alpha1 HorizontalPodAutoscaler autoscaling_v2beta2 , autoscaling_v2beta1 , autoscaling_v1 Ingress extensions_v1beta1 , networking_v1beta1 IngressClass networking_v1beta1 Job batch_v1 Lease coordination_v1 , coordination_v1beta1 LimitRange core_v1 LocalSubjectAccessReview authorization_v1 , authorization_v1beta1 MutatingWebhookConfiguration admissionregistration_v1 , admissionregistration_v1beta1 Namespace core_v1 NetworkPolicy networking_v1 Node core_v1 PersistentVolume core_v1 PersistentVolumeClaim core_v1 Pod core_v1 PodDisruptionBudget policy_v1beta1 PodPreset settings_v1alpha1 PodSecurityPolicy policy_v1beta1 PodTemplate core_v1 PriorityClass scheduling_v1 , scheduling_v1beta1 , scheduling_v1alpha1 PriorityLevelConfiguration flowcontrol_apiserver_v1alpha1 ReplicaSet apps_v1 ReplicationController core_v1 ResourceQuota core_v1 Role rbac_authorization_v1 , rbac_authorization_v1beta1 , rbac_authorization_v1alpha1 RoleBinding rbac_authorization_v1 , rbac_authorization_v1beta1 , rbac_authorization_v1alpha1 RuntimeClass node_v1beta1 , node_v1alpha1 Secret core_v1 SelfSubjectAccessReview authorization_v1 , authorization_v1beta1 SelfSubjectRulesReview authorization_v1 , authorization_v1beta1 Service core_v1 ServiceAccount core_v1 StatefulSet apps_v1 StorageClass storage_v1 , storage_v1beta1 SubjectAccessReview authorization_v1 , authorization_v1beta1 TokenReview authentication_v1 , authentication_v1beta1 ValidatingWebhookConfiguration admissionregistration_v1 , admissionregistration_v1beta1 VolumeAttachment storage_v1 , storage_v1beta1 , storage_v1alpha1","title":"All resources"},{"location":"resources/admissionregistration_v1/","text":"admissionregistration_v1 MutatingWebhookConfiguration class lightkube.resources.admissionregistration_v1. MutatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) Extends : models.admissionregistration_v1.MutatingWebhookConfiguration Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch ValidatingWebhookConfiguration class lightkube.resources.admissionregistration_v1. ValidatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) Extends : models.admissionregistration_v1.ValidatingWebhookConfiguration Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"admissionregistration_v1"},{"location":"resources/admissionregistration_v1/#admissionregistration_v1","text":"","title":"admissionregistration_v1"},{"location":"resources/admissionregistration_v1/#mutatingwebhookconfiguration","text":"class lightkube.resources.admissionregistration_v1. MutatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) Extends : models.admissionregistration_v1.MutatingWebhookConfiguration Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"MutatingWebhookConfiguration"},{"location":"resources/admissionregistration_v1/#validatingwebhookconfiguration","text":"class lightkube.resources.admissionregistration_v1. ValidatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) Extends : models.admissionregistration_v1.ValidatingWebhookConfiguration Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"ValidatingWebhookConfiguration"},{"location":"resources/admissionregistration_v1beta1/","text":"admissionregistration_v1beta1 MutatingWebhookConfiguration class lightkube.resources.admissionregistration_v1beta1. MutatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) Extends : models.admissionregistration_v1beta1.MutatingWebhookConfiguration Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch ValidatingWebhookConfiguration class lightkube.resources.admissionregistration_v1beta1. ValidatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) Extends : models.admissionregistration_v1beta1.ValidatingWebhookConfiguration Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"admissionregistration_v1beta1"},{"location":"resources/admissionregistration_v1beta1/#admissionregistration_v1beta1","text":"","title":"admissionregistration_v1beta1"},{"location":"resources/admissionregistration_v1beta1/#mutatingwebhookconfiguration","text":"class lightkube.resources.admissionregistration_v1beta1. MutatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) Extends : models.admissionregistration_v1beta1.MutatingWebhookConfiguration Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"MutatingWebhookConfiguration"},{"location":"resources/admissionregistration_v1beta1/#validatingwebhookconfiguration","text":"class lightkube.resources.admissionregistration_v1beta1. ValidatingWebhookConfiguration ( apiVersion=None , kind=None , metadata=None , webhooks=None ) Extends : models.admissionregistration_v1beta1.ValidatingWebhookConfiguration Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"ValidatingWebhookConfiguration"},{"location":"resources/apiextensions_v1/","text":"apiextensions_v1 CustomResourceDefinitionStatus class lightkube.resources.apiextensions_v1. CustomResourceDefinitionStatus ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.apiextensions_v1.CustomResourceDefinition Type : Global Resource Accepted client methods : get , patch , replace CustomResourceDefinition class lightkube.resources.apiextensions_v1. CustomResourceDefinition ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.apiextensions_v1.CustomResourceDefinition Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : CustomResourceDefinitionStatus","title":"apiextensions_v1"},{"location":"resources/apiextensions_v1/#apiextensions_v1","text":"","title":"apiextensions_v1"},{"location":"resources/apiextensions_v1/#customresourcedefinitionstatus","text":"class lightkube.resources.apiextensions_v1. CustomResourceDefinitionStatus ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.apiextensions_v1.CustomResourceDefinition Type : Global Resource Accepted client methods : get , patch , replace","title":"CustomResourceDefinitionStatus"},{"location":"resources/apiextensions_v1/#customresourcedefinition","text":"class lightkube.resources.apiextensions_v1. CustomResourceDefinition ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.apiextensions_v1.CustomResourceDefinition Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : CustomResourceDefinitionStatus","title":"CustomResourceDefinition"},{"location":"resources/apiextensions_v1beta1/","text":"apiextensions_v1beta1 CustomResourceDefinitionStatus class lightkube.resources.apiextensions_v1beta1. CustomResourceDefinitionStatus ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.apiextensions_v1beta1.CustomResourceDefinition Type : Global Resource Accepted client methods : get , patch , replace CustomResourceDefinition class lightkube.resources.apiextensions_v1beta1. CustomResourceDefinition ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.apiextensions_v1beta1.CustomResourceDefinition Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : CustomResourceDefinitionStatus","title":"apiextensions_v1beta1"},{"location":"resources/apiextensions_v1beta1/#apiextensions_v1beta1","text":"","title":"apiextensions_v1beta1"},{"location":"resources/apiextensions_v1beta1/#customresourcedefinitionstatus","text":"class lightkube.resources.apiextensions_v1beta1. CustomResourceDefinitionStatus ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.apiextensions_v1beta1.CustomResourceDefinition Type : Global Resource Accepted client methods : get , patch , replace","title":"CustomResourceDefinitionStatus"},{"location":"resources/apiextensions_v1beta1/#customresourcedefinition","text":"class lightkube.resources.apiextensions_v1beta1. CustomResourceDefinition ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.apiextensions_v1beta1.CustomResourceDefinition Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : CustomResourceDefinitionStatus","title":"CustomResourceDefinition"},{"location":"resources/apiregistration_v1/","text":"apiregistration_v1 APIServiceStatus class lightkube.resources.apiregistration_v1. APIServiceStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apiregistration_v1.APIService Type : Global Resource Accepted client methods : get , patch , replace APIService class lightkube.resources.apiregistration_v1. APIService ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apiregistration_v1.APIService Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : APIServiceStatus","title":"apiregistration_v1"},{"location":"resources/apiregistration_v1/#apiregistration_v1","text":"","title":"apiregistration_v1"},{"location":"resources/apiregistration_v1/#apiservicestatus","text":"class lightkube.resources.apiregistration_v1. APIServiceStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apiregistration_v1.APIService Type : Global Resource Accepted client methods : get , patch , replace","title":"APIServiceStatus"},{"location":"resources/apiregistration_v1/#apiservice","text":"class lightkube.resources.apiregistration_v1. APIService ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apiregistration_v1.APIService Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : APIServiceStatus","title":"APIService"},{"location":"resources/apiregistration_v1beta1/","text":"apiregistration_v1beta1 APIServiceStatus class lightkube.resources.apiregistration_v1beta1. APIServiceStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apiregistration_v1beta1.APIService Type : Global Resource Accepted client methods : get , patch , replace APIService class lightkube.resources.apiregistration_v1beta1. APIService ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apiregistration_v1beta1.APIService Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : APIServiceStatus","title":"apiregistration_v1beta1"},{"location":"resources/apiregistration_v1beta1/#apiregistration_v1beta1","text":"","title":"apiregistration_v1beta1"},{"location":"resources/apiregistration_v1beta1/#apiservicestatus","text":"class lightkube.resources.apiregistration_v1beta1. APIServiceStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apiregistration_v1beta1.APIService Type : Global Resource Accepted client methods : get , patch , replace","title":"APIServiceStatus"},{"location":"resources/apiregistration_v1beta1/#apiservice","text":"class lightkube.resources.apiregistration_v1beta1. APIService ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apiregistration_v1beta1.APIService Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : APIServiceStatus","title":"APIService"},{"location":"resources/apps_v1/","text":"apps_v1 ControllerRevision class lightkube.resources.apps_v1. ControllerRevision ( revision , apiVersion=None , data=None , kind=None , metadata=None ) Extends : models.apps_v1.ControllerRevision Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch DaemonSetStatus class lightkube.resources.apps_v1. DaemonSetStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.DaemonSet Type : Namespaced Resource Accepted client methods : get , patch , replace DaemonSet class lightkube.resources.apps_v1. DaemonSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.DaemonSet Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : DaemonSetStatus DeploymentScale class lightkube.resources.apps_v1. DeploymentScale ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.Scale Type : Namespaced Resource Accepted client methods : get , patch , replace DeploymentStatus class lightkube.resources.apps_v1. DeploymentStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.Deployment Type : Namespaced Resource Accepted client methods : get , patch , replace Deployment class lightkube.resources.apps_v1. Deployment ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.Deployment Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Scale : DeploymentScale Status : DeploymentStatus ReplicaSetScale class lightkube.resources.apps_v1. ReplicaSetScale ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.Scale Type : Namespaced Resource Accepted client methods : get , patch , replace ReplicaSetStatus class lightkube.resources.apps_v1. ReplicaSetStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.ReplicaSet Type : Namespaced Resource Accepted client methods : get , patch , replace ReplicaSet class lightkube.resources.apps_v1. ReplicaSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.ReplicaSet Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Scale : ReplicaSetScale Status : ReplicaSetStatus StatefulSetScale class lightkube.resources.apps_v1. StatefulSetScale ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.Scale Type : Namespaced Resource Accepted client methods : get , patch , replace StatefulSetStatus class lightkube.resources.apps_v1. StatefulSetStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.StatefulSet Type : Namespaced Resource Accepted client methods : get , patch , replace StatefulSet class lightkube.resources.apps_v1. StatefulSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.StatefulSet Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Scale : StatefulSetScale Status : StatefulSetStatus","title":"apps_v1"},{"location":"resources/apps_v1/#apps_v1","text":"","title":"apps_v1"},{"location":"resources/apps_v1/#controllerrevision","text":"class lightkube.resources.apps_v1. ControllerRevision ( revision , apiVersion=None , data=None , kind=None , metadata=None ) Extends : models.apps_v1.ControllerRevision Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"ControllerRevision"},{"location":"resources/apps_v1/#daemonsetstatus","text":"class lightkube.resources.apps_v1. DaemonSetStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.DaemonSet Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"DaemonSetStatus"},{"location":"resources/apps_v1/#daemonset","text":"class lightkube.resources.apps_v1. DaemonSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.DaemonSet Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : DaemonSetStatus","title":"DaemonSet"},{"location":"resources/apps_v1/#deploymentscale","text":"class lightkube.resources.apps_v1. DeploymentScale ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.Scale Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"DeploymentScale"},{"location":"resources/apps_v1/#deploymentstatus","text":"class lightkube.resources.apps_v1. DeploymentStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.Deployment Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"DeploymentStatus"},{"location":"resources/apps_v1/#deployment","text":"class lightkube.resources.apps_v1. Deployment ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.Deployment Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Scale : DeploymentScale Status : DeploymentStatus","title":"Deployment"},{"location":"resources/apps_v1/#replicasetscale","text":"class lightkube.resources.apps_v1. ReplicaSetScale ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.Scale Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"ReplicaSetScale"},{"location":"resources/apps_v1/#replicasetstatus","text":"class lightkube.resources.apps_v1. ReplicaSetStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.ReplicaSet Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"ReplicaSetStatus"},{"location":"resources/apps_v1/#replicaset","text":"class lightkube.resources.apps_v1. ReplicaSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.ReplicaSet Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Scale : ReplicaSetScale Status : ReplicaSetStatus","title":"ReplicaSet"},{"location":"resources/apps_v1/#statefulsetscale","text":"class lightkube.resources.apps_v1. StatefulSetScale ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.Scale Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"StatefulSetScale"},{"location":"resources/apps_v1/#statefulsetstatus","text":"class lightkube.resources.apps_v1. StatefulSetStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.StatefulSet Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"StatefulSetStatus"},{"location":"resources/apps_v1/#statefulset","text":"class lightkube.resources.apps_v1. StatefulSet ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.apps_v1.StatefulSet Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Scale : StatefulSetScale Status : StatefulSetStatus","title":"StatefulSet"},{"location":"resources/auditregistration_v1alpha1/","text":"auditregistration_v1alpha1 AuditSink class lightkube.resources.auditregistration_v1alpha1. AuditSink ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.auditregistration_v1alpha1.AuditSink Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"auditregistration_v1alpha1"},{"location":"resources/auditregistration_v1alpha1/#auditregistration_v1alpha1","text":"","title":"auditregistration_v1alpha1"},{"location":"resources/auditregistration_v1alpha1/#auditsink","text":"class lightkube.resources.auditregistration_v1alpha1. AuditSink ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.auditregistration_v1alpha1.AuditSink Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"AuditSink"},{"location":"resources/authentication_v1/","text":"authentication_v1 TokenReview class lightkube.resources.authentication_v1. TokenReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authentication_v1.TokenReview Type : Global Resource Accepted client methods : create","title":"authentication_v1"},{"location":"resources/authentication_v1/#authentication_v1","text":"","title":"authentication_v1"},{"location":"resources/authentication_v1/#tokenreview","text":"class lightkube.resources.authentication_v1. TokenReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authentication_v1.TokenReview Type : Global Resource Accepted client methods : create","title":"TokenReview"},{"location":"resources/authentication_v1beta1/","text":"authentication_v1beta1 TokenReview class lightkube.resources.authentication_v1beta1. TokenReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authentication_v1beta1.TokenReview Type : Global Resource Accepted client methods : create","title":"authentication_v1beta1"},{"location":"resources/authentication_v1beta1/#authentication_v1beta1","text":"","title":"authentication_v1beta1"},{"location":"resources/authentication_v1beta1/#tokenreview","text":"class lightkube.resources.authentication_v1beta1. TokenReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authentication_v1beta1.TokenReview Type : Global Resource Accepted client methods : create","title":"TokenReview"},{"location":"resources/authorization_v1/","text":"authorization_v1 LocalSubjectAccessReview class lightkube.resources.authorization_v1. LocalSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1.LocalSubjectAccessReview Type : Namespaced Resource Accepted client methods : create SelfSubjectAccessReview class lightkube.resources.authorization_v1. SelfSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1.SelfSubjectAccessReview Type : Global Resource Accepted client methods : create SelfSubjectRulesReview class lightkube.resources.authorization_v1. SelfSubjectRulesReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1.SelfSubjectRulesReview Type : Global Resource Accepted client methods : create SubjectAccessReview class lightkube.resources.authorization_v1. SubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1.SubjectAccessReview Type : Global Resource Accepted client methods : create","title":"authorization_v1"},{"location":"resources/authorization_v1/#authorization_v1","text":"","title":"authorization_v1"},{"location":"resources/authorization_v1/#localsubjectaccessreview","text":"class lightkube.resources.authorization_v1. LocalSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1.LocalSubjectAccessReview Type : Namespaced Resource Accepted client methods : create","title":"LocalSubjectAccessReview"},{"location":"resources/authorization_v1/#selfsubjectaccessreview","text":"class lightkube.resources.authorization_v1. SelfSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1.SelfSubjectAccessReview Type : Global Resource Accepted client methods : create","title":"SelfSubjectAccessReview"},{"location":"resources/authorization_v1/#selfsubjectrulesreview","text":"class lightkube.resources.authorization_v1. SelfSubjectRulesReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1.SelfSubjectRulesReview Type : Global Resource Accepted client methods : create","title":"SelfSubjectRulesReview"},{"location":"resources/authorization_v1/#subjectaccessreview","text":"class lightkube.resources.authorization_v1. SubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1.SubjectAccessReview Type : Global Resource Accepted client methods : create","title":"SubjectAccessReview"},{"location":"resources/authorization_v1beta1/","text":"authorization_v1beta1 LocalSubjectAccessReview class lightkube.resources.authorization_v1beta1. LocalSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1beta1.LocalSubjectAccessReview Type : Namespaced Resource Accepted client methods : create SelfSubjectAccessReview class lightkube.resources.authorization_v1beta1. SelfSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1beta1.SelfSubjectAccessReview Type : Global Resource Accepted client methods : create SelfSubjectRulesReview class lightkube.resources.authorization_v1beta1. SelfSubjectRulesReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1beta1.SelfSubjectRulesReview Type : Global Resource Accepted client methods : create SubjectAccessReview class lightkube.resources.authorization_v1beta1. SubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1beta1.SubjectAccessReview Type : Global Resource Accepted client methods : create","title":"authorization_v1beta1"},{"location":"resources/authorization_v1beta1/#authorization_v1beta1","text":"","title":"authorization_v1beta1"},{"location":"resources/authorization_v1beta1/#localsubjectaccessreview","text":"class lightkube.resources.authorization_v1beta1. LocalSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1beta1.LocalSubjectAccessReview Type : Namespaced Resource Accepted client methods : create","title":"LocalSubjectAccessReview"},{"location":"resources/authorization_v1beta1/#selfsubjectaccessreview","text":"class lightkube.resources.authorization_v1beta1. SelfSubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1beta1.SelfSubjectAccessReview Type : Global Resource Accepted client methods : create","title":"SelfSubjectAccessReview"},{"location":"resources/authorization_v1beta1/#selfsubjectrulesreview","text":"class lightkube.resources.authorization_v1beta1. SelfSubjectRulesReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1beta1.SelfSubjectRulesReview Type : Global Resource Accepted client methods : create","title":"SelfSubjectRulesReview"},{"location":"resources/authorization_v1beta1/#subjectaccessreview","text":"class lightkube.resources.authorization_v1beta1. SubjectAccessReview ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authorization_v1beta1.SubjectAccessReview Type : Global Resource Accepted client methods : create","title":"SubjectAccessReview"},{"location":"resources/autoscaling_v1/","text":"autoscaling_v1 HorizontalPodAutoscalerStatus class lightkube.resources.autoscaling_v1. HorizontalPodAutoscalerStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : get , patch , replace HorizontalPodAutoscaler class lightkube.resources.autoscaling_v1. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : HorizontalPodAutoscalerStatus","title":"autoscaling_v1"},{"location":"resources/autoscaling_v1/#autoscaling_v1","text":"","title":"autoscaling_v1"},{"location":"resources/autoscaling_v1/#horizontalpodautoscalerstatus","text":"class lightkube.resources.autoscaling_v1. HorizontalPodAutoscalerStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"HorizontalPodAutoscalerStatus"},{"location":"resources/autoscaling_v1/#horizontalpodautoscaler","text":"class lightkube.resources.autoscaling_v1. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : HorizontalPodAutoscalerStatus","title":"HorizontalPodAutoscaler"},{"location":"resources/autoscaling_v2beta1/","text":"autoscaling_v2beta1 HorizontalPodAutoscalerStatus class lightkube.resources.autoscaling_v2beta1. HorizontalPodAutoscalerStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v2beta1.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : get , patch , replace HorizontalPodAutoscaler class lightkube.resources.autoscaling_v2beta1. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v2beta1.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : HorizontalPodAutoscalerStatus","title":"autoscaling_v2beta1"},{"location":"resources/autoscaling_v2beta1/#autoscaling_v2beta1","text":"","title":"autoscaling_v2beta1"},{"location":"resources/autoscaling_v2beta1/#horizontalpodautoscalerstatus","text":"class lightkube.resources.autoscaling_v2beta1. HorizontalPodAutoscalerStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v2beta1.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"HorizontalPodAutoscalerStatus"},{"location":"resources/autoscaling_v2beta1/#horizontalpodautoscaler","text":"class lightkube.resources.autoscaling_v2beta1. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v2beta1.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : HorizontalPodAutoscalerStatus","title":"HorizontalPodAutoscaler"},{"location":"resources/autoscaling_v2beta2/","text":"autoscaling_v2beta2 HorizontalPodAutoscalerStatus class lightkube.resources.autoscaling_v2beta2. HorizontalPodAutoscalerStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v2beta2.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : get , patch , replace HorizontalPodAutoscaler class lightkube.resources.autoscaling_v2beta2. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v2beta2.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : HorizontalPodAutoscalerStatus","title":"autoscaling_v2beta2"},{"location":"resources/autoscaling_v2beta2/#autoscaling_v2beta2","text":"","title":"autoscaling_v2beta2"},{"location":"resources/autoscaling_v2beta2/#horizontalpodautoscalerstatus","text":"class lightkube.resources.autoscaling_v2beta2. HorizontalPodAutoscalerStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v2beta2.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"HorizontalPodAutoscalerStatus"},{"location":"resources/autoscaling_v2beta2/#horizontalpodautoscaler","text":"class lightkube.resources.autoscaling_v2beta2. HorizontalPodAutoscaler ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v2beta2.HorizontalPodAutoscaler Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : HorizontalPodAutoscalerStatus","title":"HorizontalPodAutoscaler"},{"location":"resources/batch_v1/","text":"batch_v1 JobStatus class lightkube.resources.batch_v1. JobStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v1.Job Type : Namespaced Resource Accepted client methods : get , patch , replace Job class lightkube.resources.batch_v1. Job ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v1.Job Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : JobStatus","title":"batch_v1"},{"location":"resources/batch_v1/#batch_v1","text":"","title":"batch_v1"},{"location":"resources/batch_v1/#jobstatus","text":"class lightkube.resources.batch_v1. JobStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v1.Job Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"JobStatus"},{"location":"resources/batch_v1/#job","text":"class lightkube.resources.batch_v1. Job ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v1.Job Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : JobStatus","title":"Job"},{"location":"resources/batch_v1beta1/","text":"batch_v1beta1 CronJobStatus class lightkube.resources.batch_v1beta1. CronJobStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v1beta1.CronJob Type : Namespaced Resource Accepted client methods : get , patch , replace CronJob class lightkube.resources.batch_v1beta1. CronJob ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v1beta1.CronJob Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : CronJobStatus","title":"batch_v1beta1"},{"location":"resources/batch_v1beta1/#batch_v1beta1","text":"","title":"batch_v1beta1"},{"location":"resources/batch_v1beta1/#cronjobstatus","text":"class lightkube.resources.batch_v1beta1. CronJobStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v1beta1.CronJob Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"CronJobStatus"},{"location":"resources/batch_v1beta1/#cronjob","text":"class lightkube.resources.batch_v1beta1. CronJob ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v1beta1.CronJob Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : CronJobStatus","title":"CronJob"},{"location":"resources/batch_v2alpha1/","text":"batch_v2alpha1 CronJobStatus class lightkube.resources.batch_v2alpha1. CronJobStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v2alpha1.CronJob Type : Namespaced Resource Accepted client methods : get , patch , replace CronJob class lightkube.resources.batch_v2alpha1. CronJob ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v2alpha1.CronJob Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : CronJobStatus","title":"batch_v2alpha1"},{"location":"resources/batch_v2alpha1/#batch_v2alpha1","text":"","title":"batch_v2alpha1"},{"location":"resources/batch_v2alpha1/#cronjobstatus","text":"class lightkube.resources.batch_v2alpha1. CronJobStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v2alpha1.CronJob Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"CronJobStatus"},{"location":"resources/batch_v2alpha1/#cronjob","text":"class lightkube.resources.batch_v2alpha1. CronJob ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.batch_v2alpha1.CronJob Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : CronJobStatus","title":"CronJob"},{"location":"resources/certificates_v1beta1/","text":"certificates_v1beta1 CertificateSigningRequestApproval class lightkube.resources.certificates_v1beta1. CertificateSigningRequestApproval ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.certificates_v1beta1.CertificateSigningRequest Type : Global Resource Accepted client methods : replace CertificateSigningRequestStatus class lightkube.resources.certificates_v1beta1. CertificateSigningRequestStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.certificates_v1beta1.CertificateSigningRequest Type : Global Resource Accepted client methods : get , patch , replace CertificateSigningRequest class lightkube.resources.certificates_v1beta1. CertificateSigningRequest ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.certificates_v1beta1.CertificateSigningRequest Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Approval : CertificateSigningRequestApproval Status : CertificateSigningRequestStatus","title":"certificates_v1beta1"},{"location":"resources/certificates_v1beta1/#certificates_v1beta1","text":"","title":"certificates_v1beta1"},{"location":"resources/certificates_v1beta1/#certificatesigningrequestapproval","text":"class lightkube.resources.certificates_v1beta1. CertificateSigningRequestApproval ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.certificates_v1beta1.CertificateSigningRequest Type : Global Resource Accepted client methods : replace","title":"CertificateSigningRequestApproval"},{"location":"resources/certificates_v1beta1/#certificatesigningrequeststatus","text":"class lightkube.resources.certificates_v1beta1. CertificateSigningRequestStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.certificates_v1beta1.CertificateSigningRequest Type : Global Resource Accepted client methods : get , patch , replace","title":"CertificateSigningRequestStatus"},{"location":"resources/certificates_v1beta1/#certificatesigningrequest","text":"class lightkube.resources.certificates_v1beta1. CertificateSigningRequest ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.certificates_v1beta1.CertificateSigningRequest Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Approval : CertificateSigningRequestApproval Status : CertificateSigningRequestStatus","title":"CertificateSigningRequest"},{"location":"resources/coordination_v1/","text":"coordination_v1 Lease class lightkube.resources.coordination_v1. Lease ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.coordination_v1.Lease Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"coordination_v1"},{"location":"resources/coordination_v1/#coordination_v1","text":"","title":"coordination_v1"},{"location":"resources/coordination_v1/#lease","text":"class lightkube.resources.coordination_v1. Lease ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.coordination_v1.Lease Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"Lease"},{"location":"resources/coordination_v1beta1/","text":"coordination_v1beta1 Lease class lightkube.resources.coordination_v1beta1. Lease ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.coordination_v1beta1.Lease Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"coordination_v1beta1"},{"location":"resources/coordination_v1beta1/#coordination_v1beta1","text":"","title":"coordination_v1beta1"},{"location":"resources/coordination_v1beta1/#lease","text":"class lightkube.resources.coordination_v1beta1. Lease ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.coordination_v1beta1.Lease Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"Lease"},{"location":"resources/core_v1/","text":"core_v1 ComponentStatus class lightkube.resources.core_v1. ComponentStatus ( apiVersion=None , conditions=None , kind=None , metadata=None ) Extends : models.core_v1.ComponentStatus Type : Global Resource Accepted client methods : get , list , watch ConfigMap class lightkube.resources.core_v1. ConfigMap ( apiVersion=None , binaryData=None , data=None , immutable=None , kind=None , metadata=None ) Extends : models.core_v1.ConfigMap Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Endpoints class lightkube.resources.core_v1. Endpoints ( apiVersion=None , kind=None , metadata=None , subsets=None ) Extends : models.core_v1.Endpoints Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Event class lightkube.resources.core_v1. Event ( involvedObject , metadata , action=None , apiVersion=None , count=None , eventTime=None , firstTimestamp=None , kind=None , lastTimestamp=None , message=None , reason=None , related=None , reportingComponent=None , reportingInstance=None , series=None , source=None , type=None ) Extends : models.core_v1.Event Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch LimitRange class lightkube.resources.core_v1. LimitRange ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.core_v1.LimitRange Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch NamespaceFinalize class lightkube.resources.core_v1. NamespaceFinalize ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Namespace Type : Global Resource Accepted client methods : replace NamespaceStatus class lightkube.resources.core_v1. NamespaceStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Namespace Type : Global Resource Accepted client methods : get , patch , replace Namespace class lightkube.resources.core_v1. Namespace ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Namespace Type : Global Resource Accepted client methods : delete , get , list , patch , create , replace , watch Subresources : Finalize : NamespaceFinalize Status : NamespaceStatus Binding class lightkube.resources.core_v1. Binding ( target , apiVersion=None , kind=None , metadata=None ) Extends : models.core_v1.Binding Type : Namespaced Resource Accepted client methods : create PersistentVolumeClaimStatus class lightkube.resources.core_v1. PersistentVolumeClaimStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.PersistentVolumeClaim Type : Namespaced Resource Accepted client methods : get , patch , replace PersistentVolumeClaim class lightkube.resources.core_v1. PersistentVolumeClaim ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.PersistentVolumeClaim Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : PersistentVolumeClaimStatus PodBinding class lightkube.resources.core_v1. PodBinding ( target , apiVersion=None , kind=None , metadata=None ) Extends : models.core_v1.Binding Type : Namespaced Resource Accepted client methods : create PodEviction class lightkube.resources.core_v1. PodEviction ( apiVersion=None , deleteOptions=None , kind=None , metadata=None ) Extends : models.policy_v1beta1.Eviction Type : Namespaced Resource Accepted client methods : create PodLog class lightkube.resources.core_v1. PodLog ( ) Extends : models.mespacedSubResource Type : Namespaced Resource Accepted client methods : get PodStatus class lightkube.resources.core_v1. PodStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Pod Type : Namespaced Resource Accepted client methods : get , patch , replace Pod class lightkube.resources.core_v1. Pod ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Pod Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Binding : PodBinding Eviction : PodEviction Log : PodLog Status : PodStatus PodTemplate class lightkube.resources.core_v1. PodTemplate ( apiVersion=None , kind=None , metadata=None , template=None ) Extends : models.core_v1.PodTemplate Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch ReplicationControllerScale class lightkube.resources.core_v1. ReplicationControllerScale ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.Scale Type : Namespaced Resource Accepted client methods : get , patch , replace ReplicationControllerStatus class lightkube.resources.core_v1. ReplicationControllerStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.ReplicationController Type : Namespaced Resource Accepted client methods : get , patch , replace ReplicationController class lightkube.resources.core_v1. ReplicationController ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.ReplicationController Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Scale : ReplicationControllerScale Status : ReplicationControllerStatus ResourceQuotaStatus class lightkube.resources.core_v1. ResourceQuotaStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.ResourceQuota Type : Namespaced Resource Accepted client methods : get , patch , replace ResourceQuota class lightkube.resources.core_v1. ResourceQuota ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.ResourceQuota Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : ResourceQuotaStatus Secret class lightkube.resources.core_v1. Secret ( apiVersion=None , data=None , immutable=None , kind=None , metadata=None , stringData=None , type=None ) Extends : models.core_v1.Secret Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch ServiceAccountToken class lightkube.resources.core_v1. ServiceAccountToken ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authentication_v1.TokenRequest Type : Namespaced Resource Accepted client methods : create ServiceAccount class lightkube.resources.core_v1. ServiceAccount ( apiVersion=None , automountServiceAccountToken=None , imagePullSecrets=None , kind=None , metadata=None , secrets=None ) Extends : models.core_v1.ServiceAccount Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Token : ServiceAccountToken ServiceStatus class lightkube.resources.core_v1. ServiceStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Service Type : Namespaced Resource Accepted client methods : get , patch , replace Service class lightkube.resources.core_v1. Service ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Service Type : Namespaced Resource Accepted client methods : delete , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : ServiceStatus NodeStatus class lightkube.resources.core_v1. NodeStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Node Type : Global Resource Accepted client methods : get , patch , replace Node class lightkube.resources.core_v1. Node ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Node Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : NodeStatus PersistentVolumeStatus class lightkube.resources.core_v1. PersistentVolumeStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.PersistentVolume Type : Global Resource Accepted client methods : get , patch , replace PersistentVolume class lightkube.resources.core_v1. PersistentVolume ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.PersistentVolume Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : PersistentVolumeStatus","title":"core_v1"},{"location":"resources/core_v1/#core_v1","text":"","title":"core_v1"},{"location":"resources/core_v1/#componentstatus","text":"class lightkube.resources.core_v1. ComponentStatus ( apiVersion=None , conditions=None , kind=None , metadata=None ) Extends : models.core_v1.ComponentStatus Type : Global Resource Accepted client methods : get , list , watch","title":"ComponentStatus"},{"location":"resources/core_v1/#configmap","text":"class lightkube.resources.core_v1. ConfigMap ( apiVersion=None , binaryData=None , data=None , immutable=None , kind=None , metadata=None ) Extends : models.core_v1.ConfigMap Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"ConfigMap"},{"location":"resources/core_v1/#endpoints","text":"class lightkube.resources.core_v1. Endpoints ( apiVersion=None , kind=None , metadata=None , subsets=None ) Extends : models.core_v1.Endpoints Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"Endpoints"},{"location":"resources/core_v1/#event","text":"class lightkube.resources.core_v1. Event ( involvedObject , metadata , action=None , apiVersion=None , count=None , eventTime=None , firstTimestamp=None , kind=None , lastTimestamp=None , message=None , reason=None , related=None , reportingComponent=None , reportingInstance=None , series=None , source=None , type=None ) Extends : models.core_v1.Event Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"Event"},{"location":"resources/core_v1/#limitrange","text":"class lightkube.resources.core_v1. LimitRange ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.core_v1.LimitRange Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"LimitRange"},{"location":"resources/core_v1/#namespacefinalize","text":"class lightkube.resources.core_v1. NamespaceFinalize ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Namespace Type : Global Resource Accepted client methods : replace","title":"NamespaceFinalize"},{"location":"resources/core_v1/#namespacestatus","text":"class lightkube.resources.core_v1. NamespaceStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Namespace Type : Global Resource Accepted client methods : get , patch , replace","title":"NamespaceStatus"},{"location":"resources/core_v1/#namespace","text":"class lightkube.resources.core_v1. Namespace ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Namespace Type : Global Resource Accepted client methods : delete , get , list , patch , create , replace , watch Subresources : Finalize : NamespaceFinalize Status : NamespaceStatus","title":"Namespace"},{"location":"resources/core_v1/#binding","text":"class lightkube.resources.core_v1. Binding ( target , apiVersion=None , kind=None , metadata=None ) Extends : models.core_v1.Binding Type : Namespaced Resource Accepted client methods : create","title":"Binding"},{"location":"resources/core_v1/#persistentvolumeclaimstatus","text":"class lightkube.resources.core_v1. PersistentVolumeClaimStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.PersistentVolumeClaim Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"PersistentVolumeClaimStatus"},{"location":"resources/core_v1/#persistentvolumeclaim","text":"class lightkube.resources.core_v1. PersistentVolumeClaim ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.PersistentVolumeClaim Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : PersistentVolumeClaimStatus","title":"PersistentVolumeClaim"},{"location":"resources/core_v1/#podbinding","text":"class lightkube.resources.core_v1. PodBinding ( target , apiVersion=None , kind=None , metadata=None ) Extends : models.core_v1.Binding Type : Namespaced Resource Accepted client methods : create","title":"PodBinding"},{"location":"resources/core_v1/#podeviction","text":"class lightkube.resources.core_v1. PodEviction ( apiVersion=None , deleteOptions=None , kind=None , metadata=None ) Extends : models.policy_v1beta1.Eviction Type : Namespaced Resource Accepted client methods : create","title":"PodEviction"},{"location":"resources/core_v1/#podlog","text":"class lightkube.resources.core_v1. PodLog ( ) Extends : models.mespacedSubResource Type : Namespaced Resource Accepted client methods : get","title":"PodLog"},{"location":"resources/core_v1/#podstatus","text":"class lightkube.resources.core_v1. PodStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Pod Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"PodStatus"},{"location":"resources/core_v1/#pod","text":"class lightkube.resources.core_v1. Pod ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Pod Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Binding : PodBinding Eviction : PodEviction Log : PodLog Status : PodStatus","title":"Pod"},{"location":"resources/core_v1/#podtemplate","text":"class lightkube.resources.core_v1. PodTemplate ( apiVersion=None , kind=None , metadata=None , template=None ) Extends : models.core_v1.PodTemplate Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"PodTemplate"},{"location":"resources/core_v1/#replicationcontrollerscale","text":"class lightkube.resources.core_v1. ReplicationControllerScale ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.autoscaling_v1.Scale Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"ReplicationControllerScale"},{"location":"resources/core_v1/#replicationcontrollerstatus","text":"class lightkube.resources.core_v1. ReplicationControllerStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.ReplicationController Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"ReplicationControllerStatus"},{"location":"resources/core_v1/#replicationcontroller","text":"class lightkube.resources.core_v1. ReplicationController ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.ReplicationController Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Scale : ReplicationControllerScale Status : ReplicationControllerStatus","title":"ReplicationController"},{"location":"resources/core_v1/#resourcequotastatus","text":"class lightkube.resources.core_v1. ResourceQuotaStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.ResourceQuota Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"ResourceQuotaStatus"},{"location":"resources/core_v1/#resourcequota","text":"class lightkube.resources.core_v1. ResourceQuota ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.ResourceQuota Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : ResourceQuotaStatus","title":"ResourceQuota"},{"location":"resources/core_v1/#secret","text":"class lightkube.resources.core_v1. Secret ( apiVersion=None , data=None , immutable=None , kind=None , metadata=None , stringData=None , type=None ) Extends : models.core_v1.Secret Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"Secret"},{"location":"resources/core_v1/#serviceaccounttoken","text":"class lightkube.resources.core_v1. ServiceAccountToken ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.authentication_v1.TokenRequest Type : Namespaced Resource Accepted client methods : create","title":"ServiceAccountToken"},{"location":"resources/core_v1/#serviceaccount","text":"class lightkube.resources.core_v1. ServiceAccount ( apiVersion=None , automountServiceAccountToken=None , imagePullSecrets=None , kind=None , metadata=None , secrets=None ) Extends : models.core_v1.ServiceAccount Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Token : ServiceAccountToken","title":"ServiceAccount"},{"location":"resources/core_v1/#servicestatus","text":"class lightkube.resources.core_v1. ServiceStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Service Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"ServiceStatus"},{"location":"resources/core_v1/#service","text":"class lightkube.resources.core_v1. Service ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Service Type : Namespaced Resource Accepted client methods : delete , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : ServiceStatus","title":"Service"},{"location":"resources/core_v1/#nodestatus","text":"class lightkube.resources.core_v1. NodeStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Node Type : Global Resource Accepted client methods : get , patch , replace","title":"NodeStatus"},{"location":"resources/core_v1/#node","text":"class lightkube.resources.core_v1. Node ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.Node Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : NodeStatus","title":"Node"},{"location":"resources/core_v1/#persistentvolumestatus","text":"class lightkube.resources.core_v1. PersistentVolumeStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.PersistentVolume Type : Global Resource Accepted client methods : get , patch , replace","title":"PersistentVolumeStatus"},{"location":"resources/core_v1/#persistentvolume","text":"class lightkube.resources.core_v1. PersistentVolume ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.core_v1.PersistentVolume Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : PersistentVolumeStatus","title":"PersistentVolume"},{"location":"resources/discovery_v1beta1/","text":"discovery_v1beta1 EndpointSlice class lightkube.resources.discovery_v1beta1. EndpointSlice ( addressType , endpoints , apiVersion=None , kind=None , metadata=None , ports=None ) Extends : models.discovery_v1beta1.EndpointSlice Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"discovery_v1beta1"},{"location":"resources/discovery_v1beta1/#discovery_v1beta1","text":"","title":"discovery_v1beta1"},{"location":"resources/discovery_v1beta1/#endpointslice","text":"class lightkube.resources.discovery_v1beta1. EndpointSlice ( addressType , endpoints , apiVersion=None , kind=None , metadata=None , ports=None ) Extends : models.discovery_v1beta1.EndpointSlice Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"EndpointSlice"},{"location":"resources/events_v1beta1/","text":"events_v1beta1 Event class lightkube.resources.events_v1beta1. Event ( eventTime , action=None , apiVersion=None , deprecatedCount=None , deprecatedFirstTimestamp=None , deprecatedLastTimestamp=None , deprecatedSource=None , kind=None , metadata=None , note=None , reason=None , regarding=None , related=None , reportingController=None , reportingInstance=None , series=None , type=None ) Extends : models.events_v1beta1.Event Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"events_v1beta1"},{"location":"resources/events_v1beta1/#events_v1beta1","text":"","title":"events_v1beta1"},{"location":"resources/events_v1beta1/#event","text":"class lightkube.resources.events_v1beta1. Event ( eventTime , action=None , apiVersion=None , deprecatedCount=None , deprecatedFirstTimestamp=None , deprecatedLastTimestamp=None , deprecatedSource=None , kind=None , metadata=None , note=None , reason=None , regarding=None , related=None , reportingController=None , reportingInstance=None , series=None , type=None ) Extends : models.events_v1beta1.Event Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"Event"},{"location":"resources/extensions_v1beta1/","text":"extensions_v1beta1 IngressStatus class lightkube.resources.extensions_v1beta1. IngressStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.extensions_v1beta1.Ingress Type : Namespaced Resource Accepted client methods : get , patch , replace Ingress class lightkube.resources.extensions_v1beta1. Ingress ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.extensions_v1beta1.Ingress Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : IngressStatus","title":"extensions_v1beta1"},{"location":"resources/extensions_v1beta1/#extensions_v1beta1","text":"","title":"extensions_v1beta1"},{"location":"resources/extensions_v1beta1/#ingressstatus","text":"class lightkube.resources.extensions_v1beta1. IngressStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.extensions_v1beta1.Ingress Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"IngressStatus"},{"location":"resources/extensions_v1beta1/#ingress","text":"class lightkube.resources.extensions_v1beta1. Ingress ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.extensions_v1beta1.Ingress Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : IngressStatus","title":"Ingress"},{"location":"resources/flowcontrol_apiserver_v1alpha1/","text":"flowcontrol_apiserver_v1alpha1 FlowSchemaStatus class lightkube.resources.flowcontrol_apiserver_v1alpha1. FlowSchemaStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.flowcontrol_v1alpha1.FlowSchema Type : Global Resource Accepted client methods : get , patch , replace FlowSchema class lightkube.resources.flowcontrol_apiserver_v1alpha1. FlowSchema ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.flowcontrol_v1alpha1.FlowSchema Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : FlowSchemaStatus PriorityLevelConfigurationStatus class lightkube.resources.flowcontrol_apiserver_v1alpha1. PriorityLevelConfigurationStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.flowcontrol_v1alpha1.PriorityLevelConfiguration Type : Global Resource Accepted client methods : get , patch , replace PriorityLevelConfiguration class lightkube.resources.flowcontrol_apiserver_v1alpha1. PriorityLevelConfiguration ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.flowcontrol_v1alpha1.PriorityLevelConfiguration Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : PriorityLevelConfigurationStatus","title":"flowcontrol_apiserver_v1alpha1"},{"location":"resources/flowcontrol_apiserver_v1alpha1/#flowcontrol_apiserver_v1alpha1","text":"","title":"flowcontrol_apiserver_v1alpha1"},{"location":"resources/flowcontrol_apiserver_v1alpha1/#flowschemastatus","text":"class lightkube.resources.flowcontrol_apiserver_v1alpha1. FlowSchemaStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.flowcontrol_v1alpha1.FlowSchema Type : Global Resource Accepted client methods : get , patch , replace","title":"FlowSchemaStatus"},{"location":"resources/flowcontrol_apiserver_v1alpha1/#flowschema","text":"class lightkube.resources.flowcontrol_apiserver_v1alpha1. FlowSchema ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.flowcontrol_v1alpha1.FlowSchema Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : FlowSchemaStatus","title":"FlowSchema"},{"location":"resources/flowcontrol_apiserver_v1alpha1/#prioritylevelconfigurationstatus","text":"class lightkube.resources.flowcontrol_apiserver_v1alpha1. PriorityLevelConfigurationStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.flowcontrol_v1alpha1.PriorityLevelConfiguration Type : Global Resource Accepted client methods : get , patch , replace","title":"PriorityLevelConfigurationStatus"},{"location":"resources/flowcontrol_apiserver_v1alpha1/#prioritylevelconfiguration","text":"class lightkube.resources.flowcontrol_apiserver_v1alpha1. PriorityLevelConfiguration ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.flowcontrol_v1alpha1.PriorityLevelConfiguration Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : PriorityLevelConfigurationStatus","title":"PriorityLevelConfiguration"},{"location":"resources/networking_v1/","text":"networking_v1 NetworkPolicy class lightkube.resources.networking_v1. NetworkPolicy ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.networking_v1.NetworkPolicy Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"networking_v1"},{"location":"resources/networking_v1/#networking_v1","text":"","title":"networking_v1"},{"location":"resources/networking_v1/#networkpolicy","text":"class lightkube.resources.networking_v1. NetworkPolicy ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.networking_v1.NetworkPolicy Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"NetworkPolicy"},{"location":"resources/networking_v1beta1/","text":"networking_v1beta1 IngressClass class lightkube.resources.networking_v1beta1. IngressClass ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.networking_v1beta1.IngressClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch IngressStatus class lightkube.resources.networking_v1beta1. IngressStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.networking_v1beta1.Ingress Type : Namespaced Resource Accepted client methods : get , patch , replace Ingress class lightkube.resources.networking_v1beta1. Ingress ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.networking_v1beta1.Ingress Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : IngressStatus","title":"networking_v1beta1"},{"location":"resources/networking_v1beta1/#networking_v1beta1","text":"","title":"networking_v1beta1"},{"location":"resources/networking_v1beta1/#ingressclass","text":"class lightkube.resources.networking_v1beta1. IngressClass ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.networking_v1beta1.IngressClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"IngressClass"},{"location":"resources/networking_v1beta1/#ingressstatus","text":"class lightkube.resources.networking_v1beta1. IngressStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.networking_v1beta1.Ingress Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"IngressStatus"},{"location":"resources/networking_v1beta1/#ingress","text":"class lightkube.resources.networking_v1beta1. Ingress ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.networking_v1beta1.Ingress Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : IngressStatus","title":"Ingress"},{"location":"resources/node_v1alpha1/","text":"node_v1alpha1 RuntimeClass class lightkube.resources.node_v1alpha1. RuntimeClass ( spec , apiVersion=None , kind=None , metadata=None ) Extends : models.node_v1alpha1.RuntimeClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"node_v1alpha1"},{"location":"resources/node_v1alpha1/#node_v1alpha1","text":"","title":"node_v1alpha1"},{"location":"resources/node_v1alpha1/#runtimeclass","text":"class lightkube.resources.node_v1alpha1. RuntimeClass ( spec , apiVersion=None , kind=None , metadata=None ) Extends : models.node_v1alpha1.RuntimeClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"RuntimeClass"},{"location":"resources/node_v1beta1/","text":"node_v1beta1 RuntimeClass class lightkube.resources.node_v1beta1. RuntimeClass ( handler , apiVersion=None , kind=None , metadata=None , overhead=None , scheduling=None ) Extends : models.node_v1beta1.RuntimeClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"node_v1beta1"},{"location":"resources/node_v1beta1/#node_v1beta1","text":"","title":"node_v1beta1"},{"location":"resources/node_v1beta1/#runtimeclass","text":"class lightkube.resources.node_v1beta1. RuntimeClass ( handler , apiVersion=None , kind=None , metadata=None , overhead=None , scheduling=None ) Extends : models.node_v1beta1.RuntimeClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"RuntimeClass"},{"location":"resources/policy_v1beta1/","text":"policy_v1beta1 PodDisruptionBudgetStatus class lightkube.resources.policy_v1beta1. PodDisruptionBudgetStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.policy_v1beta1.PodDisruptionBudget Type : Namespaced Resource Accepted client methods : get , patch , replace PodDisruptionBudget class lightkube.resources.policy_v1beta1. PodDisruptionBudget ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.policy_v1beta1.PodDisruptionBudget Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : PodDisruptionBudgetStatus PodSecurityPolicy class lightkube.resources.policy_v1beta1. PodSecurityPolicy ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.policy_v1beta1.PodSecurityPolicy Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"policy_v1beta1"},{"location":"resources/policy_v1beta1/#policy_v1beta1","text":"","title":"policy_v1beta1"},{"location":"resources/policy_v1beta1/#poddisruptionbudgetstatus","text":"class lightkube.resources.policy_v1beta1. PodDisruptionBudgetStatus ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.policy_v1beta1.PodDisruptionBudget Type : Namespaced Resource Accepted client methods : get , patch , replace","title":"PodDisruptionBudgetStatus"},{"location":"resources/policy_v1beta1/#poddisruptionbudget","text":"class lightkube.resources.policy_v1beta1. PodDisruptionBudget ( apiVersion=None , kind=None , metadata=None , spec=None , status=None ) Extends : models.policy_v1beta1.PodDisruptionBudget Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Subresources : Status : PodDisruptionBudgetStatus","title":"PodDisruptionBudget"},{"location":"resources/policy_v1beta1/#podsecuritypolicy","text":"class lightkube.resources.policy_v1beta1. PodSecurityPolicy ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.policy_v1beta1.PodSecurityPolicy Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"PodSecurityPolicy"},{"location":"resources/rbac_authorization_v1/","text":"rbac_authorization_v1 ClusterRoleBinding class lightkube.resources.rbac_authorization_v1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1.ClusterRoleBinding Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch ClusterRole class lightkube.resources.rbac_authorization_v1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1.ClusterRole Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch RoleBinding class lightkube.resources.rbac_authorization_v1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1.RoleBinding Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Role class lightkube.resources.rbac_authorization_v1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1.Role Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"rbac_authorization_v1"},{"location":"resources/rbac_authorization_v1/#rbac_authorization_v1","text":"","title":"rbac_authorization_v1"},{"location":"resources/rbac_authorization_v1/#clusterrolebinding","text":"class lightkube.resources.rbac_authorization_v1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1.ClusterRoleBinding Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"ClusterRoleBinding"},{"location":"resources/rbac_authorization_v1/#clusterrole","text":"class lightkube.resources.rbac_authorization_v1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1.ClusterRole Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"ClusterRole"},{"location":"resources/rbac_authorization_v1/#rolebinding","text":"class lightkube.resources.rbac_authorization_v1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1.RoleBinding Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"RoleBinding"},{"location":"resources/rbac_authorization_v1/#role","text":"class lightkube.resources.rbac_authorization_v1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1.Role Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"Role"},{"location":"resources/rbac_authorization_v1alpha1/","text":"rbac_authorization_v1alpha1 ClusterRoleBinding class lightkube.resources.rbac_authorization_v1alpha1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1alpha1.ClusterRoleBinding Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch ClusterRole class lightkube.resources.rbac_authorization_v1alpha1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1alpha1.ClusterRole Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch RoleBinding class lightkube.resources.rbac_authorization_v1alpha1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1alpha1.RoleBinding Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Role class lightkube.resources.rbac_authorization_v1alpha1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1alpha1.Role Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"rbac_authorization_v1alpha1"},{"location":"resources/rbac_authorization_v1alpha1/#rbac_authorization_v1alpha1","text":"","title":"rbac_authorization_v1alpha1"},{"location":"resources/rbac_authorization_v1alpha1/#clusterrolebinding","text":"class lightkube.resources.rbac_authorization_v1alpha1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1alpha1.ClusterRoleBinding Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"ClusterRoleBinding"},{"location":"resources/rbac_authorization_v1alpha1/#clusterrole","text":"class lightkube.resources.rbac_authorization_v1alpha1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1alpha1.ClusterRole Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"ClusterRole"},{"location":"resources/rbac_authorization_v1alpha1/#rolebinding","text":"class lightkube.resources.rbac_authorization_v1alpha1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1alpha1.RoleBinding Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"RoleBinding"},{"location":"resources/rbac_authorization_v1alpha1/#role","text":"class lightkube.resources.rbac_authorization_v1alpha1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1alpha1.Role Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"Role"},{"location":"resources/rbac_authorization_v1beta1/","text":"rbac_authorization_v1beta1 ClusterRoleBinding class lightkube.resources.rbac_authorization_v1beta1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1beta1.ClusterRoleBinding Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch ClusterRole class lightkube.resources.rbac_authorization_v1beta1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1beta1.ClusterRole Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch RoleBinding class lightkube.resources.rbac_authorization_v1beta1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1beta1.RoleBinding Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch Role class lightkube.resources.rbac_authorization_v1beta1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1beta1.Role Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"rbac_authorization_v1beta1"},{"location":"resources/rbac_authorization_v1beta1/#rbac_authorization_v1beta1","text":"","title":"rbac_authorization_v1beta1"},{"location":"resources/rbac_authorization_v1beta1/#clusterrolebinding","text":"class lightkube.resources.rbac_authorization_v1beta1. ClusterRoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1beta1.ClusterRoleBinding Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"ClusterRoleBinding"},{"location":"resources/rbac_authorization_v1beta1/#clusterrole","text":"class lightkube.resources.rbac_authorization_v1beta1. ClusterRole ( aggregationRule=None , apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1beta1.ClusterRole Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"ClusterRole"},{"location":"resources/rbac_authorization_v1beta1/#rolebinding","text":"class lightkube.resources.rbac_authorization_v1beta1. RoleBinding ( roleRef , apiVersion=None , kind=None , metadata=None , subjects=None ) Extends : models.rbac_v1beta1.RoleBinding Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"RoleBinding"},{"location":"resources/rbac_authorization_v1beta1/#role","text":"class lightkube.resources.rbac_authorization_v1beta1. Role ( apiVersion=None , kind=None , metadata=None , rules=None ) Extends : models.rbac_v1beta1.Role Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"Role"},{"location":"resources/scheduling_v1/","text":"scheduling_v1 PriorityClass class lightkube.resources.scheduling_v1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) Extends : models.scheduling_v1.PriorityClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"scheduling_v1"},{"location":"resources/scheduling_v1/#scheduling_v1","text":"","title":"scheduling_v1"},{"location":"resources/scheduling_v1/#priorityclass","text":"class lightkube.resources.scheduling_v1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) Extends : models.scheduling_v1.PriorityClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"PriorityClass"},{"location":"resources/scheduling_v1alpha1/","text":"scheduling_v1alpha1 PriorityClass class lightkube.resources.scheduling_v1alpha1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) Extends : models.scheduling_v1alpha1.PriorityClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"scheduling_v1alpha1"},{"location":"resources/scheduling_v1alpha1/#scheduling_v1alpha1","text":"","title":"scheduling_v1alpha1"},{"location":"resources/scheduling_v1alpha1/#priorityclass","text":"class lightkube.resources.scheduling_v1alpha1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) Extends : models.scheduling_v1alpha1.PriorityClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"PriorityClass"},{"location":"resources/scheduling_v1beta1/","text":"scheduling_v1beta1 PriorityClass class lightkube.resources.scheduling_v1beta1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) Extends : models.scheduling_v1beta1.PriorityClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"scheduling_v1beta1"},{"location":"resources/scheduling_v1beta1/#scheduling_v1beta1","text":"","title":"scheduling_v1beta1"},{"location":"resources/scheduling_v1beta1/#priorityclass","text":"class lightkube.resources.scheduling_v1beta1. PriorityClass ( value , apiVersion=None , description=None , globalDefault=None , kind=None , metadata=None , preemptionPolicy=None ) Extends : models.scheduling_v1beta1.PriorityClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"PriorityClass"},{"location":"resources/settings_v1alpha1/","text":"settings_v1alpha1 PodPreset class lightkube.resources.settings_v1alpha1. PodPreset ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.settings_v1alpha1.PodPreset Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"settings_v1alpha1"},{"location":"resources/settings_v1alpha1/#settings_v1alpha1","text":"","title":"settings_v1alpha1"},{"location":"resources/settings_v1alpha1/#podpreset","text":"class lightkube.resources.settings_v1alpha1. PodPreset ( apiVersion=None , kind=None , metadata=None , spec=None ) Extends : models.settings_v1alpha1.PodPreset Type : Namespaced Resource Accepted client methods : delete , deletecollection , get , list all, watch all, list , patch , create , replace , watch","title":"PodPreset"},{"location":"resources/storage_v1/","text":"storage_v1 CSIDriver class lightkube.resources.storage_v1. CSIDriver ( spec , apiVersion=None , kind=None , metadata=None ) Extends : models.storage_v1.CSIDriver Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch CSINode class lightkube.resources.storage_v1. CSINode ( spec , apiVersion=None , kind=None , metadata=None ) Extends : models.storage_v1.CSINode Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch StorageClass class lightkube.resources.storage_v1. StorageClass ( provisioner , allowVolumeExpansion=None , allowedTopologies=None , apiVersion=None , kind=None , metadata=None , mountOptions=None , parameters=None , reclaimPolicy=None , volumeBindingMode=None ) Extends : models.storage_v1.StorageClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch VolumeAttachmentStatus class lightkube.resources.storage_v1. VolumeAttachmentStatus ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.storage_v1.VolumeAttachment Type : Global Resource Accepted client methods : get , patch , replace VolumeAttachment class lightkube.resources.storage_v1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.storage_v1.VolumeAttachment Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : VolumeAttachmentStatus","title":"storage_v1"},{"location":"resources/storage_v1/#storage_v1","text":"","title":"storage_v1"},{"location":"resources/storage_v1/#csidriver","text":"class lightkube.resources.storage_v1. CSIDriver ( spec , apiVersion=None , kind=None , metadata=None ) Extends : models.storage_v1.CSIDriver Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"CSIDriver"},{"location":"resources/storage_v1/#csinode","text":"class lightkube.resources.storage_v1. CSINode ( spec , apiVersion=None , kind=None , metadata=None ) Extends : models.storage_v1.CSINode Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"CSINode"},{"location":"resources/storage_v1/#storageclass","text":"class lightkube.resources.storage_v1. StorageClass ( provisioner , allowVolumeExpansion=None , allowedTopologies=None , apiVersion=None , kind=None , metadata=None , mountOptions=None , parameters=None , reclaimPolicy=None , volumeBindingMode=None ) Extends : models.storage_v1.StorageClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"StorageClass"},{"location":"resources/storage_v1/#volumeattachmentstatus","text":"class lightkube.resources.storage_v1. VolumeAttachmentStatus ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.storage_v1.VolumeAttachment Type : Global Resource Accepted client methods : get , patch , replace","title":"VolumeAttachmentStatus"},{"location":"resources/storage_v1/#volumeattachment","text":"class lightkube.resources.storage_v1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.storage_v1.VolumeAttachment Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch Subresources : Status : VolumeAttachmentStatus","title":"VolumeAttachment"},{"location":"resources/storage_v1alpha1/","text":"storage_v1alpha1 VolumeAttachment class lightkube.resources.storage_v1alpha1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.storage_v1alpha1.VolumeAttachment Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"storage_v1alpha1"},{"location":"resources/storage_v1alpha1/#storage_v1alpha1","text":"","title":"storage_v1alpha1"},{"location":"resources/storage_v1alpha1/#volumeattachment","text":"class lightkube.resources.storage_v1alpha1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.storage_v1alpha1.VolumeAttachment Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"VolumeAttachment"},{"location":"resources/storage_v1beta1/","text":"storage_v1beta1 CSIDriver class lightkube.resources.storage_v1beta1. CSIDriver ( spec , apiVersion=None , kind=None , metadata=None ) Extends : models.storage_v1beta1.CSIDriver Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch CSINode class lightkube.resources.storage_v1beta1. CSINode ( spec , apiVersion=None , kind=None , metadata=None ) Extends : models.storage_v1beta1.CSINode Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch StorageClass class lightkube.resources.storage_v1beta1. StorageClass ( provisioner , allowVolumeExpansion=None , allowedTopologies=None , apiVersion=None , kind=None , metadata=None , mountOptions=None , parameters=None , reclaimPolicy=None , volumeBindingMode=None ) Extends : models.storage_v1beta1.StorageClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch VolumeAttachment class lightkube.resources.storage_v1beta1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.storage_v1beta1.VolumeAttachment Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"storage_v1beta1"},{"location":"resources/storage_v1beta1/#storage_v1beta1","text":"","title":"storage_v1beta1"},{"location":"resources/storage_v1beta1/#csidriver","text":"class lightkube.resources.storage_v1beta1. CSIDriver ( spec , apiVersion=None , kind=None , metadata=None ) Extends : models.storage_v1beta1.CSIDriver Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"CSIDriver"},{"location":"resources/storage_v1beta1/#csinode","text":"class lightkube.resources.storage_v1beta1. CSINode ( spec , apiVersion=None , kind=None , metadata=None ) Extends : models.storage_v1beta1.CSINode Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"CSINode"},{"location":"resources/storage_v1beta1/#storageclass","text":"class lightkube.resources.storage_v1beta1. StorageClass ( provisioner , allowVolumeExpansion=None , allowedTopologies=None , apiVersion=None , kind=None , metadata=None , mountOptions=None , parameters=None , reclaimPolicy=None , volumeBindingMode=None ) Extends : models.storage_v1beta1.StorageClass Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"StorageClass"},{"location":"resources/storage_v1beta1/#volumeattachment","text":"class lightkube.resources.storage_v1beta1. VolumeAttachment ( spec , apiVersion=None , kind=None , metadata=None , status=None ) Extends : models.storage_v1beta1.VolumeAttachment Type : Global Resource Accepted client methods : delete , deletecollection , get , list , patch , create , replace , watch","title":"VolumeAttachment"}]}